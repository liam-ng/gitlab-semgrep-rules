rules:
- id: gitlab.bar
  patterns:
  - pattern: func bar() {...}
  message: |
    Function bar detected
  metadata:
    cwe: 'CWE-200'
    shortDescription: 'Exposure of Sensitive Information to an Unauthorized Actor'
    license: MIT
    source: https://semgrep.dev/r/gitlab.bar
    shortlink: https://sg.run/gB8J
    semgrep.dev:
      rule:
        rule_id: WAU68Z
        version_id: X0TeoB
        url: https://semgrep.dev/playground/r/X0TeoB/gitlab.bar
        origin: custom
  severity: ERROR
  languages:
  - go
- id: gitlab.bandit.B108
  pattern: open("=~/^\/tmp.*/", ...)
  message: |
    Detected hardcoded temp directory. Consider using 'tempfile.TemporaryFile' instead.
  metadata:
    cwe: 'CWE-377'
    shortDescription: Insecure Temporary File
    primary_identifier: bandit.B108
    secondary_identifiers:
    - name: Bandit Test ID B108
      type: bandit_test_id
      value: B108
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B108
    shortlink: https://sg.run/QRL4
    semgrep.dev:
      rule:
        rule_id: 0oU6oJ
        version_id: LjT38p
        url: https://semgrep.dev/playground/r/LjT38p/gitlab.bandit.B108
        origin: custom
  severity: WARNING
  languages:
  - python
- id: gitlab.bandit.B108-2
  patterns:
  - pattern: open($DIR, ...)
  - metavariable-regex:
      metavariable: $DIR
      regex: '[''"](/tmp|/var/tmp|/dev/shm).*[''"]'
  message: |
    Probable insecure usage of temp file/directory.
  metadata:
    cwe: 'CWE-377'
    shortDescription: Insecure Temporary File
    primary_identifier: bandit.B108-2
    secondary_identifiers:
    - name: Bandit Test ID B108
      type: bandit_test_id
      value: B108
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B108-2
    shortlink: https://sg.run/O1Yk
    semgrep.dev:
      rule:
        rule_id: pKUGl6
        version_id: 8KTZ8W
        url: https://semgrep.dev/playground/r/8KTZ8W/gitlab.bandit.B108-2
        origin: custom
  severity: WARNING
  languages:
  - python
- id: gitlab.bandit.B110
  pattern-either:
  - pattern: |
      try: ...
      except $EXCEPTION: pass
  - pattern: |
      try: ...
      except $EXCEPTION as $X: pass
  - pattern: |
      try: ...
      except ... : ...
      except $EXCEPTION: pass
  - pattern: |
      try: ...
      except $EXCEPTION: pass
      except ... : ...
  - pattern: |
      try: ...
      except ... : ...
      except $EXCEPTION as $X: pass
  - pattern: |
      try: ...
      except $EXCEPTION as $X: pass
      except ... : ...
  - pattern: |
      try: ...
      except ... : ...
      except ... : ...
      except $EXCEPTION: pass
  - pattern: |
      try: ...
      except $EXCEPTION: pass
      except ... : ...
      except ... : ...
  - pattern: |
      try: ...
      except ... : ...
      except $EXCEPTION: pass
      except ... : ...
  - pattern: |
      try: ...
      except ... : ...
      except ... : ...
      except $EXCEPTION as $X: pass
  - pattern: |
      try: ...
      except $EXCEPTION as $X: pass
      except ... : ...
      except ... : ...
  - pattern: |
      try: ...
      except ... : ...
      except $EXCEPTION as $X: pass
      except ... : ...
  - pattern: |
      try: ...
      except ... : ...
      except ... : ...
      except ... : ...
      except $EXCEPTION: pass
  - pattern: |
      try: ...
      except $EXCEPTION: pass
      except ... : ...
      except ... : ...
      except ... : ...
  - pattern: |
      try: ...
      except ... : ...
      except $EXCEPTION: pass
      except ... : ...
      except ... : ...
  - pattern: |
      try: ...
      except ... : ...
      except ... : ...
      except $EXCEPTION: pass
      except ... : ...
  - pattern: |
      try: ...
      except ... : ...
      except ... : ...
      except ... : ...
      except $EXCEPTION: pass
  - pattern: |
      try: ...
      except ... : ...
      except ... : ...
      except ... : ...
      except $EXCEPTION as $X: pass
  - pattern: |
      try: ...
      except $EXCEPTION as $X: pass
      except ... : ...
      except ... : ...
      except ... : ...
  - pattern: |
      try: ...
      except ... : ...
      except $EXCEPTION as $X: pass
      except ... : ...
      except ... : ...
  - pattern: |
      try: ...
      except ... : ...
      except ... : ...
      except $EXCEPTION as $X: pass
      except ... : ...
  - pattern: |
      try: ...
      except ... : ...
      except ... : ...
      except ... : ...
      except $EXCEPTION as $X: pass
  message: |
    Try, Except, Pass
  metadata:
    cwe: 'CWE-703'
    shortDescription: Improper Check or Handling of Exceptional Conditions
    primary_identifier: bandit.B110
    secondary_identifiers:
    - name: Bandit Test ID B110
      type: bandit_test_id
      value: B110
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B110
    shortlink: https://sg.run/e4nL
    semgrep.dev:
      rule:
        rule_id: 2ZU40b
        version_id: 44Td0W
        url: https://semgrep.dev/playground/r/44Td0W/gitlab.bandit.B110
        origin: custom
  severity: INFO
  languages:
  - python
- id: gitlab.bandit.B313
  pattern-either:
  - patterns:
    - pattern: xml.etree.cElementTree.fromstring(...)
    - pattern-not: xml.etree.cElementTree.fromstring("...")
  - pattern: xml.etree.cElementTree.parse(...)
  - pattern: xml.etree.cElementTree.iterparse(...)
  - pattern: xml.etree.cElementTree.XMLParser(...)
  metadata:
    cwe: 'CWE-611'
    shortDescription: Improper Restriction of XML External Entity Reference
    owasp: A4:2017-XML External Entities (XXE)
    primary_identifier: bandit.B313
    secondary_identifiers:
    - name: Bandit Test ID B313
      type: bandit_test_id
      value: B313
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B313
    shortlink: https://sg.run/31Wr
    semgrep.dev:
      rule:
        rule_id: KxUOo7
        version_id: yeTr1e
        url: https://semgrep.dev/playground/r/yeTr1e/gitlab.bandit.B313
        origin: custom
  message: |
    Found use of the native Python XML libraries, which is vulnerable to XML external entity (XXE)
    attacks. The Python documentation recommends the `defusedxml` library instead. Use
    'defusedxml'. See https://github.com/tiran/defusedxml for more information.
  severity: WARNING
  languages:
  - python
- id: gitlab.bandit.B314
  pattern-either:
  - patterns:
    - pattern: xml.etree.ElementTree.fromstring(...)
    - pattern-not: xml.etree.ElementTree.fromstring("...")
  - pattern: xml.etree.ElementTree.parse(...)
  - pattern: xml.etree.ElementTree.iterparse(...)
  - pattern: xml.etree.ElementTree.XMLParser(...)
  metadata:
    cwe: 'CWE-611'
    shortDescription: Improper Restriction of XML External Entity Reference
    owasp: A4:2017-XML External Entities (XXE)
    primary_identifier: bandit.B314
    secondary_identifiers:
    - name: Bandit Test ID B314
      type: bandit_test_id
      value: B314
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B314
    shortlink: https://sg.run/4g0l
    semgrep.dev:
      rule:
        rule_id: qNUKOW
        version_id: rxTezG
        url: https://semgrep.dev/playground/r/rxTezG/gitlab.bandit.B314
        origin: custom
  message: |
    Found use of the native Python XML libraries, which is vulnerable to XML external entity (XXE)
    attacks. The Python documentation recommends the `defusedxml` library instead. Use
    'defusedxml'. See https://github.com/tiran/defusedxml for more information.
  severity: WARNING
  languages:
  - python
- id: gitlab.bandit.B320
  pattern-either:
  - pattern: lxml.etree.parse(...)
  - patterns:
    - pattern: lxml.etree.fromstring(...)
    - pattern-not: lxml.etree.fromstring("...")
  - pattern: lxml.etree.RestrictedElement(...)
  - pattern: lxml.etree.GlobalParserTLS(...)
  - pattern: lxml.etree.getDefaultParser(...)
  - pattern: lxml.etree.check_docinfo(...)
  metadata:
    cwe: 'CWE-611'
    shortDescription: Improper Restriction of XML External Entity Reference
    owasp: A4:2017-XML External Entities (XXE)
    primary_identifier: bandit.B320
    secondary_identifiers:
    - name: Bandit Test ID B320
      type: bandit_test_id
      value: B320
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B320
    shortlink: https://sg.run/PGLY
    semgrep.dev:
      rule:
        rule_id: lBUNZy
        version_id: bZTde4
        url: https://semgrep.dev/playground/r/bZTde4/gitlab.bandit.B320
        origin: custom
  message: |
    Found use of the native Python XML libraries, which is vulnerable to XML external entity (XXE)
    attacks. The Python documentation recommends the `defusedxml` library instead. Use
    'defusedxml'. See https://github.com/tiran/defusedxml for more information.
  severity: WARNING
  languages:
  - python
- id: gitlab.bandit.B316
  pattern-either:
  - patterns:
    - pattern: xml.dom.expatbuilder.parse(...)
    - pattern-not: xml.dom.expatbuilder.parse("...")
  - pattern: xml.dom.expatbuilder.parseString(...)
  message: |
    Insecure XML parsing functionality, prefer `defusedxml`
  metadata:
    cwe: 'CWE-611'
    shortDescription: Improper Restriction of XML External Entity Reference
    owasp: A4:2017-XML External Entities (XXE)
    primary_identifier: bandit.B316
    secondary_identifiers:
    - name: Bandit Test ID B316
      type: bandit_test_id
      value: B316
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B316
    shortlink: https://sg.run/Jp8w
    semgrep.dev:
      rule:
        rule_id: PeUnzj
        version_id: NdTj25
        url: https://semgrep.dev/playground/r/NdTj25/gitlab.bandit.B316
        origin: custom
  severity: WARNING
  languages:
  - python
- id: gitlab.bandit.B315
  pattern-either:
  - pattern: xml.dom.expatreader.parse(...)
  - patterns:
    - pattern: xml.dom.expatreader.parseString(...)
    - pattern-not: xml.dom.expatreader.parseString("...")
  - pattern: xml.dom.expatreader.parseString(...)
  - pattern: xml.dom.expatreader.create_parser(...)
  message: |
    Insecure XML parsing functionality, prefer `defusedxml`
  metadata:
    cwe: 'CWE-611'
    shortDescription: Improper Restriction of XML External Entity Reference
    owasp: A4:2017-XML External Entities (XXE)
    primary_identifier: bandit.B315
    secondary_identifiers:
    - name: Bandit Test ID B315
      type: bandit_test_id
      value: B315
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B315
    shortlink: https://sg.run/5nKA
    semgrep.dev:
      rule:
        rule_id: JDUZkD
        version_id: kbTbl9
        url: https://semgrep.dev/playground/r/kbTbl9/gitlab.bandit.B315
        origin: custom
  severity: WARNING
  languages:
  - python
- id: gitlab.bandit.B405
  patterns:
  - pattern-either:
    - pattern: import xml.etree.cElementTree
    - pattern: import xml.etree.ElementTree
  message: |
    Consider possible security implications associated with etree module.
  metadata:
    cwe: 'CWE-502'
    shortDescription: Deserialization of Untrusted Data
    owasp: A8:2017-Insecure Deserialization
    primary_identifier: bandit.B405
    secondary_identifiers:
    - name: Bandit Test ID B405
      type: bandit_test_id
      value: B405
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B405
    shortlink: https://sg.run/G6Yp
    semgrep.dev:
      rule:
        rule_id: 5rUYqA
        version_id: w8TLxq
        url: https://semgrep.dev/playground/r/w8TLxq/gitlab.bandit.B405
        origin: custom
  severity: INFO
  languages:
  - python
- id: gitlab.bandit.B406
  patterns:
  - pattern-either:
    - pattern: import xml.sax
  message: |
    Using various methods to parse untrusted XML data is known to be vulnerable to
    XML attacks. Replace vulnerable imports with the equivalent defusedxml package,
    or make sure defusedxml.defuse_stdlib() is called.
  metadata:
    cwe: 'CWE-502'
    shortDescription: Deserialization of Untrusted Data
    owasp: A8:2017-Insecure Deserialization
    primary_identifier: bandit.B406
    secondary_identifiers:
    - name: Bandit Test ID B406
      type: bandit_test_id
      value: B406
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B406
    shortlink: https://sg.run/RALO
    semgrep.dev:
      rule:
        rule_id: GdUWq8
        version_id: xyT5eb
        url: https://semgrep.dev/playground/r/xyT5eb/gitlab.bandit.B406
        origin: custom
  severity: INFO
  languages:
  - python
- id: gitlab.bandit.B407
  patterns:
  - pattern-either:
    - pattern: import xml.dom.expatbuilder
  message: |
    Using various methods to parse untrusted XML data is known to be vulnerable to
    XML attacks. Replace vulnerable imports with the equivalent defusedxml package,
    or make sure defusedxml.defuse_stdlib() is called.
  metadata:
    cwe: 'CWE-502'
    shortDescription: Deserialization of Untrusted Data
    owasp: A8:2017-Insecure Deserialization
    primary_identifier: bandit.B407
    secondary_identifiers:
    - name: Bandit Test ID B407
      type: bandit_test_id
      value: B407
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B407
    shortlink: https://sg.run/AWDp
    semgrep.dev:
      rule:
        rule_id: ReUwp0
        version_id: O9TbWK
        url: https://semgrep.dev/playground/r/O9TbWK/gitlab.bandit.B407
        origin: custom
  severity: INFO
  languages:
  - python
- id: gitlab.bandit.B308.B703
  patterns:
  - pattern-not-inside: django.utils.html.format_html(...)
  - pattern: django.utils.safestring.mark_safe(...)
  message: |
    'mark_safe()' is used to mark a string as "safe" for HTML output.
    This disables escaping and could therefore subject the content to
    XSS attacks. Use 'django.utils.html.format_html()' to build HTML
    for rendering instead.
  metadata:
    cwe: 'CWE-79'
    shortDescription: 'Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp: 'A7: Cross-Site Scripting (XSS)'
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B308.B703
    shortlink: https://sg.run/58xj
    semgrep.dev:
      rule:
        rule_id: d8UzRp
        version_id: JdTQjX
        url: https://semgrep.dev/playground/r/JdTQjX/gitlab.bandit.B308.B703
        origin: custom
  severity: WARNING
  languages:
  - python
- id: gitlab.bandit.B404
  patterns:
  - pattern: import subprocess
  message: |
    Consider possible security implications associated with subprocess module.
  metadata:
    cwe: 'CWE-78'
    shortDescription: Improper Neutralization of Special Elements used in an OS Command
      ('OS Command Injection')
    owasp: A8:2017-Insecure Deserialization
    primary_identifier: bandit.B404
    secondary_identifiers:
    - name: Bandit Test ID B404
      type: bandit_test_id
      value: B404
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B404
    shortlink: https://sg.run/lj3o
    semgrep.dev:
      rule:
        rule_id: 4bUz3p
        version_id: PkTyrg
        url: https://semgrep.dev/playground/r/PkTyrg/gitlab.bandit.B404
        origin: custom
  languages:
  - python
  severity: WARNING
- id: gitlab.bandit.B411
  pattern-either:
  - pattern: import xmlrpclib
  message: |
    Consider possible security implications associated with xmlrpclib module.
  metadata:
    cwe: 'CWE-502'
    shortDescription: Deserialization of Untrusted Data
    owasp: A8:2017-Insecure Deserialization
    primary_identifier: bandit.B411
    secondary_identifiers:
    - name: Bandit Test ID B411
      type: bandit_test_id
      value: B411
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B411
    shortlink: https://sg.run/Ygyd
    semgrep.dev:
      rule:
        rule_id: PeUkL4
        version_id: JdTjrJ
        url: https://semgrep.dev/playground/r/JdTjrJ/gitlab.bandit.B411
        origin: custom
  severity: ERROR
  languages:
  - python
- id: gitlab.bandit.B412
  pattern-either:
  - pattern: wsgiref.handlers.CGIHandler(...)
  - pattern: twisted.web.twcgi.CGIDirectory(...)
  message: |
    Consider possible security implications associated with httpoxy module.
  metadata:
    cwe: 'CWE-284'
    shortDescription: Improper Access Control
    owasp: A5:2017-Broken Access Control
    primary_identifier: bandit.B412
    secondary_identifiers:
    - name: Bandit Test ID B412
      type: bandit_test_id
      value: B412
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B412
    shortlink: https://sg.run/6rOK
    semgrep.dev:
      rule:
        rule_id: JDUPgX
        version_id: 5PTzD6
        url: https://semgrep.dev/playground/r/5PTzD6/gitlab.bandit.B412
        origin: custom
  severity: ERROR
  languages:
  - python
- id: gitlab.bandit.B506
  patterns:
  - pattern-inside: |
      import yaml
      ...
  - pattern-not-inside: |
      from ruamel.yaml import YAML
      ...
  - pattern-either:
    - pattern: yaml.unsafe_load(...)
    - pattern: yaml.$LD(..., Loader=yaml.$LOADER, ...)
    - pattern: yaml.$LD($DATA)
  - metavariable-regex:
      metavariable: $LOADER
      regex: (Loader|UnsafeLoader|CLoader|FullLoader)
  - metavariable-regex:
      metavariable: $LD
      regex: (load|load_all)
  message: |
    Avoid using `load()`. `PyYAML.load` can create arbitrary Python objects. A malicious actor could
    exploit this to run arbitrarycode. Use `safe_load()` instead. It is recommended to use
    `SafeLoader`
    when loading yaml.
  metadata:
    cwe: 'CWE-502'
    shortDescription: Deserialization of Untrusted Data
    owasp: A8:2017-Insecure Deserialization
    primary_identifier: bandit.B506
    secondary_identifiers:
    - name: Bandit Test ID B506
      type: bandit_test_id
      value: B506
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B506
    shortlink: https://sg.run/1nb1
    semgrep.dev:
      rule:
        rule_id: WAUZx1
        version_id: 0bTX35
        url: https://semgrep.dev/playground/r/0bTX35/gitlab.bandit.B506
        origin: custom
  severity: ERROR
  languages:
  - python
- id: gitlab.eslint.detect-object-injection
  patterns:
  - pattern: $O[$ARG]
  - pattern-not: $O["..."]
  - pattern-not: '$O[($ARG : float)]'
  - pattern-not-inside: |
      $ARG = [$V];
      ...
      <... $O[$ARG] ...>;
  - pattern-not-inside: |
      $ARG = $V;
      ...
      <... $O[$ARG] ...>;
  - metavariable-regex:
      metavariable: $ARG
      regex: (?![0-9]+)
  message: Bracket object notation with user input is present, this might allow an
    attacker to access all properties of the object and even it's prototype, leading
    to possible code execution.
  languages:
  - javascript
  - typescript
  severity: WARNING
  metadata:
    cwe: 'CWE-94'
    shortDescription: 'Improper Control of Generation of Code (''Code Injection'')'
    primary_identifier: eslint.detect-object-injection
    secondary_identifiers:
    - name: ESLint rule ID security/detect-object-injection
      type: eslint_rule_id
      value: security/detect-object-injection
    license: MIT
    source: https://semgrep.dev/r/gitlab.eslint.detect-object-injection
    shortlink: https://sg.run/8nbQ
    semgrep.dev:
      rule:
        rule_id: NbUAnd
        version_id: rxTqor
        url: https://semgrep.dev/playground/r/rxTqor/gitlab.eslint.detect-object-injection
        origin: custom
- id: gitlab.bandit.B304-10
  pattern: cryptography.hazmat.primitives.ciphers.algorithms.ARC4(...)
  message: |
    Detected RC4 cipher algorithm which is considered insecure. The algorithm has many
    known vulnerabilities. Use AES instead.
  metadata:
    cwe: 'CWE-327'
    shortDescription: Use of a Broken or Risky Cryptographic Algorithm
    owasp: A3:2017-Sensitive Data Exposure
    primary_identifier: bandit.B304-10
    secondary_identifiers:
    - name: Bandit Test ID B304
      type: bandit_test_id
      value: B304
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B304-10
    shortlink: https://sg.run/4PPl
    semgrep.dev:
      rule:
        rule_id: kxU886
        version_id: K3TXq4
        url: https://semgrep.dev/playground/r/K3TXq4/gitlab.bandit.B304-10
        origin: custom
  severity: WARNING
  languages:
  - python
- id: gitlab.bandit.B304-11
  pattern: cryptography.hazmat.primitives.ciphers.algorithms.Blowfish(...)
  message: |
    Detected Blowfish cipher algorithm which is considered insecure. The algorithm has many
    known vulnerabilities. Use AES instead.
  metadata:
    cwe: 'CWE-327'
    shortDescription: Use of a Broken or Risky Cryptographic Algorithm
    owasp: A3:2017-Sensitive Data Exposure
    primary_identifier: bandit.B304-11
    secondary_identifiers:
    - name: Bandit Test ID B304
      type: bandit_test_id
      value: B304
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B304-11
    shortlink: https://sg.run/P88Y
    semgrep.dev:
      rule:
        rule_id: wdUGGA
        version_id: qkTynb
        url: https://semgrep.dev/playground/r/qkTynb/gitlab.bandit.B304-11
        origin: custom
  severity: WARNING
  languages:
  - python
- id: gitlab.bandit.B304-12
  pattern: cryptography.hazmat.primitives.ciphers.algorithms.IDEA(...)
  message: |
    Detected IDEA cipher algorithm which is considered insecure. The algorithm is
    considered weak and has been deprecated. Use AES instead.
  metadata:
    cwe: 'CWE-327'
    shortDescription: Use of a Broken or Risky Cryptographic Algorithm
    owasp: A3:2017-Sensitive Data Exposure
    primary_identifier: bandit.B304-12
    secondary_identifiers:
    - name: Bandit Test ID B304
      type: bandit_test_id
      value: B304
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B304-12
    shortlink: https://sg.run/Jjjw
    semgrep.dev:
      rule:
        rule_id: x8U22d
        version_id: l4T0O8
        url: https://semgrep.dev/playground/r/l4T0O8/gitlab.bandit.B304-12
        origin: custom
  severity: WARNING
  languages:
  - python
- id: gitlab.bandit.B305
  pattern: cryptography.hazmat.primitives.ciphers.modes.ECB(...)
  message: |
    Detected ECB cipher mode which is considered insecure. The algorithm can
    potentially leak information about the plaintext. Use CBC mode instead.
  metadata:
    cwe: 'CWE-327'
    shortDescription: Use of a Broken or Risky Cryptographic Algorithm
    owasp: A3:2017-Sensitive Data Exposure
    primary_identifier: bandit.B305
    secondary_identifiers:
    - name: Bandit Test ID B305
      type: bandit_test_id
      value: B305
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B305
    shortlink: https://sg.run/5JJA
    semgrep.dev:
      rule:
        rule_id: OrUDDX
        version_id: YDT70A
        url: https://semgrep.dev/playground/r/YDT70A/gitlab.bandit.B305
        origin: custom
  severity: WARNING
  languages:
  - python
- id: gitlab.bandit.B307
  patterns:
  - pattern: eval(...)
  message: |
    Detected the use of eval(). eval() can be dangerous if used to evaluate
    dynamic content. If this content can be input from outside the program, this
    may be a code injection vulnerability. Ensure evaluated content is not definable
    by external sources. Consider using safer ast.literal_eval.
  metadata:
    cwe: 'CWE-95'
    shortDescription: Improper Neutralization of Directives in Dynamically Evaluated
      Code ('Eval Injection')
    owasp: A1:2017-Injection
    primary_identifier: bandit.B307
    secondary_identifiers:
    - name: Bandit Test ID B307
      type: bandit_test_id
      value: B307
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B307
    shortlink: https://sg.run/J3WP
    semgrep.dev:
      rule:
        rule_id: v8U5kd
        version_id: o5TwEK
        url: https://semgrep.dev/playground/r/o5TwEK/gitlab.bandit.B307
        origin: custom
  severity: WARNING
  languages:
  - python
- id: gitlab.bandit.B309
  patterns:
  - pattern-either:
    - pattern: httplib.HTTPSConnection(...)
    - pattern: http.client.HTTPSConnection(...)
    - pattern: six.moves.http_client.HTTPSConnection(...)
  message: |
    The HTTPSConnection API has changed frequently with minor releases of Python.
    Ensure you are using the API for your version of Python securely.
    For example, Python 3 versions prior to 3.4.3 will not verify SSL certificates by default.
    See https://docs.python.org/3/library/http.client.html#http.client.HTTPSConnection
    for more information.
  metadata:
    cwe: 'CWE-295'
    shortDescription: Improper Certificate Validation
    owasp: A3:2017-Sensitive Data Exposure
    primary_identifier: bandit.B309
    secondary_identifiers:
    - name: Bandit Test ID B309
      type: bandit_test_id
      value: B309
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B309
    shortlink: https://sg.run/GWA6
    semgrep.dev:
      rule:
        rule_id: ZqUqEy
        version_id: pZTYjy
        url: https://semgrep.dev/playground/r/pZTYjy/gitlab.bandit.B309
        origin: custom
  severity: WARNING
  languages:
  - python
- id: gitlab.bandit.B310-1
  patterns:
  - pattern-not: urllib.$W("...")
  - pattern-not: urllib.request.$W("...")
  - pattern-not: $OPENER.$W("...")
  - pattern-either:
    - patterns:
      - pattern-either:
        - pattern: urllib.urlopen(...)
        - pattern: urllib.request.urlopen(...)
        - pattern: urllib.urlretrieve(...)
        - pattern: urllib.request.urlretrieve(...)
    - patterns:
      - pattern-either:
        - pattern-inside: |
            $OPENER = urllib.URLopener(...)
            ...
        - pattern-inside: |
            $OPENER = urllib.request.URLopener(...)
            ...
        - pattern-inside: |
            $OPENER = urllib.FancyURLopener(...)
            ...
        - pattern-inside: |
            $OPENER = urllib.request.FancyURLopener(...)
            ...
      - pattern-either:
        - pattern: $OPENER.open(...)
        - pattern: $OPENER.retrieve(...)
  message: Detected a dynamic value being used with urllib. urllib supports 'file://'
    schemes, so a dynamic value controlled by a malicious actor may allow them to
    read arbitrary files. Audit uses of urllib calls to ensure user data cannot control
    the URLs, or consider using the 'requests' library instead.
  metadata:
    cwe: 'CWE-939'
    shortDescription: Improper Authorization in Handler for Custom URL Scheme
    owasp: A5:2017-Broken Access Control
    primary_identifier: bandit.B310-1
    secondary_identifiers:
    - name: Bandit Test ID B310-1
      type: bandit_test_id
      value: B310-1
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B310-1
    shortlink: https://sg.run/R8zN
    semgrep.dev:
      rule:
        rule_id: nJUYed
        version_id: 2KTjx3
        url: https://semgrep.dev/playground/r/2KTjx3/gitlab.bandit.B310-1
        origin: custom
  severity: WARNING
  languages:
  - python
- id: gitlab.bandit.B310-2
  pattern-either:
  - pattern: urllib2.urlopen(...)
  - pattern: urllib2.Request(...)
  - pattern: urllib.URLopener(...)
  - pattern: urllib.FancyURLopener(...)
  - pattern: urllib.request.FancyURLopener(...)
  - pattern: urllib.request.urlopen(...)
  - pattern: urllib.request.URLopener(...)
  - pattern: six.moves.urllib.request.urlopen(...)
  - pattern: six.moves.urllib.request.urlretrieve(...)
  - pattern: six.moves.urllib.request.URLopener(...)
  - pattern: six.moves.urllib.request.FancyURLopener(...)
  message: Detected a dynamic value being used with urllib. urllib supports 'file://'
    schemes, so a dynamic value controlled by a malicious actor may allow them to
    read arbitrary files. Audit uses of urllib calls to ensure user data cannot control
    the URLs, or consider using the 'requests' library instead.
  metadata:
    cwe: 'CWE-939'
    shortDescription: Improper Authorization in Handler for Custom URL Scheme
    owasp: A5:2017-Broken Access Control
    primary_identifier: bandit.B310-2
    secondary_identifiers:
    - name: Bandit Test ID B310
      type: bandit_test_id
      value: B310
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B310-2
    shortlink: https://sg.run/Al4B
    semgrep.dev:
      rule:
        rule_id: EwU4kb
        version_id: X0TqNz
        url: https://semgrep.dev/playground/r/X0TqNz/gitlab.bandit.B310-2
        origin: custom
  severity: WARNING
  languages:
  - python
- id: gitlab.bandit.B311
  pattern-either:
  - pattern: random.random(...)
  - pattern: random.randrange(...)
  - pattern: random.randint(...)
  - pattern: random.choice(...)
  - pattern: random.uniform(...)
  - pattern: random.triangular(...)
  message: |
    Standard pseudo-random generators are not suitable for security/cryptographic purposes.
  metadata:
    cwe: 'CWE-330'
    shortDescription: Use of Insufficiently Random Values
    owasp: A3:2017-Sensitive Data Exposure
    primary_identifier: bandit.B311
    secondary_identifiers:
    - name: Bandit Test ID B311
      type: bandit_test_id
      value: B311
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B311
    shortlink: https://sg.run/B4PR
    semgrep.dev:
      rule:
        rule_id: 7KUe7J
        version_id: 1QTvLE
        url: https://semgrep.dev/playground/r/1QTvLE/gitlab.bandit.B311
        origin: custom
  severity: INFO
  languages:
  - python
- id: gitlab.bandit.B312
  pattern: telnetlib.$ANYTHING(...)
  message: |
    Telnet does not encrypt communications. Use SSH instead.
  metadata:
    cwe: 'CWE-319'
    shortDescription: Cleartext Transmission of Sensitive Information
    owasp: A3:2017-Sensitive Data Exposure
    primary_identifier: bandit.B312
    secondary_identifiers:
    - name: Bandit Test ID B312
      type: bandit_test_id
      value: B312
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B312
    shortlink: https://sg.run/Gwwp
    semgrep.dev:
      rule:
        rule_id: eqUpp1
        version_id: 9lTw0q
        url: https://semgrep.dev/playground/r/9lTw0q/gitlab.bandit.B312
        origin: custom
  severity: WARNING
  languages:
  - python
- id: gitlab.bandit.B409
  patterns:
  - pattern-either:
    - pattern: import xml.dom.pulldom
  message: |
    Using various methods to parse untrusted XML data is known to be vulnerable to
    XML attacks. Replace vulnerable imports with the equivalent defusedxml package,
    or make sure defusedxml.defuse_stdlib() is called.
  metadata:
    cwe: 'CWE-502'
    shortDescription: Deserialization of Untrusted Data
    owasp: A8:2017-Insecure Deserialization
    primary_identifier: bandit.B409
    secondary_identifiers:
    - name: Bandit Test ID B409
      type: bandit_test_id
      value: B409
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B409
    shortlink: https://sg.run/B0WW
    semgrep.dev:
      rule:
        rule_id: AbUnqq
        version_id: e1TOk2
        url: https://semgrep.dev/playground/r/e1TOk2/gitlab.bandit.B409
        origin: custom
  severity: INFO
  languages:
  - python
- id: gitlab.bandit.B410
  patterns:
  - pattern-either:
    - pattern: import lxml
  message: |
    Using various methods to parse untrusted XML data is known to be vulnerable to
    XML attacks. Replace vulnerable imports with the equivalent defusedxml package.
  metadata:
    cwe: 'CWE-502'
    shortDescription: Deserialization of Untrusted Data
    owasp: A8:2017-Insecure Deserialization
    primary_identifier: bandit.B410
    secondary_identifiers:
    - name: Bandit Test ID B410
      type: bandit_test_id
      value: B410
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B410
    shortlink: https://sg.run/DqKY
    semgrep.dev:
      rule:
        rule_id: BYUGby
        version_id: vdTRzw
        url: https://semgrep.dev/playground/r/vdTRzw/gitlab.bandit.B410
        origin: custom
  severity: INFO
  languages:
  - python
- id: gitlab.bandit.B408
  patterns:
  - pattern-either:
    - pattern: import xml.dom.minidom
  message: |
    Using various methods to parse untrusted XML data is known to be vulnerable
    to XML attacks. Replace vulnerable imports with the equivalent defusedxml
    package, or make sure defusedxml.defuse_stdlib() is called.
  metadata:
    cwe: 'CWE-502'
    shortDescription: Deserialization of Untrusted Data
    owasp: A8:2017-Insecure Deserialization
    primary_identifier: bandit.B408
    secondary_identifiers:
    - name: Bandit Test ID B408
      type: bandit_test_id
      value: B408
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B408
    shortlink: https://sg.run/WKv4
    semgrep.dev:
      rule:
        rule_id: DbUekX
        version_id: d6TWGo
        url: https://semgrep.dev/playground/r/d6TWGo/gitlab.bandit.B408
        origin: custom
  severity: INFO
  languages:
  - python
- id: gitlab.bandit.B317
  pattern-either:
  - pattern: xml.sax.parse(...)
  - patterns:
    - pattern: xml.sax.parseString(...)
    - pattern-not: xml.sax.parseString("...")
  - pattern: xml.sax.make_parser(...)
  message: |
    Insecure XML parsing functionality, prefer `defusedxml`
  metadata:
    cwe: 'CWE-611'
    shortDescription: Improper Restriction of XML External Entity Reference
    owasp: A4:2017-XML External Entities (XXE)
    primary_identifier: bandit.B317
    secondary_identifiers:
    - name: Bandit Test ID B317
      type: bandit_test_id
      value: B317
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B317
    shortlink: https://sg.run/RPPO
    semgrep.dev:
      rule:
        rule_id: v8Ujj8
        version_id: ZRTZPn
        url: https://semgrep.dev/playground/r/ZRTZPn/gitlab.bandit.B317
        origin: custom
  severity: WARNING
  languages:
  - python
- id: gitlab.bandit.B318
  pattern-either:
  - patterns:
    - pattern: xml.dom.minidom.parseString(...)
    - pattern-not: xml.dom.minidom.parseString("...")
  - pattern: xml.dom.minidom.parse(...)
  message: |
    Found use of the native Python XML libraries, which is vulnerable to XML external entity (XXE)
    attacks. The Python documentation recommends the `defusedxml` library instead. Use
    'defusedxml'. See https://github.com/tiran/defusedxml for more information.
  metadata:
    cwe: 'CWE-611'
    shortDescription: Improper Restriction of XML External Entity Reference
    owasp: A4:2017-XML External Entities (XXE)
    primary_identifier: bandit.B318
    secondary_identifiers:
    - name: Bandit Test ID B318
      type: bandit_test_id
      value: B318
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B318
    shortlink: https://sg.run/01Av
    semgrep.dev:
      rule:
        rule_id: WAU68J
        version_id: nWTR4X
        url: https://semgrep.dev/playground/r/nWTR4X/gitlab.bandit.B318
        origin: custom
  severity: WARNING
  languages:
  - python
- id: gitlab.bandit.B319
  pattern-either:
  - patterns:
    - pattern: xml.dom.pulldom.parseString(...)
    - pattern-not: xml.dom.pulldom.parseString("...")
  - pattern: xml.dom.pulldom.parse(...)
  metadata:
    cwe: 'CWE-611'
    shortDescription: Improper Restriction of XML External Entity Reference
    owasp: A4:2017-XML External Entities (XXE)
    primary_identifier: bandit.B319
    secondary_identifiers:
    - name: Bandit Test ID B319
      type: bandit_test_id
      value: B319
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B319
    shortlink: https://sg.run/K2L7
    semgrep.dev:
      rule:
        rule_id: 0oU6o9
        version_id: ExTwDZ
        url: https://semgrep.dev/playground/r/ExTwDZ/gitlab.bandit.B319
        origin: custom
  message: |
    Found use of the native Python XML libraries, which is vulnerable to XML external entity (XXE)
    attacks. The Python documentation recommends the `defusedxml` library instead. Use
    'defusedxml'. See https://github.com/tiran/defusedxml for more information.
  severity: WARNING
  languages:
  - python
- id: gitlab.bandit.B321
  pattern: ftplib.$ANYTHING(...)
  message: |
    FTP does not encrypt communications by default. This can lead to sensitive
    data being exposed. Ensure use of FTP here does not expose sensitive data.
  metadata:
    cwe: 'CWE-319'
    shortDescription: Cleartext Transmission of Sensitive Information
    owasp: A3:2017-Sensitive Data Exposure
    primary_identifier: bandit.B321
    secondary_identifiers:
    - name: Bandit Test ID B321
      type: bandit_test_id
      value: B321
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B321
    shortlink: https://sg.run/Awwp
    semgrep.dev:
      rule:
        rule_id: d8Ully
        version_id: 7ZTy9k
        url: https://semgrep.dev/playground/r/7ZTy9k/gitlab.bandit.B321
        origin: custom
  severity: WARNING
  languages:
  - python
- id: gitlab.bandit.B105
  patterns:
  - pattern-either:
    - pattern: $MASK == "..."
    - pattern: $MASK = "..."
  - metavariable-regex:
      metavariable: $MASK
      regex: '[^\[]*([Pp][Aa][Ss][Ss][Ww][Oo][Rr][Dd]|pass|passwd|pwd|secret|token|secrete)[^\]]*'
  message: |
    Possible hardcoded password
  metadata:
    shortDescription: Use of Hard-coded Password
    cwe: 'CWE-259'
    owasp: A2:2017-Broken Authentication
    primary_identifier: bandit.B105
    secondary_identifiers:
    - name: Bandit Test ID B105
      type: bandit_test_id
      value: B105
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B105
    shortlink: https://sg.run/kL4A
    semgrep.dev:
      rule:
        rule_id: 6JUqKb
        version_id: ZRTZYD
        url: https://semgrep.dev/playground/r/ZRTZYD/gitlab.bandit.B105
        origin: custom
  severity: INFO
  languages:
  - python
- id: gitlab.bandit.B106
  patterns:
  - pattern: $FUNC(..., $PW="...", ...)
  - metavariable-regex:
      metavariable: $PW
      regex: .*([Pp][Aa][Ss][Ss][Ww][Oo][Rr][Dd]|pass|passwd|pwd|secret|token|secrete).*
  message: |
    Possible hardcoded password
  metadata:
    shortDescription: Use of Hard-coded Password
    cwe: 'CWE-259'
    owasp: A2:2017-Broken Authentication
    primary_identifier: bandit.B106
    secondary_identifiers:
    - name: Bandit Test ID B106
      type: bandit_test_id
      value: B106
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B106
    shortlink: https://sg.run/wxqd
    semgrep.dev:
      rule:
        rule_id: oqUzxg
        version_id: nWTRgJ
        url: https://semgrep.dev/playground/r/nWTRgJ/gitlab.bandit.B106
        origin: custom
  severity: INFO
  languages:
  - python
- id: gitlab.bandit.B107
  patterns:
  - pattern: |
      def $FUNC(..., password="...", ...):
        ...
  message: |
    Hardcoded password is used as a default argument to '$FUNC'. This could be dangerous if
    a real password is not supplied.
  metadata:
    cwe: 'CWE-259'
    shortDescription: Use of Hard-coded Password
    owasp: A2:2017-Broken Authentication
    primary_identifier: bandit.B107
    secondary_identifiers:
    - name: Bandit Test ID B107
      type: bandit_test_id
      value: B107
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B107
    shortlink: https://sg.run/xYly
    semgrep.dev:
      rule:
        rule_id: zdUyRj
        version_id: 7ZTy4X
        url: https://semgrep.dev/playground/r/7ZTy4X/gitlab.bandit.B107
        origin: custom
  severity: WARNING
  languages:
  - python
- id: gitlab.bandit.B301-2
  pattern: cPickle.$FUNC(...)
  message: |
    Avoid using `cPickle`, which is known to lead to code execution vulnerabilities.
    When unpickling, the serialized data could be manipulated to run arbitrary code.
    Instead, consider serializing the relevant data as JSON or a similar text-based
    serialization format.
  metadata:
    cwe: 'CWE-502'
    shortDescription: Deserialization of Untrusted Data
    owasp: A8:2017-Insecure Deserialization
    primary_identifier: bandit.B301-2
    secondary_identifiers:
    - name: Bandit Test ID B301
      type: bandit_test_id
      value: B301
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B301-2
    shortlink: https://sg.run/d0gZ
    semgrep.dev:
      rule:
        rule_id: pKUwGl
        version_id: 5PTzgQ
        url: https://semgrep.dev/playground/r/5PTzgQ/gitlab.bandit.B301-2
        origin: custom
  severity: WARNING
  languages:
  - python
- id: gitlab.bandit.B302
  pattern-either:
  - pattern: marshal.dump(...)
  - pattern: marshal.dumps(...)
  - pattern: marshal.load(...)
  - pattern: marshal.loads(...)
  message: |
    The marshal module is not intended to be secure against erroneous or maliciously constructed data.
    Never unmarshal data received from an untrusted or unauthenticated source.
    See more details: https://docs.python.org/3/library/marshal.html?highlight=security
  metadata:
    cwe: 'CWE-502'
    shortDescription: Deserialization of Untrusted Data
    owasp: A8:2017-Insecure Deserialization
    primary_identifier: bandit.B302
    secondary_identifiers:
    - name: Bandit Test ID B302
      type: bandit_test_id
      value: B302
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B302
    shortlink: https://sg.run/ZkeD
    semgrep.dev:
      rule:
        rule_id: 2ZUK4W
        version_id: A8T2oB
        url: https://semgrep.dev/playground/r/A8T2oB/gitlab.bandit.B302
        origin: custom
  severity: WARNING
  languages:
  - python
- id: gitlab.bandit.B303-1
  pattern: hashlib.md5(...)
  message: |
    Detected MD5 hash algorithm which is considered insecure. MD5 is not
    collision resistant and is therefore not suitable as a cryptographic
    signature. Use SHA256 or SHA3 instead.
  metadata:
    cwe: 'CWE-327'
    shortDescription: Use of a Broken or Risky Cryptographic Algorithm
    owasp: A3:2017-Sensitive Data Exposure
    primary_identifier: bandit.B303-1
    secondary_identifiers:
    - name: Bandit Test ID B303
      type: bandit_test_id
      value: B303
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B303-1
    shortlink: https://sg.run/nkkX
    semgrep.dev:
      rule:
        rule_id: X5U77W
        version_id: BjTA36
        url: https://semgrep.dev/playground/r/BjTA36/gitlab.bandit.B303-1
        origin: custom
  severity: WARNING
  languages:
  - python
- id: gitlab.bandit.B303-6
  patterns:
  - pattern-either:
    - pattern: Crypto.Hash.SHA.new(...)
    - pattern: Cryptodome.Hash.SHA.new (...)
  message: |
    Detected SHA1 hash algorithm which is considered insecure. SHA1 is not
    collision resistant and is therefore not suitable as a cryptographic
    signature. Use SHA256 or SHA3 instead.
  metadata:
    cwe: 'CWE-327'
    shortDescription: Use of a Broken or Risky Cryptographic Algorithm
    owasp: A3:2017-Sensitive Data Exposure
    primary_identifier: bandit.B303-6
    secondary_identifiers:
    - name: Bandit Test ID B303
      type: bandit_test_id
      value: B303
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B303-6
    shortlink: https://sg.run/L0KY
    semgrep.dev:
      rule:
        rule_id: bwUOkX
        version_id: qkTy8y
        url: https://semgrep.dev/playground/r/qkTy8y/gitlab.bandit.B303-6
        origin: custom
  severity: WARNING
  languages:
  - python
- id: gitlab.bandit.B304-1
  patterns:
  - pattern-either:
    - pattern: Crypto.Hash.MD2.new(...)
    - pattern: Cryptodome.Hash.MD2.new (...)
  message: |
    Detected MD2 hash algorithm which is considered insecure. This algorithm
    has many known vulnerabilities and has been deprecated. Use SHA256 or SHA3 instead.
  metadata:
    cwe: 'CWE-327'
    shortDescription: Use of a Broken or Risky Cryptographic Algorithm
    owasp: A3:2017-Sensitive Data Exposure
    primary_identifier: bandit.B304-1
    secondary_identifiers:
    - name: Bandit Test ID B304-1
      type: bandit_test_id
      value: B304-1
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B304-1
    shortlink: https://sg.run/8RRy
    semgrep.dev:
      rule:
        rule_id: yyUyyn
        version_id: JdTj9J
        url: https://semgrep.dev/playground/r/JdTj9J/gitlab.bandit.B304-1
        origin: custom
  severity: WARNING
  languages:
  - python
- id: gitlab.bandit.B304-2
  patterns:
  - pattern-either:
    - pattern: Crypto.Hash.MD4.new(...)
    - pattern: Cryptodome.Hash.MD4.new (...)
  message: |
    Detected MD4 hash algorithm which is considered insecure. This algorithm
    has many known vulnerabilities and has been deprecated. Use SHA256 or SHA3 instead.
  metadata:
    cwe: 'CWE-327'
    shortDescription: Use of a Broken or Risky Cryptographic Algorithm
    owasp: A3:2017-Sensitive Data Exposure
    primary_identifier: bandit.B304-2
    secondary_identifiers:
    - name: Bandit Test ID B304
      type: bandit_test_id
      value: B304
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B304-2
    shortlink: https://sg.run/grrJ
    semgrep.dev:
      rule:
        rule_id: r6U99k
        version_id: 5PTzg6
        url: https://semgrep.dev/playground/r/5PTzg6/gitlab.bandit.B304-2
        origin: custom
  severity: WARNING
  languages:
  - python
- id: gitlab.bandit.B304-3
  patterns:
  - pattern-either:
    - pattern: Crypto.Hash.MD5.new(...)
    - pattern: Cryptodome.Hash.MD5.new (...)
  message: |
    Detected MD5 hash algorithm which is considered insecure. MD5 is not
    collision resistant and is therefore not suitable as a cryptographic
    signature. Use SHA256 or SHA3 instead.
  metadata:
    cwe: 'CWE-327'
    shortDescription: Use of a Broken or Risky Cryptographic Algorithm
    owasp: A3:2017-Sensitive Data Exposure
    primary_identifier: bandit.B304-3
    secondary_identifiers:
    - name: Bandit Test ID B304
      type: bandit_test_id
      value: B304
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B304-3
    shortlink: https://sg.run/Q444
    semgrep.dev:
      rule:
        rule_id: bwUNNN
        version_id: GxTRdw
        url: https://semgrep.dev/playground/r/GxTRdw/gitlab.bandit.B304-3
        origin: custom
  severity: WARNING
  languages:
  - python
- id: gitlab.bandit.B304-4
  patterns:
  - pattern-either:
    - pattern: Crypto.Hash.SHA.new(...)
    - pattern: Cryptodome.Hash.SHA.new (...)
  message: |
    Detected SHA1 hash algorithm which is considered insecure. SHA1 is not
    collision resistant and is therefore not suitable as a cryptographic
    signature. Use SHA256 or SHA3 instead.
  metadata:
    cwe: 'CWE-327'
    shortDescription: Use of a Broken or Risky Cryptographic Algorithm
    owasp: A3:2017-Sensitive Data Exposure
    primary_identifier: bandit.B304-4
    secondary_identifiers:
    - name: Bandit Test ID B304
      type: bandit_test_id
      value: B304
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B304-4
    shortlink: https://sg.run/344r
    semgrep.dev:
      rule:
        rule_id: NbUYYN
        version_id: RGTl41
        url: https://semgrep.dev/playground/r/RGTl41/gitlab.bandit.B304-4
        origin: custom
  severity: WARNING
  languages:
  - python
- id: gitlab.bandit.B304-5
  patterns:
  - pattern-either:
    - pattern: Cryptodome.Cipher.ARC2.new(...)
    - pattern: Crypto.Cipher.ARC2.new
  message: |
    Detected RC2 cipher algorithm which is considered insecure. The algorithm has known vulnerabilities and is difficult to use securely. Use AES instead.
  metadata:
    cwe: 'CWE-327'
    shortDescription: Use of a Broken or Risky Cryptographic Algorithm
    owasp: A3:2017-Sensitive Data Exposure
    primary_identifier: bandit.B304-5
    secondary_identifiers:
    - name: Bandit Test ID B304
      type: bandit_test_id
      value: B304
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B304-5
    shortlink: https://sg.run/8nvQ
    semgrep.dev:
      rule:
        rule_id: NbUAOd
        version_id: A8T27j
        url: https://semgrep.dev/playground/r/A8T27j/gitlab.bandit.B304-5
        origin: custom
  severity: WARNING
  languages:
  - python
- id: gitlab.bandit.B304-6
  patterns:
  - pattern-either:
    - pattern: Cryptodome.Cipher.ARC4.new(...)
    - pattern: Crypto.Cipher.ARC4.new(...)
  message: |
    Detected RC4 cipher algorithm which is considered insecure. The algorithm has many
    known vulnerabilities. Use AES instead.
  metadata:
    cwe: 'CWE-327'
    shortDescription: Use of a Broken or Risky Cryptographic Algorithm
    owasp: A3:2017-Sensitive Data Exposure
    primary_identifier: bandit.B304-6
    secondary_identifiers:
    - name: Bandit Test ID B304
      type: bandit_test_id
      value: B304
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B304-6
    shortlink: https://sg.run/gJ75
    semgrep.dev:
      rule:
        rule_id: kxURAL
        version_id: BjTA0X
        url: https://semgrep.dev/playground/r/BjTA0X/gitlab.bandit.B304-6
        origin: custom
  severity: WARNING
  languages:
  - python
- id: gitlab.bandit.B323
  pattern: ssl._create_unverified_context(...)
  message: |
    Unverified SSL context detected. This will permit insecure connections without verifying
    SSL certificates. Use 'ssl.create_default_context()' instead.
  metadata:
    cwe: 'CWE-295'
    shortDescription: Improper Certificate Validation
    owasp: A3:2017-Sensitive Data Exposure
    primary_identifier: bandit.B323
    secondary_identifiers:
    - name: Bandit Test ID B323
      type: bandit_test_id
      value: B323
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B323
    shortlink: https://sg.run/BLLW
    semgrep.dev:
      rule:
        rule_id: ZqUgg2
        version_id: LjT3b8
        url: https://semgrep.dev/playground/r/LjT3b8/gitlab.bandit.B323
        origin: custom
  severity: ERROR
  languages:
  - python
- id: gitlab.bandit.B325
  pattern-either:
  - pattern: os.tempnam(...)
  - pattern: os.tmpnam(...)
  message: The Python 'os' tempnam|tmpnam functions are vulnerable to symlink attacks
  metadata:
    cwe: 'CWE-377'
    shortDescription: Insecure Temporary File
    primary_identifier: bandit.B325
    secondary_identifiers:
    - name: Bandit Test ID B325
      type: bandit_test_id
      value: B325
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B325
    shortlink: https://sg.run/DwwY
    semgrep.dev:
      rule:
        rule_id: nJUrrQ
        version_id: gETD2X
        url: https://semgrep.dev/playground/r/gETD2X/gitlab.bandit.B325
        origin: custom
  severity: WARNING
  languages:
  - python
- id: gitlab.bandit.B402
  patterns:
  - pattern-either:
    - pattern: import ftplib
    - pattern: from ftplib import FTP
    - pattern: ftplib.FTP(...)
  message: |
    functions are being called. FTP is considered insecure. Use SSH/SFTP/SCP or some other encrypted protocol
  metadata:
    cwe: 'CWE-319'
    shortDescription: Cleartext Transmission of Sensitive Information
    owasp: A3:2017-Sensitive Data Exposure
    primary_identifier: bandit.B402
    secondary_identifiers:
    - name: Bandit Test ID B402
      type: bandit_test_id
      value: B402
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B402
    shortlink: https://sg.run/KW0n
    semgrep.dev:
      rule:
        rule_id: QrU6yY
        version_id: 3ZT1A1
        url: https://semgrep.dev/playground/r/3ZT1A1/gitlab.bandit.B402
        origin: custom
  severity: ERROR
  languages:
  - python
- id: gitlab.bandit.B403
  patterns:
  - pattern-either:
    - pattern: import pickle
    - pattern: import cPickle
    - pattern: import dill
  message: |
    Consider possible security implications associated with pickle module.
  metadata:
    cwe: 'CWE-502'
    shortDescription: Deserialization of Untrusted Data
    owasp: A8:2017-Insecure Deserialization
    primary_identifier: bandit.B403
    secondary_identifiers:
    - name: Bandit Test ID B403
      type: bandit_test_id
      value: B403
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B403
    shortlink: https://sg.run/qrAO
    semgrep.dev:
      rule:
        rule_id: 3qUBJZ
        version_id: 44TdPO
        url: https://semgrep.dev/playground/r/44TdPO/gitlab.bandit.B403
        origin: custom
  severity: INFO
  languages:
  - python
- id: gitlab.bandit.B413
  pattern-either:
  - pattern: import pycryto
  - pattern: import Crypto.Cipher
  - pattern: import Crypto.Hash
  - pattern: import Crypto.IO
  - pattern: import Crypto.Protocol
  - pattern: import Crypto.PublicKey
  - pattern: import Crypto.Random
  - pattern: import Crypto.Signature
  - pattern: import Crypto.Util
  message: |
    Consider possible security implications associated with pycrypto module.
  metadata:
    cwe: 'CWE-327'
    shortDescription: Use of a Broken or Risky Cryptographic Algorithm
    owasp: A3:2017-Sensitive Data Exposure
    primary_identifier: bandit.B413
    secondary_identifiers:
    - name: Bandit Test ID B413
      type: bandit_test_id
      value: B413
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B413
    shortlink: https://sg.run/okGX
    semgrep.dev:
      rule:
        rule_id: 5rU45b
        version_id: GxTREw
        url: https://semgrep.dev/playground/r/GxTREw/gitlab.bandit.B413
        origin: custom
  severity: ERROR
  languages:
  - python
- id: gitlab.bandit.B502
  patterns:
  - pattern-either:
    - pattern: ssl.PROTOCOL_SSLv2
    - pattern: ssl.PROTOCOL_SSLv3
    - pattern: ssl.PROTOCOL_TLSv1
    - pattern: ssl.PROTOCOL_TLSv1_1
    - pattern: pyOpenSSL.SSL.SSLv2_METHOD
    - pattern: pyOpenSSL.SSL.SSLv23_METHOD
    - pattern: pyOpenSSL.SSL.SSLv3_METHOD
    - pattern: pyOpenSSL.SSL.TLSv1_METHOD
    - pattern: pyOpenSSL.SSL.TLSv1_1_METHOD
  message: |
    An insecure SSL version was detected. TLS versions 1.0, 1.1, and all SSL versions
    are considered weak encryption and are deprecated.
    Use 'ssl.PROTOCOL_TLSv1_2' or higher.
  metadata:
    cwe: 'CWE-326'
    shortDescription: Inadequate Encryption Strength
    owasp: A3:2017-Sensitive Data Exposure
    primary_identifier: bandit.B502
    secondary_identifiers:
    - name: Bandit Test ID B502
      type: bandit_test_id
      value: B502
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B502
    shortlink: https://sg.run/4g0g
    semgrep.dev:
      rule:
        rule_id: KxUOoO
        version_id: A8T2lj
        url: https://semgrep.dev/playground/r/A8T2lj/gitlab.bandit.B502
        origin: custom
  severity: WARNING
  languages:
  - python
- id: gitlab.bandit.B505-1
  patterns:
  - pattern-either:
    - pattern: cryptography.hazmat.primitives.asymmetric.rsa.generate_private_key(...,
        key_size=$SIZE, ...)
    - pattern: cryptography.hazmat.primitives.asymmetric.rsa.generate_private_key($EXP,
        $SIZE, ...)
    - pattern: cryptography.hazmat.primitives.asymmetric.rsa.generate_private_key($SIZE,
        ...)
    - pattern: cryptography.hazmat.primitives.asymmetric.dsa.generate_private_key(...,
        key_size=$SIZE, ...)
    - pattern: cryptography.hazmat.primitives.asymmetric.dsa.generate_private_key($EXP,
        $SIZE, ...)
    - pattern: cryptography.hazmat.primitives.asymmetric.dsa.generate_private_key($SIZE,
        ...)
    - pattern: Crypto.PublicKey.RSA.generate($SIZE, ...)
    - pattern: Crypto.PublicKey.DSA.generate($SIZE, ...)
    - pattern: Cryptodome.PublicKey.DSA.generate($SIZE, ...)
    - pattern: Cryptodome.PublicKey.RSA.generate($SIZE, ...)
    - pattern: Crypto.PublicKey.DSA.generate(bits=$SIZE, ...)
    - pattern: Cryptodome.PublicKey.DSA.generate(bits=$SIZE, ...)
    - pattern: pycrypto_rsa.generate(bits=$SIZE, ...)
    - pattern: pycrypto_dsa.generate(bits=$SIZE, ...)
    - pattern: pycryptodomex_rsa.generate(bits=$SIZE, ...)
    - pattern: pycryptodomex_rsa.generate($SIZE, ...)
    - pattern: pycryptodomex_dsa.generate(bits=$SIZE, ...)
    - pattern: pycryptodomex_dsa.generate($SIZE, ...)
  - metavariable-comparison:
      metavariable: $SIZE
      comparison: $SIZE < 2048
  message: |
    Detected an insufficient key size for DSA. NIST recommends
    a key size of 2048 or higher.
  metadata:
    cwe: 'CWE-326'
    shortDescription: Inadequate Encryption Strength
    owasp: A3:2017-Sensitive Data Exposure
    primary_identifier: bandit.B505-1
    secondary_identifiers:
    - name: Bandit Test ID B505-1
      type: bandit_test_id
      value: B505-1
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B505-1
    shortlink: https://sg.run/XL9j
    semgrep.dev:
      rule:
        rule_id: BYUBYZ
        version_id: DkTjyq
        url: https://semgrep.dev/playground/r/DkTjyq/gitlab.bandit.B505-1
        origin: custom
  severity: WARNING
  languages:
  - python
- id: gitlab.bandit.B505-2
  patterns:
  - pattern-inside: cryptography.hazmat.primitives.asymmetric.ec.generate_private_key(...)
  message: |
    Detected an insufficient curve size for EC. NIST recommends
    a key size of 224 or higher. For example, use 'ec.SECP256R1'.
  metadata:
    cwe: 'CWE-326'
    shortDescription: Inadequate Encryption Strength
    owasp: A3:2017-Sensitive Data Exposure
    primary_identifier: bandit.B505-2
    secondary_identifiers:
    - name: Bandit Test ID B505
      type: bandit_test_id
      value: B505
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B505-2
    shortlink: https://sg.run/jNgP
    semgrep.dev:
      rule:
        rule_id: DbUW8j
        version_id: WrTwnl
        url: https://semgrep.dev/playground/r/WrTwnl/gitlab.bandit.B505-2
        origin: custom
  severity: WARNING
  languages:
  - python
- id: gitlab.bandit.B507
  patterns:
  - pattern-inside: |
      $CLIENT = paramiko.client.SSHClient(...)
      ...
      $CLIENT.set_missing_host_key_policy(...)
  - pattern-either:
    - pattern: paramiko.client.AutoAddPolicy
    - pattern: paramiko.client.WarningPolicy
  message: |
    Detected a paramiko host key policy that implicitly trusts a server's
    host key. Host keys should be verified to ensure the connection
    is not to a malicious server. Use RejectPolicy or a custom subclass
    instead.
  metadata:
    cwe: 'CWE-322'
    shortDescription: Key Exchange without Entity Authentication
    owasp: A5:2017-Broken Access Control
    primary_identifier: bandit.B507
    secondary_identifiers:
    - name: Bandit Test ID B507
      type: bandit_test_id
      value: B507
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B507
    shortlink: https://sg.run/WOO4
    semgrep.dev:
      rule:
        rule_id: EwUQQv
        version_id: K3TXL4
        url: https://semgrep.dev/playground/r/K3TXL4/gitlab.bandit.B507
        origin: custom
  severity: WARNING
  languages:
  - python
- id: gitlab.bandit.B601
  patterns:
  - pattern-inside: |
      import paramiko
      ...
  - pattern: $CLIENT.exec_command(...)
  message: |
    Unverified SSL context detected. This will permit insecure connections without verifying
    SSL certificates. Use 'ssl.create_default_context()' instead.
  metadata:
    cwe: 'CWE-78'
    shortDescription: Improper Neutralization of Special Elements used in an OS Command
      ('OS Command Injection')
    owasp: A1:2017-Injection
    primary_identifier: bandit.B601
    secondary_identifiers:
    - name: Bandit Test ID B601
      type: bandit_test_id
      value: B601
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B601
    shortlink: https://sg.run/9qdy
    semgrep.dev:
      rule:
        rule_id: 0oUEOA
        version_id: qkTywb
        url: https://semgrep.dev/playground/r/qkTywb/gitlab.bandit.B601
        origin: custom
  severity: WARNING
  languages:
  - python
- id: gitlab.bandit.B602
  patterns:
  - pattern-not: subprocess.$FUNC(..., shell=False, ...)
  - pattern-not: subprocess.$FUNC(..., shell=False)
  - pattern-not: subprocess.$FUNC(..., shell=0)
  - pattern-not: subprocess.$FUNC(..., shell=[])
  - pattern-not: subprocess.$FUNC(..., shell={})
  - pattern-not: subprocess.$FUNC(..., shell=None)
  - pattern-either:
    - pattern: subprocess.$FUNC(..., shell=True, ...)
    - pattern: subprocess.$FUNC(..., shell='True', ...)
    - pattern: subprocess.$FUNC(..., shell='False', ...)
    - pattern: subprocess.$FUNC(..., shell='None', ...)
    - pattern: subprocess.$FUNC(..., shell=$X, ...)
  message: |
    Found 'subprocess' function '$FUNC' with 'shell=True'. This is dangerous because this call will spawn
    the command using a shell process. Doing so propagates current shell settings and variables, which
    makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead.
  metadata:
    cwe: 'CWE-78'
    shortDescription: Improper Neutralization of Special Elements used in an OS Command
      ('OS Command Injection')
    owasp: A1:2017-Injection
    primary_identifier: bandit.B602
    secondary_identifiers:
    - name: Bandit Test ID B602
      type: bandit_test_id
      value: B602
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B602
    shortlink: https://sg.run/yzYA
    semgrep.dev:
      rule:
        rule_id: KxU4yp
        version_id: l4T0D8
        url: https://semgrep.dev/playground/r/l4T0D8/gitlab.bandit.B602
        origin: custom
  severity: ERROR
  languages:
  - python
- id: gitlab.bandit.B603
  patterns:
  - pattern-not: subprocess.$FUNC($ARG, shell=<... True ...>)
  - pattern-not: subprocess.$FUNC($ARG, shell=<... 'True' ...>)
  - pattern-not: subprocess.$FUNC($ARG, shell=<... "True" ...>)
  - pattern-either:
    - pattern: |
        subprocess.$FUNC($ARG, shell=False)
    - pattern: |
        subprocess.$FUNC($ARG, shell=0)
    - pattern: |
        subprocess.$FUNC($ARG, shell={...})
    - pattern: |
        subprocess.$FUNC($ARG, shell=[...])
    - pattern: |
        subprocess.$FUNC($ARG)
  message: |
    Python possesses many mechanisms to invoke an external executable. However,
    doing so may present a security issue if appropriate care is not taken to
    sanitize any user provided or variable input. This plugin test is part of a
    family of tests built to check for process spawning and warn appropriately.
    Specifically, this test looks for the spawning of a subprocess without the
    use of a command shell. This type of subprocess invocation is not
    vulnerable to shell injection attacks, but care should still be taken to
    ensure validity of input.
  metadata:
    cwe: 'CWE-78'
    shortDescription: Improper Neutralization of Special Elements used in an OS Command
      ('OS Command Injection')
    owasp: A1:2017-Injection
    primary_identifier: bandit.B603
    secondary_identifiers:
    - name: Bandit Test ID B603
      type: bandit_test_id
      value: B603
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B603
    shortlink: https://sg.run/rABJ
    semgrep.dev:
      rule:
        rule_id: qNUoqN
        version_id: YDT7bA
        url: https://semgrep.dev/playground/r/YDT7bA/gitlab.bandit.B603
        origin: custom
  severity: WARNING
  languages:
  - python
- id: gitlab.bandit.B604
  patterns:
  - pattern-not: subprocess.$FUNC(..., shell=True, ...)
  - pattern: $FOO(..., shell=True, ...)
  message: |
    subprocess call - check for execution of untrusted input
  metadata:
    cwe: 'CWE-78'
    shortDescription: Improper Neutralization of Special Elements used in an OS Command
      ('OS Command Injection')
    owasp: A1:2017-Injection
    primary_identifier: bandit.B604
    secondary_identifiers:
    - name: Bandit Test ID B604
      type: bandit_test_id
      value: B604
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B604
    shortlink: https://sg.run/bDvv
    semgrep.dev:
      rule:
        rule_id: lBUdPP
        version_id: 6xToXD
        url: https://semgrep.dev/playground/r/6xToXD/gitlab.bandit.B604
        origin: custom
  severity: INFO
  languages:
  - python
- id: gitlab.bandit.B605
  patterns:
  - pattern-either:
    - pattern: os.system(...)
    - pattern: os.popen(...)
    - pattern: os.popen2(...)
    - pattern: os.popen3(...)
    - pattern: os.popen4(...)
    - pattern: popen2.popen2(...)
    - pattern: popen2.popen3(...)
    - pattern: popen2.popen4(...)
    - pattern: popen2.Popen3(...)
    - pattern: popen2.Popen4(...)
    - pattern: commands.getoutput(...)
    - pattern: commands.getstatusoutput("")
  message: |
    Starting a process with a shell: Seems safe, but may be changed in the
    future, consider rewriting without shell
  metadata:
    cwe: 'CWE-78'
    shortDescription: Improper Neutralization of Special Elements used in an OS Command
      ('OS Command Injection')
    owasp: A1:2017-Injection
    primary_identifier: bandit.B605
    secondary_identifiers:
    - name: Bandit Test ID B605
      type: bandit_test_id
      value: B605
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B605
    shortlink: https://sg.run/NrlN
    semgrep.dev:
      rule:
        rule_id: YGUrPX
        version_id: o5Tw1K
        url: https://semgrep.dev/playground/r/o5Tw1K/gitlab.bandit.B605
        origin: custom
  severity: INFO
  languages:
  - python
- id: gitlab.bandit.B606
  patterns:
  - pattern-either:
    - patterns:
      - pattern-not: os.$W("...", ...)
      - pattern-either:
        - pattern: os.execl(...)
        - pattern: os.execle(...)
        - pattern: os.execlp(...)
        - pattern: os.execlpe(...)
        - pattern: os.execv(...)
        - pattern: os.execve(...)
        - pattern: os.execvp(...)
        - pattern: os.execvpe(...)
        - pattern: os.startfile(...)
    - patterns:
      - pattern-not: os.$W($MODE, "...", ...)
      - pattern-either:
        - pattern: os.spawnl(...)
        - pattern: os.spawnle(...)
        - pattern: os.spawnlp(...)
        - pattern: os.spawnlpe(...)
        - pattern: os.spawnv(...)
        - pattern: os.spawnve(...)
        - pattern: os.spawnvp(...)
        - pattern: os.spawnvpe(...)
  message: |
    Found dynamic content when spawning a process. This is dangerous if external
    data can reach this function call because it allows a malicious actor to
    execute commands. Ensure no external data reaches here.
  metadata:
    cwe: 'CWE-78'
    shortDescription: Improper Neutralization of Special Elements used in an OS Command
      ('OS Command Injection')
    owasp: A1:2017-Injection
    primary_identifier: bandit.B606
    secondary_identifiers:
    - name: Bandit Test ID B606
      type: bandit_test_id
      value: B606
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B606
    shortlink: https://sg.run/kLQA
    semgrep.dev:
      rule:
        rule_id: 6JUqpb
        version_id: zyTZ3l
        url: https://semgrep.dev/playground/r/zyTZ3l/gitlab.bandit.B606
        origin: custom
  severity: WARNING
  languages:
  - python
- id: gitlab.bandit.B607
  pattern-either:
  - pattern: os.system("...", ...)
  - pattern: $OS.popen("...", ...)
  - pattern: $OS.popen2("...", ...)
  - pattern: $OS.popen3("...", ...)
  - pattern: $OS.popen4("...", ...)
  - pattern: commands.getoutput("...", ...)
  - pattern: commands.getstatusoutput("...", ...)
  message: |
    Starting a process with a shell; seems safe, but may be changed in the future, consider
    rewriting without shell
  metadata:
    cwe: 'CWE-78'
    shortDescription: Improper Neutralization of Special Elements used in an OS Command
      ('OS Command Injection')
    owasp: A1:2017-Injection
    primary_identifier: bandit.B607
    secondary_identifiers:
    - name: Bandit Test ID B607
      type: bandit_test_id
      value: B607
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B607
    shortlink: https://sg.run/wx9d
    semgrep.dev:
      rule:
        rule_id: oqUzYg
        version_id: pZTYDy
        url: https://semgrep.dev/playground/r/pZTYDy/gitlab.bandit.B607
        origin: custom
  severity: INFO
  languages:
  - python
- id: gitlab.bandit.B608
  patterns:
  - pattern-either:
    - pattern: $DB.execute("..." % ...)
    - pattern: $DB.execute("...".format(...))
    - pattern: $DB.execute(f"...")
    - pattern: $DB.execute("..." + $V + "...")
    - patterns:
      - pattern-either:
        - pattern-inside: |
            $SQL = "..." % ...
            ...
        - pattern-inside: |
            $SQL = "...".format(...)
            ...
        - pattern-inside: |
            $SQL = f"...{$X}..."
            ...
      - pattern: $DB.execute($SQL)
  message: |
    Detected possible formatted SQL query. Use parameterized queries instead.
  metadata:
    cwe: 'CWE-89'
    shortDescription: Improper Neutralization of Special Elements used in an SQL Command
      ('SQL Injection')
    owasp: A1:2017-Injection
    primary_identifier: bandit.B608
    secondary_identifiers:
    - name: Bandit Test ID B608
      type: bandit_test_id
      value: B608
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B608
    shortlink: https://sg.run/xYry
    semgrep.dev:
      rule:
        rule_id: zdUyPj
        version_id: jQT2jB
        url: https://semgrep.dev/playground/r/jQT2jB/gitlab.bandit.B608
        origin: custom
  severity: WARNING
  languages:
  - python
- id: gitlab.bandit.B304-7
  patterns:
  - pattern-either:
    - pattern: Cryptodome.Cipher.Blowfish.new(...)
    - pattern: Crypto.Cipher.Blowfish.new(...)
  message: |
    Detected Blowfish cipher algorithm which is considered insecure. The algorithm has many
    known vulnerabilities. Use AES instead.
  metadata:
    cwe: 'CWE-327'
    shortDescription: Use of a Broken or Risky Cryptographic Algorithm
    owasp: A3:2017-Sensitive Data Exposure
    primary_identifier: bandit.B304-7
    secondary_identifiers:
    - name: Bandit Test ID B304
      type: bandit_test_id
      value: B304
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B304-7
    shortlink: https://sg.run/Q8oq
    semgrep.dev:
      rule:
        rule_id: wdU82R
        version_id: DkTj0q
        url: https://semgrep.dev/playground/r/DkTj0q/gitlab.bandit.B304-7
        origin: custom
  severity: WARNING
  languages:
  - python
- id: gitlab.bandit.B304-8
  patterns:
  - pattern-either:
    - pattern: Cryptodome.Cipher.DES.new(...)
    - pattern: Crypto.Cipher.DES.new(...)
  message: |
    Detected DES cipher algorithm which is considered insecure. The algorithm is
    considered weak and has been deprecated. Use AES instead.
  metadata:
    cwe: 'CWE-327'
    shortDescription: Use of a Broken or Risky Cryptographic Algorithm
    owasp: A3:2017-Sensitive Data Exposure
    primary_identifier: bandit.B304-8
    secondary_identifiers:
    - name: Bandit Test ID B304
      type: bandit_test_id
      value: B304
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B304-8
    shortlink: https://sg.run/3AkW
    semgrep.dev:
      rule:
        rule_id: x8UWB8
        version_id: WrTwpl
        url: https://semgrep.dev/playground/r/WrTwpl/gitlab.bandit.B304-8
        origin: custom
  severity: WARNING
  languages:
  - python
- id: gitlab.bandit.B304-9
  patterns:
  - pattern-either:
    - pattern: Cryptodome.Cipher.XOR.new(...)
    - pattern: Crypto.Cipher.XOR.new(...)
  message: |
    Detected XOR cipher algorithm which is considered insecure. This algorithm
    is not cryptographically secure and can be reversed easily. Use AES instead.
  metadata:
    cwe: 'CWE-327'
    shortDescription: Use of a Broken or Risky Cryptographic Algorithm
    owasp: A3:2017-Sensitive Data Exposure
    primary_identifier: bandit.B304-9
    secondary_identifiers:
    - name: Bandit Test ID B304
      type: bandit_test_id
      value: B304
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B304-9
    shortlink: https://sg.run/4yw9
    semgrep.dev:
      rule:
        rule_id: OrUG0Q
        version_id: 0bTXb5
        url: https://semgrep.dev/playground/r/0bTXb5/gitlab.bandit.B304-9
        origin: custom
  severity: WARNING
  languages:
  - python
- id: gitlab.find_sec_bugs.PERMISSIVE_CORS-1
  patterns:
  - pattern-either:
    - pattern: (HttpServletResponse $RES).setHeader("$HEADER", "$VAL")
    - pattern: (HttpServletResponse $RES).addHeader("$HEADER", "$VAL")
  - metavariable-regex:
      metavariable: $HEADER
      regex: (?i)(Access-Control-Allow-Origin)
  - metavariable-regex:
      metavariable: $VAL
      regex: (\*|null)
  message: |
    Prior to HTML5, Web browsers enforced the Same Origin Policy which ensures that in order for
    JavaScript to access the contents of a Web page, both the JavaScript and the Web page must
    originate from the same domain. Without the Same Origin Policy, a malicious website could serve
    up JavaScript that loads sensitive information from other websites using a client's
    credentials, cull through it, and communicate it back to the attacker. HTML5 makes it possible
    for JavaScript to access data across domains if a new HTTP header called
    Access-Control-Allow-Origin is defined. With this header, a Web server defines which other
    domains are allowed to access its domain using cross-origin requests. However, caution should
    be taken when defining the header because an overly permissive CORS policy will allow a
    malicious application to communicate with the victim application in an inappropriate way,
    leading to spoofing, data theft, relay and other attacks.
  languages:
  - java
  severity: ERROR
  metadata:
    cwe: 'CWE-942'
    shortDescription: 'Permissive Cross-domain Policy with Untrusted Domains'
    category: security
    technology:
    - java
    primary_identifier: find_sec_bugs.PERMISSIVE_CORS-1
    secondary_identifiers:
    - name: Find Security Bugs-PERMISSIVE_CORS
      type: find_sec_bugs_type
      value: PERMISSIVE_CORS
    license: MIT
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.PERMISSIVE_CORS-1
    shortlink: https://sg.run/rNJA
    semgrep.dev:
      rule:
        rule_id: zdUG5y
        version_id: O9TzZd
        url: https://semgrep.dev/playground/r/O9TzZd/gitlab.find_sec_bugs.PERMISSIVE_CORS-1
        origin: custom
- id: gitlab.find_sec_bugs.PERMISSIVE_CORS-2
  mode: taint
  pattern-sources:
  - pattern: (HttpServletRequest $REQ).getParamater(...)
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern: (HttpServletResponse $RES).setHeader("$HEADER", ...)
      - pattern: (HttpServletResponse $RES).addHeader("$HEADER", ...)
    - metavariable-regex:
        metavariable: $HEADER
        regex: (?i)(Access-Control-Allow-Origin)
  message: |
    Prior to HTML5, Web browsers enforced the Same Origin Policy which ensures that in order for
    JavaScript to access the contents of a Web page, both the JavaScript and the Web page must
    originate from the same domain. Without the Same Origin Policy, a malicious website could serve
    up JavaScript that loads sensitive information from other websites using a client's
    credentials, cull through it, and communicate it back to the attacker. HTML5 makes it possible
    for JavaScript to access data across domains if a new HTTP header called
    Access-Control-Allow-Origin is defined. With this header, a Web server defines which other
    domains are allowed to access its domain using cross-origin requests. However, caution should
    be taken when defining the header because an overly permissive CORS policy will allow a
    malicious application to communicate with the victim application in an inappropriate way,
    leading to spoofing, data theft, relay and other attacks.
  languages:
  - java
  severity: ERROR
  metadata:
    cwe: 'CWE-942'
    shortDescription: 'Permissive Cross-domain Policy with Untrusted Domains'
    category: security
    technology:
    - java
    primary_identifier: find_sec_bugs.PERMISSIVE_CORS-2
    secondary_identifiers:
    - name: Find Security Bugs-PERMISSIVE_CORS
      type: find_sec_bugs_type
      value: PERMISSIVE_CORS
    license: MIT
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.PERMISSIVE_CORS-2
    shortlink: https://sg.run/bWNr
    semgrep.dev:
      rule:
        rule_id: pKUbrw
        version_id: e1T5Ay
        url: https://semgrep.dev/playground/r/e1T5Ay/gitlab.find_sec_bugs.PERMISSIVE_CORS-2
        origin: custom
- id: gitlab.find_sec_bugs.BLOWFISH_KEY_SIZE-1
  patterns:
  - pattern-inside: |
      $KEYGEN = javax.crypto.KeyGenerator.getInstance("Blowfish", ...);
      ...
      $KEYGEN.init($KEY_SIZE);
  - metavariable-comparison:
      metavariable: $KEY_SIZE
      comparison: $KEY_SIZE < 128
  message: |
    A small key size makes the ciphertext vulnerable to brute force attacks. At least 128 bits of
    entropy should be used when generating the key if use of Blowfish is required.
  languages:
  - java
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-326'
    shortDescription: 'Inadequate Encryption Strength'
    technology:
    - java
    primary_identifier: find_sec_bugs.BLOWFISH_KEY_SIZE-1
    secondary_identifiers:
    - name: Find Security Bugs-BLOWFISH_KEY_SIZE
      type: find_sec_bugs_type
      value: BLOWFISH_KEY_SIZE
    license: MIT
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.BLOWFISH_KEY_SIZE-1
    shortlink: https://sg.run/NjB1
    semgrep.dev:
      rule:
        rule_id: 2ZUd1P
        version_id: vdTg3X
        url: https://semgrep.dev/playground/r/vdTg3X/gitlab.find_sec_bugs.BLOWFISH_KEY_SIZE-1
        origin: custom
- id: gitlab.find_sec_bugs.DES_USAGE-1
  patterns:
  - pattern-inside: javax.crypto.Cipher.getInstance("$ALG")
  - metavariable-regex:
      metavariable: $ALG
      regex: ^(DES)/.*
  message: |
    DES is considered strong ciphers for modern applications. Currently, NIST recommends the usage
    of AES block ciphers instead of DES.
  languages:
  - java
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-326'
    shortDescription: 'Inadequate Encryption Strength'
    technology:
    - java
    primary_identifier: find_sec_bugs.DES_USAGE-1
    secondary_identifiers:
    - name: Find Security Bugs-DES_USAGE
      type: find_sec_bugs_type
      value: DES_USAGE
    license: MIT
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.DES_USAGE-1
    shortlink: https://sg.run/kDnz
    semgrep.dev:
      rule:
        rule_id: X5UAPg
        version_id: d6T1b8
        url: https://semgrep.dev/playground/r/d6T1b8/gitlab.find_sec_bugs.DES_USAGE-1
        origin: custom
- id: gitlab.find_sec_bugs.TDES_USAGE-1
  patterns:
  - pattern-inside: javax.crypto.Cipher.getInstance("$ALG")
  - metavariable-regex:
      metavariable: $ALG
      regex: ^(DESede)/.*
  message: |
    Triple DES (also known as 3DES or DESede) is considered strong ciphers for modern
    applications. NIST recommends the usage of AES block ciphers instead of 3DES.
  languages:
  - java
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-326'
    shortDescription: 'Inadequate Encryption Strength'
    technology:
    - java
    primary_identifier: find_sec_bugs.TDES_USAGE-1
    secondary_identifiers:
    - name: Find Security Bugs-TDES_USAGE
      type: find_sec_bugs_type
      value: TDES_USAGE
    license: MIT
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.TDES_USAGE-1
    shortlink: https://sg.run/w4BX
    semgrep.dev:
      rule:
        rule_id: j2UwKr
        version_id: ZRTnyx
        url: https://semgrep.dev/playground/r/ZRTnyx/gitlab.find_sec_bugs.TDES_USAGE-1
        origin: custom
- id: gitlab.find_sec_bugs.ECB_MODE-1
  patterns:
  - pattern-inside: javax.crypto.Cipher.getInstance("...")
  - pattern-regex: (AES|DES(ede)?)(/ECB/*)
  message: |
    An authentication cipher mode which provides better confidentiality of the encrypted data
    should be used instead of Electronic Code Book (ECB) mode, which does not provide good
    confidentiality. Specifically, ECB mode produces the same output for the same input each time.
    This allows an attacker to intercept and replay the data.
  languages:
  - java
  severity: ERROR
  metadata:
    category: security
    cwe: 'CWE-326'
    shortDescription: 'Inadequate Encryption Strength'
    technology:
    - java
    primary_identifier: find_sec_bugs.ECB_MODE-1
    secondary_identifiers:
    - name: Find Security Bugs-ECB_MODE
      type: find_sec_bugs_type
      value: ECB_MODE
    license: MIT
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.ECB_MODE-1
    shortlink: https://sg.run/xPDP
    semgrep.dev:
      rule:
        rule_id: 10U4j4
        version_id: nWTjwk
        url: https://semgrep.dev/playground/r/nWTjwk/gitlab.find_sec_bugs.ECB_MODE-1
        origin: custom
- id: gitlab.find_sec_bugs.CIPHER_INTEGRITY-1
  patterns:
  - pattern-inside: javax.crypto.Cipher.getInstance("...")
  - pattern-either:
    - pattern-regex: (/CBC/PKCS5Padding)
    - pattern-regex: (AES|DES(ede)?)(/ECB/*)
  - pattern-not-regex: .*/(CCM|CWC|OCB|EAX|GCM)/.*
  - pattern-not-regex: ^(RSA)/.*
  - pattern-not-regex: ^(ECIES)$
  message: |
    The ciphertext produced is susceptible to alteration by an adversary. This mean that the
    cipher provides no way to detect that the data has been tampered with. If the ciphertext can be
    controlled by an attacker, it could be altered without detection.
  languages:
  - java
  severity: ERROR
  metadata:
    category: security
    cwe: 'CWE-353'
    shortDescription: 'Missing Support for Integrity Check'
    technology:
    - java
    primary_identifier: find_sec_bugs.CIPHER_INTEGRITY-1
    secondary_identifiers:
    - name: Find Security Bugs-CIPHER_INTEGRITY
      type: find_sec_bugs_type
      value: CIPHER_INTEGRITY
    license: MIT
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.CIPHER_INTEGRITY-1
    shortlink: https://sg.run/O4Db
    semgrep.dev:
      rule:
        rule_id: 9AUAzy
        version_id: ExTOYX
        url: https://semgrep.dev/playground/r/ExTOYX/gitlab.find_sec_bugs.CIPHER_INTEGRITY-1
        origin: custom
- id: gitlab.find_sec_bugs.PADDING_ORACLE-1
  patterns:
  - pattern-inside: javax.crypto.Cipher.getInstance("...")
  - pattern-regex: (/CBC/PKCS5Padding)
  - pattern-not-regex: ^(RSA)/.*
  - pattern-not-regex: ^(ECIES)$
  message: |
    This specific mode of CBC with PKCS5Padding is susceptible to padding oracle attacks. An
    adversary could potentially decrypt the message if the system exposed the difference between
    plaintext with invalid padding or valid padding. The distinction between valid and invalid
    padding is usually revealed through distinct error messages being returned for each condition.
  languages:
  - java
  severity: ERROR
  metadata:
    category: security
    cwe: 'CWE-696'
    shortDescription: 'Incorrect Behavior Order'
    technology:
    - java
    primary_identifier: find_sec_bugs.PADDING_ORACLE-1
    secondary_identifiers:
    - name: Find Security Bugs-PADDING_ORACLE
      type: find_sec_bugs_type
      value: PADDING_ORACLE
    license: MIT
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.PADDING_ORACLE-1
    shortlink: https://sg.run/eJ3E
    semgrep.dev:
      rule:
        rule_id: yyUDX2
        version_id: 7ZTdYY
        url: https://semgrep.dev/playground/r/7ZTdYY/gitlab.find_sec_bugs.PADDING_ORACLE-1
        origin: custom
- id: gitlab.find_sec_bugs.CUSTOM_MESSAGE_DIGEST-1
  patterns:
  - pattern: |
      class $CLAZZ extends java.security.MessageDigest {
        ...
      }
  message: |
    Implementing a custom MessageDigest is error-prone. National Institute of Standards and
    Technology(NIST) recommends the use of SHA-224, SHA-256, SHA-384, SHA-512, SHA-512/224, or
    SHA-512/256.
  languages:
  - java
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-327'
    shortDescription: 'Use of a Broken or Risky Cryptographic Algorithm'
    technology:
    - java
    primary_identifier: find_sec_bugs.CUSTOM_MESSAGE_DIGEST-1
    secondary_identifiers:
    - name: Find Security Bugs-CUSTOM_MESSAGE_DIGEST
      type: find_sec_bugs_type
      value: CUSTOM_MESSAGE_DIGEST
    license: MIT
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.CUSTOM_MESSAGE_DIGEST-1
    shortlink: https://sg.run/vpAR
    semgrep.dev:
      rule:
        rule_id: r6Ujx4
        version_id: LjTOpx
        url: https://semgrep.dev/playground/r/LjTOpx/gitlab.find_sec_bugs.CUSTOM_MESSAGE_DIGEST-1
        origin: custom
- id: gitlab.find_sec_bugs.DEFAULT_HTTP_CLIENT-1
  patterns:
  - pattern: new org.apache.http.impl.client.DefaultHttpClient(...);
  message: |
    DefaultHttpClient with default constructor is not compatible with TLS 1.2
  languages:
  - java
  severity: WARNING
  metadata:
    category: security
    technology:
    - java
    primary_identifier: find_sec_bugs.DEFAULT_HTTP_CLIENT-1
    secondary_identifiers:
    - name: Find Security Bugs-DEFAULT_HTTP_CLIENT
      type: find_sec_bugs_type
      value: DEFAULT_HTTP_CLIENT
    license: MIT
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.DEFAULT_HTTP_CLIENT-1
    shortlink: https://sg.run/dPw5
    semgrep.dev:
      rule:
        rule_id: bwULG5
        version_id: 8KTXL0
        url: https://semgrep.dev/playground/r/8KTXL0/gitlab.find_sec_bugs.DEFAULT_HTTP_CLIENT-1
        origin: custom
- id: gitlab.bandit.B609
  patterns:
  - pattern-either:
    - pattern-inside: os.system("...")
    - pattern-inside: os.popen("...")
    - pattern-inside: os.popen2("...")
    - pattern-inside: os.popen3("...")
    - pattern-inside: os.popen4("...")
    - pattern-inside: subprocess.$W(..., shell=True, ...)
  - pattern-regex: (tar|chmod|chown|rsync)(.*?)\*
  message: |
    Detected use of the wildcard character in a system call that spawns a shell.
    This subjects the wildcard to normal shell expansion, which can have unintended consequences
    if there exist any non-standard file names. Consider a file named '-e sh script.sh' -- this
    will execute a script when 'rsync' is called. See
    https://www.defensecode.com/public/DefenseCode_Unix_WildCards_Gone_Wild.txt
    for more information.
  metadata:
    cwe: 'CWE-155'
    shortDescription: Improper Neutralization of Wildcards or Matching Symbols
    owasp: A1:2017-Injection
    primary_identifier: bandit.B609
    secondary_identifiers:
    - name: Bandit Test ID B609
      type: bandit_test_id
      value: B609
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B609
    shortlink: https://sg.run/055v
    semgrep.dev:
      rule:
        rule_id: 7KUppP
        version_id: 1QTvNE
        url: https://semgrep.dev/playground/r/1QTvNE/gitlab.bandit.B609
        origin: custom
  severity: WARNING
  languages:
  - python
- id: gitlab.bandit.B610
  patterns:
  - pattern: $X.objects. ... .extra(..., $K = $V, ...)
  - pattern-not-inside: |
      $V = ['...']
      ...
  - metavariable-pattern:
      metavariable: $V
      patterns:
      - pattern: $V
      - pattern-not: '[..., ''...'', ...]'
      - pattern-not: '{..., ''...'': ''...'', ...}'
      - pattern-not: '"..."'
      - pattern-not: '[..., "..." % "...", ...]'
      - pattern-not: '{..., $L: "..." % "...", ...}'
      - pattern-not: '{..., $L: "...".format("..."), ...}'
      - pattern-not: '[..., "...".format("..."), ...]'
  message: |
    This is a last resort. You should be careful when using `QuerySet.extra` due
    to SQLi.
  metadata:
    cwe: 'CWE-89'
    shortDescription: Improper Neutralization of Special Elements used in an SQL Command
      ('SQL Injection')
    owasp: A1:2017-Injection
    primary_identifier: bandit.B610
    secondary_identifiers:
    - name: Bandit Test ID B610
      type: bandit_test_id
      value: B610
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B610
    shortlink: https://sg.run/O1wk
    semgrep.dev:
      rule:
        rule_id: pKUG96
        version_id: 9lTw7q
        url: https://semgrep.dev/playground/r/9lTw7q/gitlab.bandit.B610
        origin: custom
  severity: ERROR
  languages:
  - python
- id: gitlab.bandit.B611
  patterns:
  - pattern-either:
    - pattern: $MODEL.objects.raw($QUERY, ...)
    - pattern: django.db.models.expressions.RawSQL(...)
  message: You should be very careful whenever you write raw SQL. Consider using Django
    ORM before raw SQL. See https://docs.djangoproject.com/en/3.0/topics/db/sql/#passing-parameters-into-raw
  metadata:
    cwe: 'CWE-89'
    shortDescription: Improper Neutralization of Special Elements used in an SQL Command
      ('SQL Injection')
    owasp: A1:2017-Injection
    primary_identifier: bandit.B611
    secondary_identifiers:
    - name: Bandit Test ID B611
      type: bandit_test_id
      value: B611
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B611
    shortlink: https://sg.run/e4xL
    semgrep.dev:
      rule:
        rule_id: 2ZU4Wb
        version_id: yeTrge
        url: https://semgrep.dev/playground/r/yeTrge/gitlab.bandit.B611
        origin: custom
  severity: ERROR
  languages:
  - python
- id: gitlab.bandit.B702
  pattern: mako.template.Template(...)
  message: |
    Mako templates do not provide a global HTML escaping mechanism.
    This means you must escape all sensitive data in your templates
    using '| u' for URL escaping or '| h' for HTML escaping.
    If you are using Mako to serve web content, consider using
    a system such as Jinja2 which enables global escaping.
  metadata:
    cwe: 'CWE-79'
    shortDescription: Improper Neutralization of Input During Web Page Generation
      ('Cross-site Scripting')
    owasp: A7:2017-Cross-Site Scripting (XSS)
    primary_identifier: bandit.B702
    secondary_identifiers:
    - name: Bandit Test ID B702
      type: bandit_test_id
      value: B702
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B702
    shortlink: https://sg.run/K887
    semgrep.dev:
      rule:
        rule_id: L1Urrl
        version_id: bZTdo4
        url: https://semgrep.dev/playground/r/bZTdo4/gitlab.bandit.B702
        origin: custom
  severity: INFO
  languages:
  - python
- id: gitlab.eslint.detect-no-csrf-before-method-override
  metadata:
    cwe: 'CWE-352'
    shortDescription: 'Cross-Site Request Forgery (CSRF)'
    source-rule-url: https://github.com/nodesecurity/eslint-plugin-security/blob/master/rules/detect-no-csrf-before-method-override.js
    references:
    - https://github.com/nodesecurity/eslint-plugin-security/blob/master/docs/bypass-connect-csrf-protection-by-abusing.md
    primary_identifier: eslint.detect-no-csrf-before-method-override
    secondary_identifiers:
    - name: ESLint rule ID security/detect-no-csrf-before-method-override
      type: eslint_rule_id
      value: security/detect-no-csrf-before-method-override
    license: MIT
    source: https://semgrep.dev/r/gitlab.eslint.detect-no-csrf-before-method-override
    shortlink: https://sg.run/4PPg
    semgrep.dev:
      rule:
        rule_id: 8GUxxL
        version_id: 6xT3ZY
        url: https://semgrep.dev/playground/r/6xT3ZY/gitlab.eslint.detect-no-csrf-before-method-override
        origin: custom
  message: |
    Detected use of express.csrf() middleware before express.methodOverride(). This can
    allow GET requests (which are not checked by csrf) to turn into POST requests later.
  pattern: |
    express.csrf();
    ...
    express.methodOverride();
  severity: WARNING
  languages:
  - javascript
  - typescript
- id: gitlab.eslint.detect-pseudoRandomBytes
  metadata:
    cwe: 'CWE-338'
    shortDescription: 'Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG)'
    source-rule-url: https://github.com/nodesecurity/eslint-plugin-security/blob/master/rules/detect-pseudoRandomBytes.js
    primary_identifier: eslint.detect-pseudoRandomBytes
    secondary_identifiers:
    - name: ESLint rule ID security/detect-pseudoRandomBytes
      type: eslint_rule_id
      value: security/detect-pseudoRandomBytes
    license: MIT
    source: https://semgrep.dev/r/gitlab.eslint.detect-pseudoRandomBytes
    shortlink: https://sg.run/P88N
    semgrep.dev:
      rule:
        rule_id: gxUYYL
        version_id: pZTokr
        url: https://semgrep.dev/playground/r/pZTokr/gitlab.eslint.detect-pseudoRandomBytes
        origin: custom
  message: |
    Detected usage of crypto.pseudoRandomBytes, which does not produce secure random numbers.
  pattern: crypto.pseudoRandomBytes
  severity: WARNING
  languages:
  - javascript
  - typescript
- id: gitlab.find_sec_bugs.HTTPONLY_COOKIE-1
  pattern-either:
  - patterns:
    - pattern: |
        javax.servlet.http.Cookie $C = new Cookie(..., ...);
        ...
        (HttpServletResponse $RESP).addCookie($C);
    - pattern-not-inside: |
        javax.servlet.http.Cookie $C = new Cookie(..., ...);
        ...
        $C.setHttpOnly(true);
        ...
        (HttpServletResponse $RESP).addCookie($C);
  - pattern: (javax.servlet.http.Cookie $C).setHttpOnly(false);
  message: |
    A new cookie is created without the HttpOnly flag set. The HttpOnly flag is a directive to the
    browser to make sure that the cookie can not be red by malicious script. When a user is the
    target of a "Cross-Site Scripting", the attacker would benefit greatly from getting the session
    id for example.
  languages:
  - java
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-1004'
    shortDescription: 'Sensitive Cookie Without ''HttpOnly'' Flag'
    technology:
    - java
    primary_identifier: find_sec_bugs.HTTPONLY_COOKIE-1
    secondary_identifiers:
    - name: Find Security Bugs-HTTPONLY_COOKIE
      type: find_sec_bugs_type
      value: HTTPONLY_COOKIE
    license: MIT
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.HTTPONLY_COOKIE-1
    shortlink: https://sg.run/z5B0
    semgrep.dev:
      rule:
        rule_id: WAUYRb
        version_id: 9lT2nO
        url: https://semgrep.dev/playground/r/9lT2nO/gitlab.find_sec_bugs.HTTPONLY_COOKIE-1
        origin: custom
- id: gitlab.find_sec_bugs.INSECURE_COOKIE-1
  pattern-either:
  - patterns:
    - pattern: |
        javax.servlet.http.Cookie $C = new Cookie(..., ...);
        ...
        (HttpServletResponse $RESP).addCookie($C);
    - pattern-not-inside: |
        javax.servlet.http.Cookie $C = new Cookie(..., ...);
        ...
        $C.setSecure(true);
        ...
        (HttpServletResponse $RESP).addCookie($C);
  - pattern: (javax.servlet.http.Cookie $C).setSecure(false);
  message: |
    "A new cookie is created without the Secure flag set. The Secure flag is a directive to the
    browser to make sure that the cookie is not sent for insecure communication (http://)"
  languages:
  - java
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-539'
    shortDescription: 'Information Exposure Through Persistent Cookies'
    technology:
    - java
    primary_identifier: find_sec_bugs.INSECURE_COOKIE-1
    secondary_identifiers:
    - name: Find Security Bugs-INSECURE_COOKIE
      type: find_sec_bugs_type
      value: INSECURE_COOKIE
    license: MIT
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.INSECURE_COOKIE-1
    shortlink: https://sg.run/pNER
    semgrep.dev:
      rule:
        rule_id: 0oUp4O
        version_id: yeT8dy
        url: https://semgrep.dev/playground/r/yeT8dy/gitlab.find_sec_bugs.INSECURE_COOKIE-1
        origin: custom
- id: gitlab.find_sec_bugs.COOKIE_PERSISTENT-1
  patterns:
  - pattern-inside: |
      (javax.servlet.http.Cookie $C).setMaxAge($AGE);
  - metavariable-comparison:
      metavariable: $AGE
      comparison: $AGE >= 31536000
  message: |
    Storing sensitive data in a persistent cookie for an extended period can lead to a breach of
    confidentiality or account compromise.
  languages:
  - java
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-614'
    shortDescription: 'Sensitive Cookie in HTTPS Session Without ''Secure'' Attribute'
    technology:
    - java
    primary_identifier: find_sec_bugs.COOKIE_PERSISTENT-1
    secondary_identifiers:
    - name: Find Security Bugs-COOKIE_PERSISTENT
      type: find_sec_bugs_type
      value: COOKIE_PERSISTENT
    license: MIT
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.COOKIE_PERSISTENT-1
    shortlink: https://sg.run/2k6Y
    semgrep.dev:
      rule:
        rule_id: KxUwpN
        version_id: rxTq8w
        url: https://semgrep.dev/playground/r/rxTq8w/gitlab.find_sec_bugs.COOKIE_PERSISTENT-1
        origin: custom
- id: gitlab.find_sec_bugs.COOKIE_USAGE-1
  patterns:
  - pattern-inside: |
      $FUNC(..., HttpServletRequest $REQ, ...) {
        ...
      }
  - pattern-either:
    - patterns:
      - pattern-inside: |
          for (Cookie $C : $REQ.getCookies()) {
              ...
          }
      - pattern-either:
        - pattern: $C.getName();
        - pattern: $C.getValue();
        - pattern: $C.getPath();
    - pattern: (Cookie $COOKIE).getName();
    - pattern: (Cookie $COOKIE).getValue();
    - pattern: (Cookie $COOKIE).getPath();
  message: |
    The information stored in a custom cookie should not be sensitive or related to the session.
    In most cases, sensitive data should only be stored in session and referenced by the user's
    session cookie.
  languages:
  - java
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-614'
    shortDescription: 'Sensitive Cookie in HTTPS Session Without ''Secure'' Attribute'
    technology:
    - java
    primary_identifier: find_sec_bugs.COOKIE_USAGE-1
    secondary_identifiers:
    - name: Find Security Bugs-COOKIE_USAGE
      type: find_sec_bugs_type
      value: COOKIE_USAGE
    license: MIT
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.COOKIE_USAGE-1
    shortlink: https://sg.run/XWze
    semgrep.dev:
      rule:
        rule_id: qNUpNY
        version_id: bZTr4z
        url: https://semgrep.dev/playground/r/bZTr4z/gitlab.find_sec_bugs.COOKIE_USAGE-1
        origin: custom
- id: gitlab.find_sec_bugs.HAZELCAST_SYMMETRIC_ENCRYPTION-1
  patterns:
  - pattern: new com.hazelcast.config.SymmetricEncryptionConfig()
  message: |
    The network communications for Hazelcast is configured to use a symmetric cipher (probably DES
    or Blowfish). Those ciphers alone do not provide integrity or secure authentication. The use of
    asymmetric encryption is preferred.
  languages:
  - java
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-326'
    shortDescription: 'Inadequate Encryption Strength'
    technology:
    - java
    primary_identifier: find_sec_bugs.HAZELCAST_SYMMETRIC_ENCRYPTION-1
    secondary_identifiers:
    - name: Find Security Bugs-HAZELCAST_SYMMETRIC_ENCRYPTION
      type: find_sec_bugs_type
      value: HAZELCAST_SYMMETRIC_ENCRYPTION
    license: MIT
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.HAZELCAST_SYMMETRIC_ENCRYPTION-1
    shortlink: https://sg.run/ZP2L
    semgrep.dev:
      rule:
        rule_id: NbUe1Z
        version_id: gETj5v
        url: https://semgrep.dev/playground/r/gETj5v/gitlab.find_sec_bugs.HAZELCAST_SYMMETRIC_ENCRYPTION-1
        origin: custom
- id: gitlab.find_sec_bugs.RSA_KEY_SIZE-1
  patterns:
  - pattern-either:
    - patterns:
      - pattern-inside: |
          $GEN = KeyPairGenerator.getInstance($ALG, ...);
          ...
      - pattern-either:
        - pattern: $VAR.initialize($SIZE, ...);
        - pattern: new java.security.spec.RSAKeyGenParameterSpec($SIZE,...);
      - metavariable-comparison:
          metavariable: $SIZE
          comparison: $SIZE < 2048
      - metavariable-regex:
          metavariable: $ALG
          regex: '"(RSA|DSA)"'
  message: |
    Detected an insufficient key size for DSA. NIST recommends a key size
    of 2048 or higher.
  metadata:
    category: security
    cwe: 'CWE-326'
    shortDescription: 'Inadequate Encryption Strength'
    primary_identifier: find_sec_bugs.RSA_KEY_SIZE-1
    secondary_identifiers:
    - name: Find Security Bugs-RSA_KEY_SIZE
      type: find_sec_bugs_type
      value: RSA_KEY_SIZE
    license: MIT
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.RSA_KEY_SIZE-1
    shortlink: https://sg.run/nwLb
    semgrep.dev:
      rule:
        rule_id: kxUO7W
        version_id: QkTDQ3
        url: https://semgrep.dev/playground/r/QkTDQ3/gitlab.find_sec_bugs.RSA_KEY_SIZE-1
        origin: custom
  severity: WARNING
  languages:
  - java
- id: gitlab.find_sec_bugs.NULL_CIPHER-1
  pattern: new javax.crypto.NullCipher()
  message: |
    The NullCipher implements the Cipher interface by returning ciphertext identical to the
    supplied plaintext. In a few contexts, such as testing, a NullCipher may be appropriate. Avoid
    using the NullCipher. Its accidental use can introduce a significant confidentiality risk.
  languages:
  - java
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-327'
    shortDescription: 'Use of a Broken or Risky Cryptographic Algorithm'
    technology:
    - java
    primary_identifier: find_sec_bugs.NULL_CIPHER-1
    secondary_identifiers:
    - name: Find Security Bugs-NULL_CIPHER
      type: find_sec_bugs_type
      value: NULL_CIPHER
    license: MIT
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.NULL_CIPHER-1
    shortlink: https://sg.run/EzLo
    semgrep.dev:
      rule:
        rule_id: wdUk3N
        version_id: 3ZTnxD
        url: https://semgrep.dev/playground/r/3ZTnxD/gitlab.find_sec_bugs.NULL_CIPHER-1
        origin: custom
- id: gitlab.find_sec_bugs.RSA_NO_PADDING-1
  patterns:
  - pattern: javax.crypto.Cipher.getInstance($ALG,...);
  - metavariable-regex:
      metavariable: $ALG
      regex: .*NoPadding.*
  message: |
    The software uses the RSA algorithm but does not incorporate Optimal Asymmetric
    Encryption Padding (OAEP), which might weaken the encryption.
  metadata:
    cwe: 'CWE-780'
    shortDescription: 'Use of RSA Algorithm without OAEP'
    primary_identifier: find_sec_bugs.RSA_NO_PADDING-1
    secondary_identifiers:
    - name: Find Security Bugs-RSA_NO_PADDING
      type: find_sec_bugs_type
      value: RSA_NO_PADDING
    license: MIT
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.RSA_NO_PADDING-1
    shortlink: https://sg.run/7Qr4
    semgrep.dev:
      rule:
        rule_id: x8Ud4w
        version_id: 44TpYw
        url: https://semgrep.dev/playground/r/44TpYw/gitlab.find_sec_bugs.RSA_NO_PADDING-1
        origin: custom
  severity: WARNING
  languages:
  - java
- id: gitlab.find_sec_bugs.WEAK_MESSAGE_DIGEST_MD5-1.WEAK_MESSAGE_DIGEST_SHA1-1
  patterns:
  - pattern-either:
    - pattern: MessageDigest.getInstance($ALG, ...)
    - pattern: Signature.getInstance($ALG, ...)
  - metavariable-regex:
      metavariable: $ALG
      regex: .*(MD5|MD4|MD2|SHA1|SHA-1).*
  message: |
    DES is considered strong ciphers for modern applications. Currently, NIST recommends the usage
    of AES block ciphers instead of DES.
  languages:
  - java
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-326'
    shortDescription: 'Inadequate Encryption Strength'
    technology:
    - java
    primary_identifier: find_sec_bugs.WEAK_MESSAGE_DIGEST_MD5-1.WEAK_MESSAGE_DIGEST_SHA1-1
    secondary_identifiers:
    - name: Find Security Bugs-WEAK_MESSAGE_DIGEST_MD5
      type: find_sec_bugs_type
      value: WEAK_MESSAGE_DIGEST_MD5
    - name: Find Security Bugs-WEAK_MESSAGE_DIGEST_SHA1
      type: find_sec_bugs_type
      value: WEAK_MESSAGE_DIGEST_SHA1
    license: MIT
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.WEAK_MESSAGE_DIGEST_MD5-1.WEAK_MESSAGE_DIGEST_SHA1-1
    shortlink: https://sg.run/L2R7
    semgrep.dev:
      rule:
        rule_id: OrUvyR
        version_id: PkTvnl
        url: https://semgrep.dev/playground/r/PkTvnl/gitlab.find_sec_bugs.WEAK_MESSAGE_DIGEST_MD5-1.WEAK_MESSAGE_DIGEST_SHA1-1
        origin: custom
- id: gitlab.find_sec_bugs.SSL_CONTEXT-1
  patterns:
  - pattern-either:
    - pattern: new org.apache.http.impl.client.DefaultHttpClient();
    - pattern: javax.net.ssl.SSLContext.getInstance("SSL");
  message: |
    A HostnameVerifier that accept any host are often use because of certificate
    reuse on many hosts. As a consequence, this is vulnerable to Man-in-the-middleattacks
    attacks since the client will trust any certificate.
  metadata:
    category: security
    cwe: 'CWE-295'
    shortDescription: 'Improper Certificate Validation'
    primary_identifier: find_sec_bugs.SSL_CONTEXT-1
    secondary_identifiers:
    - name: Find Security Bugs-SSL_CONTEXT
      type: find_sec_bugs_type
      value: SSL_CONTEXT
    license: MIT
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.SSL_CONTEXT-1
    shortlink: https://sg.run/8k34
    semgrep.dev:
      rule:
        rule_id: eqUZxA
        version_id: JdTbZE
        url: https://semgrep.dev/playground/r/JdTbZE/gitlab.find_sec_bugs.SSL_CONTEXT-1
        origin: custom
  severity: WARNING
  languages:
  - java
- id: gitlab.find_sec_bugs.SERVLET_PARAMETER-1.SERVLET_CONTENT_TYPE-1.SERVLET_SERVER_NAME-1.SERVLET_SESSION_ID-1.SERVLET_QUERY_STRING-1.SERVLET_HEADER-1.SERVLET_HEADER_REFERER-1.SERVLET_HEADER_USER_AGENT-1
  mode: taint
  pattern-sources:
  - pattern-either:
    - pattern: (javax.servlet.http.HttpServletRequest $REQ).getContentType(...)
    - pattern: (javax.servlet.http.HttpServletRequest $REQ).getServerName(...)
    - pattern: (javax.servlet.http.HttpServletRequest $REQ).getRequestedSessionId(...)
    - pattern: (javax.servlet.http.HttpServletRequest $REQ).getParameterValues(...)
    - pattern: (javax.servlet.http.HttpServletRequest $REQ).getParameterMap(...)
    - pattern: (javax.servlet.http.HttpServletRequest $REQ).getParameterNames(...)
    - pattern: (javax.servlet.http.HttpServletRequest $REQ).getParameter(...)
  pattern-sinks:
  - pattern-either:
    - pattern: '"..." + $PAR'
    - pattern: $PAR + "..."
  languages:
  - java
  message: |
    The Servlet can read GET and POST parameters from various methods. The
    value obtained should be considered unsafe."
  metadata:
    category: security
    cwe: 'CWE-20'
    shortDescription: 'Improper Input Validation'
    primary_identifier: find_sec_bugs.SERVLET_PARAMETER-1.SERVLET_CONTENT_TYPE-1.SERVLET_SERVER_NAME-1.SERVLET_SESSION_ID-1.SERVLET_QUERY_STRING-1.SERVLET_HEADER-1.SERVLET_HEADER_REFERER-1.SERVLET_HEADER_USER_AGENT-1
    secondary_identifiers:
    - name: Find Security Bugs-SERVLET_PARAMETER
      type: find_sec_bugs_type
      value: SERVLET_PARAMETER
    - name: Find Security Bugs-SERVLET_CONTENT_TYPE
      type: find_sec_bugs_type
      value: SERVLET_CONTENT_TYPE
    - name: Find Security Bugs-SERVLET_SERVER_NAME
      type: find_sec_bugs_type
      value: SERVLET_SERVER_NAME
    - name: Find Security Bugs-SERVLET_SESSION_ID
      type: find_sec_bugs_type
      value: SERVLET_SESSION_ID
    - name: Find Security Bugs-SERVLET_QUERY_STRING
      type: find_sec_bugs_type
      value: SERVLET_QUERY_STRING
    - name: Find Security Bugs-SERVLET_HEADER
      type: find_sec_bugs_type
      value: SERVLET_HEADER
    - name: Find Security Bugs-SERVLET_HEADER_REFERER
      type: find_sec_bugs_type
      value: SERVLET_HEADER_REFERER
    - name: Find Security Bugs-SERVLET_HEADER_USER_AGENT
      type: find_sec_bugs_type
      value: SERVLET_HEADER_USER_AGENT
    license: MIT
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.SERVLET_PARAMETER-1.SERVLET_CONTENT_TYPE-1.SERVLET_SERVER_NAME-1.SERVLET_SESSION_ID-1.SERVLET_QUERY_STRING-1.SERVLET_HEADER-1.SERVLET_HEADER_REFERER-1.SERVLET_HEADER_USER_AGENT-1
    shortlink: https://sg.run/gGey
    semgrep.dev:
      rule:
        rule_id: v8Uv2D
        version_id: 5PTjYj
        url: https://semgrep.dev/playground/r/5PTjYj/gitlab.find_sec_bugs.SERVLET_PARAMETER-1.SERVLET_CONTENT_TYPE-1.SERVLET_SERVER_NAME-1.SERVLET_SESSION_ID-1.SERVLET_QUERY_STRING-1.SERVLET_HEADER-1.SERVLET_HEADER_REFERER-1.SERVLET_HEADER_USER_AGENT-1
        origin: custom
  severity: WARNING
- id: gitlab.find_sec_bugs.JAXRS_ENDPOINT-1
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-inside: |
        @javax.ws.rs.Path("...")
        $TYPE $FUNC(..., $VAR, ...) {
          ...
        }
    - pattern: $VAR
  pattern-sanitizers:
  - patterns:
    - pattern-inside: |
        $STR.replaceAll("$REPLACE_CHAR", "$REPLACER");
        ...
    - pattern: $STR
    - metavariable-regex:
        metavariable: $REPLACER
        regex: .*^(CRLF).*
    - metavariable-regex:
        metavariable: $REPLACE_CHAR
        regex: (*CRLF)
  - pattern: org.apache.commons.text.StringEscapeUtils.unescapeJava(...);
  pattern-sinks:
  - pattern: return ...;
  message: |
    This method is part of a REST Web Service (JSR311). The security of this web service should be
    analyzed; Authentication, if enforced, should be tested. Access control, if enforced, should be
    tested. The inputs should be tracked for potential vulnerabilities. The communication should
    ideally be over SSL.
  languages:
  - java
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-20'
    shortDescription: 'Improper Input Validation'
    technology:
    - java
    primary_identifier: find_sec_bugs.JAXRS_ENDPOINT-1
    secondary_identifiers:
    - name: Find Security Bugs-JAXRS_ENDPOINT
      type: find_sec_bugs_type
      value: JAXRS_ENDPOINT
    license: MIT
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.JAXRS_ENDPOINT-1
    shortlink: https://sg.run/QJ0x
    semgrep.dev:
      rule:
        rule_id: d8U6DE
        version_id: GxTyWN
        url: https://semgrep.dev/playground/r/GxTyWN/gitlab.find_sec_bugs.JAXRS_ENDPOINT-1
        origin: custom
- id: gitlab.find_sec_bugs.JAXWS_ENDPOINT-1
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-inside: |
        @javax.jws.WebMethod(...)
        $TYPE $FUNC(..., $VAR, ...) {
          ...
        }
    - pattern: $VAR
  pattern-sanitizers:
  - patterns:
    - pattern-inside: |
        $STR.replaceAll("$REPLACE_CHAR", "$REPLACER");
        ...
    - pattern: $STR
    - metavariable-regex:
        metavariable: $REPLACER
        regex: .*^(CRLF).*
    - metavariable-regex:
        metavariable: $REPLACE_CHAR
        regex: (*CRLF)
  - pattern: org.apache.commons.text.StringEscapeUtils.unescapeJava(...);
  pattern-sinks:
  - pattern: return ...;
  message: |
    This method is part of a SOAP Web Service (JSR224). The security of this web service should be
    analyzed; Authentication, if enforced, should be tested. Access control, if enforced, should be
    tested. The inputs should be tracked for potential vulnerabilities. The communication should
    ideally be over SSL.
  languages:
  - java
  severity: INFO
  metadata:
    category: security
    cwe: 'CWE-20'
    shortDescription: 'Improper Input Validation'
    owasp: A5:2017-Broken Access Control
    technology:
    - java
    primary_identifier: find_sec_bugs.JAXWS_ENDPOINT-1
    secondary_identifiers:
    - name: Find Security Bugs-JAXWS_ENDPOINT
      type: find_sec_bugs_type
      value: JAXWS_ENDPOINT
    license: MIT
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.JAXWS_ENDPOINT-1
    shortlink: https://sg.run/3Qjl
    semgrep.dev:
      rule:
        rule_id: ZqUewk
        version_id: 8KTr9G
        url: https://semgrep.dev/playground/r/8KTr9G/gitlab.find_sec_bugs.JAXWS_ENDPOINT-1
        origin: custom
- id: gitlab.find_sec_bugs.UNENCRYPTED_SOCKET-1.UNENCRYPTED_SERVER_SOCKET-1
  patterns:
  - pattern: new java.net.Socket(...)
  languages:
  - java
  message: |
    Beyond using an SSL socket, you need to make sure your use of SSLSocketFactory
    does all the appropriate certificate validation checks to make sure you are not
    subject to man-in-the-middle attacks. Please read the OWASP Transport Layer
    Protection Cheat Sheet for details on how to do this correctly.
  metadata:
    cwe: 'CWE-319'
    shortDescription: 'Cleartext Transmission of Sensitive Information'
    primary_identifier: find_sec_bugs.UNENCRYPTED_SOCKET-1.UNENCRYPTED_SERVER_SOCKET-1
    secondary_identifiers:
    - name: Find Security Bugs-UNENCRYPTED_SOCKET
      type: find_sec_bugs_type
      value: UNENCRYPTED_SOCKET
    - name: Find Security Bugs-UNENCRYPTED_SERVER_SOCKET
      type: find_sec_bugs_type
      value: UNENCRYPTED_SERVER_SOCKET
    license: MIT
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.UNENCRYPTED_SOCKET-1.UNENCRYPTED_SERVER_SOCKET-1
    shortlink: https://sg.run/4k1Z
    semgrep.dev:
      rule:
        rule_id: nJUn7D
        version_id: A8T8nw
        url: https://semgrep.dev/playground/r/A8T8nw/gitlab.find_sec_bugs.UNENCRYPTED_SOCKET-1.UNENCRYPTED_SERVER_SOCKET-1
        origin: custom
  severity: WARNING
- id: gitlab.find_sec_bugs.HTTP_RESPONSE_SPLITTING-1
  mode: taint
  pattern-sources:
  - pattern: (javax.servlet.http.HttpServletRequest $REQ).getParameter(...);
  pattern-sanitizers:
  - patterns:
    - pattern-inside: |
        $STR.replaceAll("$REPLACE_CHAR", "$REPLACER");
        ...
    - pattern: $STR
    - metavariable-regex:
        metavariable: $REPLACER
        regex: .*^(CRLF).*
    - metavariable-regex:
        metavariable: $REPLACE_CHAR
        regex: (*CRLF)
  - pattern: org.apache.commons.text.StringEscapeUtils.unescapeJava(...);
  pattern-sinks:
  - pattern: new javax.servlet.http.Cookie("$KEY", ...);
  - patterns:
    - pattern-inside: |
        $C = new javax.servlet.http.Cookie("$KEY", ...);
        ...
    - pattern: $C.setValue(...);
  message: |
    When an HTTP request contains unexpected CR and LF characters, the server may respond with an
    output stream that is interpreted as two different HTTP responses (instead of one). An attacker
    can control the second response and mount attacks such as cross-site scripting and cache
    poisoning attacks.
  languages:
  - java
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-113'
    shortDescription: 'Improper Neutralization of CRLF Sequences in HTTP Headers (''HTTP
      Response Splitting'')'
    technology:
    - java
    primary_identifier: find_sec_bugs.HTTP_RESPONSE_SPLITTING-1
    secondary_identifiers:
    - name: Find Security Bugs-HTTP_RESPONSE_SPLITTING
      type: find_sec_bugs_type
      value: HTTP_RESPONSE_SPLITTING
    license: MIT
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.HTTP_RESPONSE_SPLITTING-1
    shortlink: https://sg.run/jBZ2
    semgrep.dev:
      rule:
        rule_id: lBUX54
        version_id: NdTLQB
        url: https://semgrep.dev/playground/r/NdTLQB/gitlab.find_sec_bugs.HTTP_RESPONSE_SPLITTING-1
        origin: custom
- id: gitlab.find_sec_bugs.HRS_REQUEST_PARAMETER_TO_COOKIE-1
  mode: taint
  pattern-sources:
  - pattern: (javax.servlet.http.HttpServletRequest $REQ).getParameter(...);
  pattern-sanitizers:
  - patterns:
    - pattern-inside: |
        $STR.replaceAll("$REPLACE_CHAR", "$REPLACER");
        ...
    - pattern: $STR
    - metavariable-regex:
        metavariable: $REPLACER
        regex: .*^(CRLF).*
    - metavariable-regex:
        metavariable: $REPLACE_CHAR
        regex: (*CRLF)
  - pattern: org.apache.commons.text.StringEscapeUtils.unescapeJava(...);
  pattern-sinks:
  - pattern: new javax.servlet.http.Cookie("$KEY", ...);
  - patterns:
    - pattern-inside: |
        $C = new javax.servlet.http.Cookie("$KEY", ...);
        ...
    - pattern: $C.setValue(...);
  message: |
    This code constructs an HTTP Cookie using an untrusted HTTP parameter. If this cookie is added
    to an HTTP response, it will allow a HTTP response splitting vulnerability. See
    http://en.wikipedia.org/wiki/HTTP_response_splitting for more information.
  languages:
  - java
  severity: ERROR
  metadata:
    category: security
    cwe: 'CWE-113'
    shortDescription: 'Improper Neutralization of CRLF Sequences in HTTP Headers (''HTTP
      Response Splitting'')'
    technology:
    - java
    primary_identifier: find_sec_bugs.HRS_REQUEST_PARAMETER_TO_COOKIE-1
    secondary_identifiers:
    - name: Find Security Bugs-HRS_REQUEST_PARAMETER_TO_COOKIE
      type: find_sec_bugs_type
      value: HRS_REQUEST_PARAMETER_TO_COOKIE
    license: MIT
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.HRS_REQUEST_PARAMETER_TO_COOKIE-1
    shortlink: https://sg.run/1k2Q
    semgrep.dev:
      rule:
        rule_id: YGUYoN
        version_id: kbTpZO
        url: https://semgrep.dev/playground/r/kbTpZO/gitlab.find_sec_bugs.HRS_REQUEST_PARAMETER_TO_COOKIE-1
        origin: custom
- id: gitlab.find_sec_bugs.HRS_REQUEST_PARAMETER_TO_HTTP_HEADER-1
  mode: taint
  pattern-sources:
  - pattern: (javax.servlet.http.HttpServletRequest $REQ).getParameter(...);
  pattern-sanitizers:
  - patterns:
    - pattern-inside: |
        $STR.replaceAll("$REPLACE_CHAR", "$REPLACER");
        ...
    - pattern: $STR
    - metavariable-regex:
        metavariable: $REPLACER
        regex: .*^(CRLF).*
    - metavariable-regex:
        metavariable: $REPLACE_CHAR
        regex: (*CRLF)
  - pattern: org.apache.commons.text.StringEscapeUtils.unescapeJava(...);
  pattern-sinks:
  - pattern: (javax.servlet.http.HttpServletResponse $RES).setHeader("$KEY", ...);
  - pattern: (javax.servlet.http.HttpServletResponse $RES).addHeader("$KEY", ...);
  - pattern: (javax.servlet.http.HttpServletResponseWrapper $WRP).setHeader("$KEY",
      ...);
  - pattern: (javax.servlet.http.HttpServletResponseWrapper $WRP).addHeader("$KEY",
      ...);
  message: |
    This code directly writes an HTTP parameter to an HTTP header, which allows for a HTTP
    response splitting vulnerability. See http://en.wikipedia.org/wiki/HTTP_response_splitting for
    more information.
  languages:
  - java
  severity: ERROR
  metadata:
    category: security
    cwe: 'CWE-113'
    shortDescription: 'Improper Neutralization of CRLF Sequences in HTTP Headers (''HTTP
      Response Splitting'')'
    technology:
    - java
    primary_identifier: find_sec_bugs.HRS_REQUEST_PARAMETER_TO_HTTP_HEADER-1
    secondary_identifiers:
    - name: Find Security Bugs-HRS_REQUEST_PARAMETER_TO_HTTP_HEADER
      type: find_sec_bugs_type
      value: HRS_REQUEST_PARAMETER_TO_HTTP_HEADER
    license: MIT
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.HRS_REQUEST_PARAMETER_TO_HTTP_HEADER-1
    shortlink: https://sg.run/93NR
    semgrep.dev:
      rule:
        rule_id: 6JUye5
        version_id: w8Tr0K
        url: https://semgrep.dev/playground/r/w8Tr0K/gitlab.find_sec_bugs.HRS_REQUEST_PARAMETER_TO_HTTP_HEADER-1
        origin: custom
- id: gitlab.find_sec_bugs.TRUST_BOUNDARY_VIOLATION-1
  patterns:
  - pattern-either:
    - patterns:
      - pattern: (HttpServletRequest $H). ... .setAttribute($ARG1, $ARG2);
      - pattern-not: (HttpServletRequest $H). ... .setAttribute("...", "...");
    - patterns:
      - pattern: (HttpServletRequest $H). ... .putValue($ARG1, $ARG2);
      - pattern-not: (HttpServletRequest $H). ... .putValue("...", "...");
  languages:
  - java
  message: |
    A trust boundary can be thought of as line drawn through a program. On one side
    of the line, data is untrusted. On the other side of the line, data is assumed
    to be trustworthy. The purpose of validation logic is to allow data to safely
    cross the trust boundary - to move from untrusted to trusted. A trust boundary
    violation occurs when a program blurs the line between what is trusted and what
    is untrusted. By combining trusted and untrusted data in the same data
    structure, it becomes easier for programmers to mistakenly trust unvalidated
    data.
  metadata:
    category: security
    cwe: 'CWE-501'
    shortDescription: 'Trust Boundary Violation'
    primary_identifier: find_sec_bugs.TRUST_BOUNDARY_VIOLATION-1
    secondary_identifiers:
    - name: Find Security Bugs-TRUST_BOUNDARY_VIOLATION
      type: find_sec_bugs_type
      value: TRUST_BOUNDARY_VIOLATION
    license: MIT
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.TRUST_BOUNDARY_VIOLATION-1
    shortlink: https://sg.run/yJWd
    semgrep.dev:
      rule:
        rule_id: oqUKne
        version_id: xyTO3Z
        url: https://semgrep.dev/playground/r/xyTO3Z/gitlab.find_sec_bugs.TRUST_BOUNDARY_VIOLATION-1
        origin: custom
  severity: WARNING
- id: gitlab.find_sec_bugs.WEAK_HOSTNAME_VERIFIER-1.WEAK_TRUST_MANAGER-1
  patterns:
  - pattern-either:
    - patterns:
      - pattern-inside: |
          class $V implements HostnameVerifier {
            ...
          }
      - pattern-inside: |
          public boolean verify(...) {
            ...
          }
      - pattern: return true;
    - patterns:
      - pattern-inside: |
          class $V implements X509TrustManager {
            ...
          }
      - pattern-either:
        - pattern: public void checkClientTrusted(...) {}
        - pattern: public void checkServerTrusted(...) {}
        - pattern: |
            public X509Certificate[] getAcceptedIssuers() {
              ...
              return null;
            }
  languages:
  - java
  message: |
    A HostnameVerifier that accept any host are often use because of certificate
    reuse on many hosts. As a consequence, this is vulnerable to Man-in-the-middle
    attacks since the client will trust any certificate.
  metadata:
    category: security
    cwe: 'CWE-295'
    shortDescription: 'Improper Certificate Validation'
    primary_identifier: find_sec_bugs.WEAK_HOSTNAME_VERIFIER-1.WEAK_TRUST_MANAGER-1
    secondary_identifiers:
    - name: Find Security Bugs-WEAK_HOSTNAME_VERIFIER
      type: find_sec_bugs_type
      value: WEAK_HOSTNAME_VERIFIER
    - name: Find Security Bugs-WEAK_TRUST_MANAGER
      type: find_sec_bugs_type
      value: WEAK_TRUST_MANAGER
    license: MIT
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.WEAK_HOSTNAME_VERIFIER-1.WEAK_TRUST_MANAGER-1
    shortlink: https://sg.run/Jw5Z
    semgrep.dev:
      rule:
        rule_id: 7KUbOj
        version_id: DkTJe0
        url: https://semgrep.dev/playground/r/DkTJe0/gitlab.find_sec_bugs.WEAK_HOSTNAME_VERIFIER-1.WEAK_TRUST_MANAGER-1
        origin: custom
  severity: WARNING
- id: gitlab.find_sec_bugs.FILE_UPLOAD_FILENAME-1
  patterns:
  - pattern-inside: |
      $FUNC(..., HttpServletRequest $REQ, ... ) {
        ...
        $FILES = (ServletFileUpload $SFU).parseRequest($REQ);
        ...
      }
  - pattern-inside: |
      for(FileItem $ITEM : $FILES) {
        ...
      }
  - pattern: $ITEM.getName()
  message: |
    The filename provided by the FileUpload API can be tampered with by the client to reference
    unauthorized files. The provided filename should be properly validated to ensure it's properly
    structured, contains no unauthorized path characters (e.g., / \), and refers to an authorized
    file.
  languages:
  - java
  severity: ERROR
  metadata:
    category: security
    cwe: 'CWE-22'
    shortDescription: 'Improper Limitation of a Pathname to a Restricted Directory (''Path
      Traversal'')'
    technology:
    - java
    primary_identifier: find_sec_bugs.FILE_UPLOAD_FILENAME-1
    secondary_identifiers:
    - name: Find Security Bugs-FILE_UPLOAD_FILENAME
      type: find_sec_bugs_type
      value: FILE_UPLOAD_FILENAME
    license: MIT
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.FILE_UPLOAD_FILENAME-1
    shortlink: https://sg.run/5Z9l
    semgrep.dev:
      rule:
        rule_id: L1Uz0W
        version_id: WrT96n
        url: https://semgrep.dev/playground/r/WrT96n/gitlab.find_sec_bugs.FILE_UPLOAD_FILENAME-1
        origin: custom
- id: gitlab.find_sec_bugs.WEAK_FILENAMEUTILS-1
  patterns:
  - pattern-inside: |
      import static org.apache.commons.io.FilenameUtils;
      ...
  - pattern-either:
    - pattern: normalize(...)
    - pattern: getExtension(...)
    - pattern: isExtensions(...)
    - pattern: getName(...)
    - pattern: getBaseName(...)
    - pattern: org.apache.commons.io.FilenameUtils.normalize(...)
    - pattern: org.apache.commons.io.FilenameUtils.getExtension(...)
    - pattern: org.apache.commons.io.FilenameUtils.isExtensions(...)
    - pattern: org.apache.commons.io.FilenameUtils.getName(...)
    - pattern: org.apache.commons.io.FilenameUtils.getBaseName(...)
  message: |
    A file is opened to read its content. The filename comes from an input
    parameter. If an unfiltered parameter is passed to this file API, files from an
    arbitrary filesystem location could be read.
  languages:
  - java
  severity: ERROR
  metadata:
    category: security
    cwe: 'CWE-22'
    shortDescription: 'Improper Limitation of a Pathname to a Restricted Directory (''Path
      Traversal'')'
    technology:
    - java
    primary_identifier: find_sec_bugs.WEAK_FILENAMEUTILS-1
    secondary_identifiers:
    - name: Find Security Bugs-WEAK_FILENAMEUTILS
      type: find_sec_bugs_type
      value: WEAK_FILENAMEUTILS
    license: MIT
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.WEAK_FILENAMEUTILS-1
    shortlink: https://sg.run/Gb41
    semgrep.dev:
      rule:
        rule_id: 8GUvb6
        version_id: 0bTB6z
        url: https://semgrep.dev/playground/r/0bTB6z/gitlab.find_sec_bugs.WEAK_FILENAMEUTILS-1
        origin: custom
- id: gitlab.find_sec_bugs.UNVALIDATED_REDIRECT-1.URL_REWRITING-1
  patterns:
  - pattern-either:
    - patterns:
      - pattern: (HttpServletResponse $REQ).sendRedirect(...)
      - pattern-not: (HttpServletResponse $REQ).sendRedirect("...")
    - patterns:
      - pattern: (HttpServletResponse $REQ).addHeader(...)
      - pattern-not: (HttpServletResponse $REQ).addHeader("...", "...")
    - patterns:
      - pattern: (HttpServletResponse $REQ).encodeURL(...)
      - pattern-not: (HttpServletResponse $REQ).encodeURL("...")
    - patterns:
      - pattern: (HttpServletResponse $REQ).encodeRedirectUrl(...)
      - pattern-not: (HttpServletResponse $REQ).encodeRedirectUrl("...")
  languages:
  - java
  message: |
    Unvalidated redirects occur when an application redirects a user to a
    destination URL specified by a user supplied parameter that is not validated.
    Such vulnerabilities can be used to facilitate phishing attacks.
  metadata:
    category: security
    cwe: 'CWE-601'
    shortDescription: 'URL Redirection to Untrusted Site (''Open Redirect'')'
    primary_identifier: find_sec_bugs.UNVALIDATED_REDIRECT-1.URL_REWRITING-1
    secondary_identifiers:
    - name: Find Security Bugs-UNVALIDATED_REDIRECT
      type: find_sec_bugs_type
      value: UNVALIDATED_REDIRECT
    - name: Find Security Bugs-URL_REWRITING
      type: find_sec_bugs_type
      value: URL_REWRITING
    license: MIT
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.UNVALIDATED_REDIRECT-1.URL_REWRITING-1
    shortlink: https://sg.run/PPWE
    semgrep.dev:
      rule:
        rule_id: EwU1nP
        version_id: BjT5G3
        url: https://semgrep.dev/playground/r/BjT5G3/gitlab.find_sec_bugs.UNVALIDATED_REDIRECT-1.URL_REWRITING-1
        origin: custom
  severity: ERROR
- id: gitlab.find_sec_bugs.HARD_CODE_PASSWORD-1
  patterns:
  - pattern-either:
    - pattern-inside: |
        char[] $PWD = ...;
        ...
    - pattern-inside: |
        String $PWD = ...;
        ...
    - pattern-inside: |
        public class $CLAZZ {
        final char[] $PWD = ...;
          ...
        }
    - pattern-inside: |
        public class $CLAZZ {
        final String $PWD = ...;
          ...
        }
    - pattern-inside: |
        $S = new SymmetricEncryptionConfig(...);
        ...
  - pattern-either:
    - pattern: (java.security.KeyStore $KS).load(..., "...")
    - pattern: (java.security.KeyStore $KS).load(..., "...".$FOO(...))
    - pattern: (java.security.KeyStore $KS).load(..., $PWD)
    - pattern: (java.security.KeyStore $KS).load(..., $PWD.$FOO(...))
    - pattern: KeyManagerFactory.getInstance(...).init(..., $PWD);
    - pattern: KeyManagerFactory.getInstance(...).init(..., $PWD.$FOO(...));
    - pattern: KeyManagerFactory.getInstance(...).init(..., "...");
    - pattern: KeyManagerFactory.getInstance(...).init(..., "...".$FOO(...));
    - pattern: (java.security.KeyStore $KS).getInstance(...).load(..., "...")
    - pattern: (java.security.KeyStore $KS).getInstance(...).load(..., "...".$FOO(...))
    - pattern: (java.security.KeyStore $KS).getInstance(...).load(..., $PWD)
    - pattern: (java.security.KeyStore $KS).getInstance(...).load(..., $PWD.$FOO(...))
    - pattern: KeyStore.getInstance(...).load(..., "...");
    - pattern: KeyStore.getInstance(...).load(..., "...".$FOO(...));
    - pattern: KeyStore.getInstance(...).load(..., $PWD);
    - pattern: KeyStore.getInstance(...).load(..., $PWD.$FOO(...));
    - pattern: new PBEKeySpec("...", ...)
    - pattern: new PBEKeySpec("...".$FOO(...), ...)
    - pattern: new PBEKeySpec($PWD, ...)
    - pattern: new PBEKeySpec($PWD.$FOO(...), ...)
    - pattern: new PasswordAuthentication("...", "...")
    - pattern: new PasswordAuthentication("...", "...".$FOO(...))
    - pattern: new PasswordAuthentication("...", $PWD)
    - pattern: new PasswordAuthentication("...", $PWD.$FOO(...))
    - pattern: (PasswordCallback $CB).setPassword("...")
    - pattern: (PasswordCallback $CB).setPassword("...".$FOO(...))
    - pattern: (PasswordCallback $CB).setPassword($PWD)
    - pattern: (PasswordCallback $CB).setPassword($PWD.$FOO(...))
    - pattern: new KeyStore.PasswordProtection("...")
    - pattern: new KeyStore.PasswordProtection("...".$FOO(...))
    - pattern: new KeyStore.PasswordProtection($PWD)
    - pattern: new KeyStore.PasswordProtection($PWD.$FOO(...))
    - pattern: new KerberosKey(...,"...",...);
    - pattern: new KerberosKey(...,"...".$FOO(...),...);
    - pattern: new KerberosKey(...,$PWD,...);
    - pattern: new KerberosKey(...,$PWD.$FOO(...),...);
    - pattern: (javax.net.ssl.KeyManagerFactory $KMF).init(..., $PWD);
    - pattern: (javax.net.ssl.KeyManagerFactory $KMF).init(..., "...");
    - pattern: (javax.net.ssl.KeyManagerFactory $KMF).init(..., "...".$FOO(...));
    - pattern: (javax.net.ssl.KeyManagerFactory $KMF).init(..., $PWD.$FOO(...));
    - pattern: (java.sql.DriverManager).getConnection(..., "...");
    - pattern: (java.sql.DriverManager).getConnection(..., "...".$FOO(...));
    - pattern: (java.sql.DriverManager).getConnection(..., $PWD);
    - pattern: (java.sql.DriverManager).getConnection(..., $PWD.$FOO(...));
    - pattern: (javax.net.ssl.KeyManagerFactory $KMF).init(..., "...");
    - pattern: (javax.net.ssl.KeyManagerFactory $KMF).init(..., "...".$FOO(...));
    - pattern: (javax.net.ssl.KeyManagerFactory $KMF).init(..., $PWD);
    - pattern: (javax.net.ssl.KeyManagerFactory $KMF).init(..., $PWD.$FOO(...));
    - pattern: io.vertx.ext.web.handler.CSRFHandler.create(..., "...");
    - pattern: io.vertx.ext.web.handler.CSRFHandler.create(..., "...".$FOO(...));
    - pattern: io.vertx.ext.web.handler.CSRFHandler.create(..., $PWD);
    - pattern: io.vertx.ext.web.handler.CSRFHandler.create(..., $PWD.$FOO(...));
    - pattern: $S.setPassword($PWD);
    - pattern: $S.setPassword($PWD.$FOO(...));
    - pattern: $S.setPassword("...");
  - metavariable-pattern:
      metavariable: $PWD
      patterns:
      - pattern-regex: (?i).*(pass|pwd|psw|secret|key|cipher|crypt|des|aes|mac|private|sign|cert).*
  message: |
    Passwords should not be kept in the source code. The source code can be widely shared in an
    enterprise environment, and is certainly shared in open source. To be managed safely, passwords
    and secret keys should be stored in separate configuration files or keystores.
  languages:
  - java
  severity: ERROR
  metadata:
    category: security
    cwe: 'CWE-259'
    shortDescription: 'Use of Hard-coded Password'
    technology:
    - java
    primary_identifier: find_sec_bugs.HARD_CODE_PASSWORD-1
    secondary_identifiers:
    - name: Find Security Bugs-HARD_CODE_PASSWORD
      type: find_sec_bugs_type
      value: HARD_CODE_PASSWORD
    license: MIT
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.HARD_CODE_PASSWORD-1
    shortlink: https://sg.run/pNRN
    semgrep.dev:
      rule:
        rule_id: WAUYxY
        version_id: 2KTeAv
        url: https://semgrep.dev/playground/r/2KTeAv/gitlab.find_sec_bugs.HARD_CODE_PASSWORD-1
        origin: custom
- id: gitlab.find_sec_bugs.DANGEROUS_PERMISSION_COMBINATION-1
  pattern-either:
  - pattern: |
      $RUNVAR = new RuntimePermission("createClassLoader");
      ...
      (PermissionCollection $PC).add($RUNVAR);
  - pattern: |
      $REFVAR = new ReflectPermission("suppressAccessChecks");
      ...
      (PermissionCollection $PC).add($REFVAR);
  - pattern: (PermissionCollection $PC).add(new ReflectPermission("suppressAccessChecks"))
  - pattern: (PermissionCollection $PC).add(new RuntimePermission("createClassLoader"))
  languages:
  - java
  message: |
    Do not grant dangerous combinations of permissions.
  metadata:
    category: security
    confidence: HIGH
    primary_identifier: find_sec_bugs.DANGEROUS_PERMISSION_COMBINATION-1
    secondary_identifiers:
    - name: Find Security Bugs-DANGEROUS_PERMISSION_COMBINATION
      type: find_sec_bugs_type
      value: DANGEROUS_PERMISSION_COMBINATION
    license: MIT
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.DANGEROUS_PERMISSION_COMBINATION-1
    shortlink: https://sg.run/2kN5
    semgrep.dev:
      rule:
        rule_id: 0oUpO1
        version_id: X0TEo4
        url: https://semgrep.dev/playground/r/X0TEo4/gitlab.find_sec_bugs.DANGEROUS_PERMISSION_COMBINATION-1
        origin: custom
  severity: WARNING
- id: gitlab.find_sec_bugs.OVERLY_PERMISSIVE_FILE_PERMISSION-1
  patterns:
  - pattern-either:
    - pattern: java.nio.file.Files.setPosixFilePermissions(..., java.nio.file.attribute.PosixFilePermissions.fromString("$PERM_STRING"));
    - pattern: |
        $PERMISSIONS = java.nio.file.attribute.PosixFilePermissions.fromString("$PERM_STRING");
        ...
        java.nio.file.Files.setPosixFilePermissions(..., $PERMISSIONS);
  - metavariable-regex:
      metavariable: $PERM_STRING
      regex: '[rwx-]{6}[rwx]{1,}'
  languages:
  - java
  message: |
    Overly permissive file permission
  metadata:
    cwe: 'CWE-732'
    shortDescription: 'Incorrect Permission Assignment for Critical Resource'
    category: security
    confidence: HIGH
    primary_identifier: find_sec_bugs.OVERLY_PERMISSIVE_FILE_PERMISSION-1
    secondary_identifiers:
    - name: Find Security Bugs-OVERLY_PERMISSIVE_FILE_PERMISSION
      type: find_sec_bugs_type
      value: OVERLY_PERMISSIVE_FILE_PERMISSION
    license: MIT
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.OVERLY_PERMISSIVE_FILE_PERMISSION-1
    shortlink: https://sg.run/XW9A
    semgrep.dev:
      rule:
        rule_id: KxUwyj
        version_id: jQTWL1
        url: https://semgrep.dev/playground/r/jQTWL1/gitlab.find_sec_bugs.OVERLY_PERMISSIVE_FILE_PERMISSION-1
        origin: custom
  severity: WARNING
- id: gitlab.find_sec_bugs.OVERLY_PERMISSIVE_FILE_PERMISSION-2
  patterns:
  - pattern-inside: |
      $PERMS.add($P);
      ...
      java.nio.file.Files.setPosixFilePermissions(..., $PERMS);
  - metavariable-regex:
      metavariable: $P
      regex: (PosixFilePermission.){0,1}(OTHERS_)
  languages:
  - java
  message: |
    Overly permissive file permission
  metadata:
    cwe: 'CWE-732'
    shortDescription: 'Incorrect Permission Assignment for Critical Resource'
    category: security
    confidence: HIGH
    primary_identifier: find_sec_bugs.OVERLY_PERMISSIVE_FILE_PERMISSION-2
    secondary_identifiers:
    - name: Find Security Bugs-OVERLY_PERMISSIVE_FILE_PERMISSION
      type: find_sec_bugs_type
      value: OVERLY_PERMISSIVE_FILE_PERMISSION
    license: MIT
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.OVERLY_PERMISSIVE_FILE_PERMISSION-2
    shortlink: https://sg.run/jBgA
    semgrep.dev:
      rule:
        rule_id: qNUpqB
        version_id: 1QTB03
        url: https://semgrep.dev/playground/r/1QTB03/gitlab.find_sec_bugs.OVERLY_PERMISSIVE_FILE_PERMISSION-2
        origin: custom
  severity: WARNING
- id: gitlab.find_sec_bugs.PREDICTABLE_RANDOM-1
  patterns:
  - pattern-either:
    - pattern: |
        java.util.Random $R = new java.util.Random();
        ...
        $R.$METHOD();
    - pattern: (java.util.Random $R).$METHOD()
    - pattern: new java.util.Random().$METHOD()
    - pattern: org.apache.commons.lang.math.RandomUtils.$METHOD()
    - pattern: org.apache.commons.lang.RandomStringUtils.$METHOD(...)
  - metavariable-regex:
      metavariable: $METHOD
      regex: ^(next|random)
  message: |
    The use of a predictable random value can lead to vulnerabilities when
    used in certain security critical contexts. A quick fix could be to replace
    the use of java.util.Random with something stronger, such as java.security.SecureRandom.
  languages:
  - java
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-330'
    shortDescription: 'Use of Insufficiently Random Values'
    technology:
    - java
    primary_identifier: find_sec_bugs.PREDICTABLE_RANDOM-1
    secondary_identifiers:
    - name: Find Security Bugs-PREDICTABLE_RANDOM
      type: find_sec_bugs_type
      value: PREDICTABLE_RANDOM
    license: MIT
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.PREDICTABLE_RANDOM-1
    shortlink: https://sg.run/1kbD
    semgrep.dev:
      rule:
        rule_id: lBUXPJ
        version_id: 9lT2E6
        url: https://semgrep.dev/playground/r/9lT2E6/gitlab.find_sec_bugs.PREDICTABLE_RANDOM-1
        origin: custom
- id: gitlab.find_sec_bugs.SCRIPT_ENGINE_INJECTION-1.SPEL_INJECTION-1.EL_INJECTION-2.SEAM_LOG_INJECTION-1
  patterns:
  - pattern: (javax.script.ScriptEngine $ENGINE).eval($ARG);
  - pattern-not: (javax.script.ScriptEngine $ENGINE).eval("...");
  message: |
    The software constructs all or part of a code segment using externally-influenced
    input from an upstream component, but it does not neutralize or incorrectly
    neutralizes special elements that could modify the syntax or behavior of the
    intended code segment.
  languages:
  - java
  severity: ERROR
  metadata:
    cwe: 'CWE-94'
    shortDescription: 'Improper Control of Generation of Code (''Code Injection'')'
    primary_identifier: find_sec_bugs.SCRIPT_ENGINE_INJECTION-1.SPEL_INJECTION-1.EL_INJECTION-2.SEAM_LOG_INJECTION-1
    secondary_identifiers:
    - name: Find Security Bugs-SCRIPT_ENGINE_INJECTION
      type: find_sec_bugs_type
      value: SCRIPT_ENGINE_INJECTION
    - name: Find Security Bugs-SPEL_INJECTION
      type: find_sec_bugs_type
      value: SPEL_INJECTION
    - name: Find Security Bugs-EL_INJECTION
      type: find_sec_bugs_type
      value: EL_INJECTION
    - name: Find Security Bugs-SEAM_LOG_INJECTION
      type: find_sec_bugs_type
      value: SEAM_LOG_INJECTION
    license: MIT
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.SCRIPT_ENGINE_INJECTION-1.SPEL_INJECTION-1.EL_INJECTION-2.SEAM_LOG_INJECTION-1
    shortlink: https://sg.run/93d4
    semgrep.dev:
      rule:
        rule_id: YGUYPE
        version_id: yeT8Q5
        url: https://semgrep.dev/playground/r/yeT8Q5/gitlab.find_sec_bugs.SCRIPT_ENGINE_INJECTION-1.SPEL_INJECTION-1.EL_INJECTION-2.SEAM_LOG_INJECTION-1
        origin: custom
- id: gitlab.find_sec_bugs.SCRIPT_ENGINE_INJECTION-2
  patterns:
  - pattern: (org.springframework.expression.spel.standard.SpelExpressionParser $P).parseExpression($ARG);
  - pattern-not: (org.springframework.expression.spel.standard.SpelExpressionParser
      $P).parseExpression("...");
  message: |
    The software constructs all or part of a code segment using externally-influenced
    input from an upstream component, but it does not neutralize or incorrectly
    neutralizes special elements that could modify the syntax or behavior of the
    intended code segment.
  languages:
  - java
  severity: ERROR
  metadata:
    cwe: 'CWE-94'
    shortDescription: 'Improper Control of Generation of Code (''Code Injection'')'
    primary_identifier: find_sec_bugs.SCRIPT_ENGINE_INJECTION-2
    secondary_identifiers:
    - name: Find Security Bugs-SCRIPT_ENGINE_INJECTION
      type: find_sec_bugs_type
      value: SCRIPT_ENGINE_INJECTION
    license: MIT
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.SCRIPT_ENGINE_INJECTION-2
    shortlink: https://sg.run/yJYr
    semgrep.dev:
      rule:
        rule_id: 6JUyKR
        version_id: rxTqb8
        url: https://semgrep.dev/playground/r/rxTqb8/gitlab.find_sec_bugs.SCRIPT_ENGINE_INJECTION-2
        origin: custom
- id: gitlab.find_sec_bugs.INSECURE_SMTP_SSL-1
  patterns:
  - pattern-either:
    - pattern-inside: |
        $E = new org.apache.commons.mail.SimpleEmail(...);
        ...
    - pattern-inside: |
        $E = new org.apache.commons.mail.Email(...);
        ...
    - pattern-inside: |
        $E = new org.apache.commons.mail.MultiPartEmail(...);
        ...
    - pattern-inside: |
        $E = new org.apache.commons.mail.HtmlEmail(...);
        ...
    - pattern-inside: |
        $E = new org.apache.commons.mail.ImageHtmlEmail(...);
        ...
  - pattern-not: |
      $E.setSSLOnConnect(true);
      ...
      $E.setSSLCheckServerIdentity(true);
  message: |
    Server identity verification is disabled when making SSL connections.
  metadata:
    cwe: 'CWE-297'
    shortDescription: 'Improper Validation of Certificate with Host Mismatch'
    primary_identifier: find_sec_bugs.INSECURE_SMTP_SSL-1
    secondary_identifiers:
    - name: Find Security Bugs-INSECURE_SMTP_SSL
      type: find_sec_bugs_type
      value: INSECURE_SMTP_SSL
    license: MIT
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.INSECURE_SMTP_SSL-1
    shortlink: https://sg.run/rNB0
    semgrep.dev:
      rule:
        rule_id: oqUKxo
        version_id: bZTrxx
        url: https://semgrep.dev/playground/r/bZTrxx/gitlab.find_sec_bugs.INSECURE_SMTP_SSL-1
        origin: custom
  severity: ERROR
  languages:
  - java
- id: gitlab.find_sec_bugs.SMTP_HEADER_INJECTION-1
  patterns:
  - pattern-either:
    - patterns:
      - pattern-inside: |
          $M = new MimeMessage(...);
          ...
      - pattern: $M.setSubject($ARG);
      - pattern-not: $M.setSubject("...")
    - patterns:
      - pattern-inside: |
          $M = new MimeMessage(...);
          ...
      - pattern: $M.addHeader($ARG1, $ARG2)
      - pattern-not: $M.addHeader("...", "...")
    - patterns:
      - pattern-inside: |
          $M = new MimeMessage(...);
          ...
      - pattern: $M.setDescription($ARG)
      - pattern-not: $M.setDescription("...")
    - patterns:
      - pattern-inside: |
          $M = new MimeMessage(...);
          ...
      - pattern: $M.setDisposition($ARG)
      - pattern-not: $M.setDisposition("...")
  languages:
  - java
  message: |
    Simple Mail Transfer Protocol (SMTP) is a the text based protocol used for
    email delivery. Like with HTTP, headers are separate by new line separator. If
    kuser input is place in a header line, the application should remove or replace
    new line characters (CR / LF). You should use a safe wrapper such as Apache
    Common Email and Simple Java Mail which filter special characters that can lead
    to header injection.
  metadata:
    category: security
    cwe: 'CWE-77'
    shortDescription: 'Improper Neutralization of Special Elements used in a Command'
    primary_identifier: find_sec_bugs.SMTP_HEADER_INJECTION-1
    secondary_identifiers:
    - name: Find Security Bugs-SMTP_HEADER_INJECTION
      type: find_sec_bugs_type
      value: SMTP_HEADER_INJECTION
    license: MIT
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.SMTP_HEADER_INJECTION-1
    shortlink: https://sg.run/bWve
    semgrep.dev:
      rule:
        rule_id: zdUGRr
        version_id: NdTL5E
        url: https://semgrep.dev/playground/r/NdTL5E/gitlab.find_sec_bugs.SMTP_HEADER_INJECTION-1
        origin: custom
  severity: ERROR
- id: gitlab.find_sec_bugs.STRUTS_FORM_VALIDATION-1
  patterns:
  - pattern-inside: |
      class $CLASS extends $SC {
        ...
      }
  - metavariable-regex:
      metavariable: $SC
      regex: (ActionForm|ValidatorForm)
  - pattern-not: public void validate() { ... }
  languages:
  - java
  message: |
    Form inputs should have minimal input validation. Preventive validation helps
    provide defense in depth against a variety of risks.
  metadata:
    category: security
    cwe: 'CWE-20'
    shortDescription: 'Improper Input Validation'
    primary_identifier: find_sec_bugs.STRUTS_FORM_VALIDATION-1
    secondary_identifiers:
    - name: Find Security Bugs-STRUTS_FORM_VALIDATION
      type: find_sec_bugs_type
      value: STRUTS_FORM_VALIDATION
    license: MIT
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.STRUTS_FORM_VALIDATION-1
    shortlink: https://sg.run/R5K2
    semgrep.dev:
      rule:
        rule_id: gxUkqj
        version_id: K3TeOX
        url: https://semgrep.dev/playground/r/K3TeOX/gitlab.find_sec_bugs.STRUTS_FORM_VALIDATION-1
        origin: custom
  severity: WARNING
- id: gitlab.find_sec_bugs.AWS_QUERY_INJECTION-1
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-inside: |
        $FUNC(..., $VAR, ...) {
          ...
        }
    - pattern: $VAR
  - patterns:
    - pattern-inside: |
        $FUNC(...) {
          ...
          $VAR = ... + $X;
          ...
        }
    - pattern: $VAR
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          $REQ = new SelectRequest($QUERY, ...);
          ...
          $DB.select($REQ);
      - pattern-inside: |
          $DB.select(new SelectRequest($QUERY,...));
      - pattern-inside: |
          $DB.select((SelectRequest $SR).withSelectExpression($QUERY,...));
    - pattern: $QUERY
    - metavariable-pattern:
        metavariable: $DB
        pattern-either:
        - pattern: (AmazonSimpleDB $DB)
        - pattern: (AmazonSimpleDBClient $DB)
  message: |
    Constructing SimpleDB queries containing user input can allow an attacker to view unauthorized
    records.
  languages:
  - java
  severity: ERROR
  metadata:
    category: security
    cwe: 'CWE-943'
    shortDescription: 'Improper Neutralization of Special Elements in Data Query Logic'
    technology:
    - java
    primary_identifier: find_sec_bugs.AWS_QUERY_INJECTION-1
    secondary_identifiers:
    - name: Find Security Bugs-AWS_QUERY_INJECTION
      type: find_sec_bugs_type
      value: AWS_QUERY_INJECTION
    license: MIT
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.AWS_QUERY_INJECTION-1
    shortlink: https://sg.run/ALZ6
    semgrep.dev:
      rule:
        rule_id: QrU1JP
        version_id: qkTGKZ
        url: https://semgrep.dev/playground/r/qkTGKZ/gitlab.find_sec_bugs.AWS_QUERY_INJECTION-1
        origin: custom
- id: gitlab.find_sec_bugs.BEAN_PROPERTY_INJECTION-1
  patterns:
  - pattern-inside: $TYPE $FUNC(..., HttpServletRequest $REQ, ...) { ... }
  - pattern-either:
    - pattern: |
        $MAP.put(..., $REQ.getParameter(...));
        ...
        $BEAN_UTIL.populate(..., $MAP);
    - pattern: |
        while (...) {
            ...
            $MAP.put(..., $REQ.getParameterValues(...));
        }
        ...
        $BEAN_UTIL.populate(..., $MAP);
  - metavariable-pattern:
      metavariable: $BEAN_UTIL
      pattern-either:
      - pattern: (BeanUtilsBean $B)
      - pattern: new BeanUtilsBean()
      - pattern: org.apache.commons.beanutils.BeanUtils
  message: |
    An attacker can set arbitrary bean properties that can compromise system integrity. An
    attacker can leverage this functionality to access special bean properties like
    class.classLoader that will allow them to override system properties and potentially execute
    arbitrary code.
  languages:
  - java
  severity: ERROR
  metadata:
    category: security
    cwe: 'CWE-15'
    shortDescription: 'External Control of System or Configuration Setting'
    technology:
    - java
    primary_identifier: find_sec_bugs.BEAN_PROPERTY_INJECTION-1
    secondary_identifiers:
    - name: Find Security Bugs-BEAN_PROPERTY_INJECTION
      type: find_sec_bugs_type
      value: BEAN_PROPERTY_INJECTION
    license: MIT
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.BEAN_PROPERTY_INJECTION-1
    shortlink: https://sg.run/Ben9
    semgrep.dev:
      rule:
        rule_id: 3qULd8
        version_id: l4TbN7
        url: https://semgrep.dev/playground/r/l4TbN7/gitlab.find_sec_bugs.BEAN_PROPERTY_INJECTION-1
        origin: custom
- id: gitlab.find_sec_bugs.CRLF_INJECTION_LOGS-1
  patterns:
  - pattern-either:
    - pattern: |
        $TAINTED = (HttpServletRequest $REQ).getParameter(...);
        ...
        $LOGGER.$METHOD(...,$TAINTED,...);
    - pattern: |
        $TAINTED = (HttpServletRequest $REQ).getParameter(...);
        ...
        $VAR = String.Format(..., $TAINTED,...);
        ...
        $LOGGER.$METHOD(...,$VAR,...);
    - pattern: |
        $TAINTED = (HttpServletRequest $REQ).getParameter(...);
        ...
        $LOGGER.$METHOD(...,String.Format(..., $TAINTED,...),...);
    - pattern: |
        $TAINTED = (HttpServletRequest $REQ).getParameter(...);
        ...
        $VAR = ... + $TAINTED + ...;
        ...
        $LOGGER.$METHOD(...,$VAR,...);
    - pattern: |
        $TAINTED = (HttpServletRequest $REQ).getParameter(...);
        ...
        $LOGGER.$METHOD(...,... + $TAINTED + ...,...);
  - metavariable-regex:
      metavariable: $METHOD
      regex: (log|logp|logrb|entering|exiting|fine|finer|finest|info|debug|trace|warn|warning|config|error|severe)
  - metavariable-pattern:
      metavariable: $LOGGER
      pattern-either:
      - pattern: (Logger $LOG)
      - pattern: org.pmw.tinylog.Logger
      - pattern: org.apache.log4j.Logger
      - pattern: org.apache.logging.log4j.Logger
      - pattern: org.slf4j.Logger
      - pattern: org.apache.commons.logging.Log
      - pattern: java.util.logging.Logger
  message: |
    When data from an untrusted source is put into a logger and not neutralized correctly, an
    attacker could forge log entries or include malicious content. Inserted false entries could be
    used to skew statistics, distract the administrator or even to implicate another party in the
    commission of a malicious act. If the log file is processed automatically, the attacker can
    render the file unusable by corrupting the format of the file or injecting unexpected
    characters. An attacker may also inject code or other commands into the log file and take
    advantage of a vulnerability in the log processing utility (e.g. command injection or XSS).
  languages:
  - java
  severity: ERROR
  metadata:
    category: security
    cwe: 'CWE-93'
    shortDescription: 'Improper Neutralization of CRLF Sequences (''CRLF Injection'')'
    technology:
    - java
    primary_identifier: find_sec_bugs.CRLF_INJECTION_LOGS-1
    secondary_identifiers:
    - name: Find Security Bugs-CRLF_INJECTION_LOGS
      type: find_sec_bugs_type
      value: CRLF_INJECTION_LOGS
    license: MIT
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.CRLF_INJECTION_LOGS-1
    shortlink: https://sg.run/De7W
    semgrep.dev:
      rule:
        rule_id: 4bUeor
        version_id: YDT583
        url: https://semgrep.dev/playground/r/YDT583/gitlab.find_sec_bugs.CRLF_INJECTION_LOGS-1
        origin: custom
- id: gitlab.find_sec_bugs.COMMAND_INJECTION-1
  pattern-either:
  - patterns:
    - pattern-inside: |
        $FUNC(...,String $PARAM, ...) {
          ...
        }
    - pattern-either:
      - pattern: (Runtime $R).exec($PARAM,...);
      - patterns:
        - pattern-either:
          - pattern: |
              $CMDARR = new String[]{"$SHELL",...,$PARAM,...};
              ...
              (Runtime $R).exec($CMDARR,...);
          - pattern: (Runtime $R).exec(new String[]{"$SHELL",...,$PARAM,...}, ...);
          - pattern: (Runtime $R).exec(java.util.String.format("...", ...,$PARAM,...));
          - pattern: (Runtime $R).exec((String $A) + (String $B));
        - metavariable-regex:
            metavariable: $SHELL
            regex: (/.../)?(sh|bash|ksh|csh|tcsh|zsh)$
    - pattern-not: (Runtime $R).exec("...","...","...",...);
    - pattern-not: |
        (Runtime $R).exec(new String[]{"...","...","...",...},...);
  - patterns:
    - pattern-inside: |
        $FUNC(...,String $PARAM, ...) {
          ...
        }
    - pattern-either:
      - pattern: (ProcessBuilder $PB).command($PARAM,...);
      - patterns:
        - pattern-either:
          - pattern: (ProcessBuilder $PB).command("$SHELL",...,$PARAM,...);
          - pattern: |
              $CMDARR = java.util.Arrays.asList("$SHELL",...,$PARAM,...);
              ...
              (ProcessBuilder $PB).command($CMDARR,...);
          - pattern: (ProcessBuilder $PB).command(java.util.Arrays.asList("$SHELL",...,$PARAM,...),...);
          - pattern: (ProcessBuilder $PB).command(java.util.String.format("...", ...,$PARAM,...));
          - pattern: (ProcessBuilder $PB).command((String $A) + (String $B));
        - metavariable-regex:
            metavariable: $SHELL
            regex: (/.../)?(sh|bash|ksh|csh|tcsh|zsh)$
    - pattern-not: (ProcessBuilder $PB).command("...","...","...",...);
    - pattern-not: |
        (ProcessBuilder $PB).command(java.util.Arrays.asList("...","...","...",...));
  message: |
    The highlighted API is used to execute a system command. If unfiltered input is passed to this
    API, it can lead to arbitrary command execution.
  languages:
  - java
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-78'
    shortDescription: 'Improper Neutralization of Special Elements used in an OS Command
      (''OS Command Injection'')'
    technology:
    - java
    primary_identifier: find_sec_bugs.COMMAND_INJECTION-1
    secondary_identifiers:
    - name: Find Security Bugs-COMMAND_INJECTION
      type: find_sec_bugs_type
      value: COMMAND_INJECTION
    license: MIT
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.COMMAND_INJECTION-1
    shortlink: https://sg.run/WDoz
    semgrep.dev:
      rule:
        rule_id: PeUjYP
        version_id: JdTbZq
        url: https://semgrep.dev/playground/r/JdTbZq/gitlab.find_sec_bugs.COMMAND_INJECTION-1
        origin: custom
- id: gitlab.find_sec_bugs.CUSTOM_INJECTION-1
  patterns:
  - pattern-either:
    - pattern: |
        $QUERY = ... + $VAR + ...;
        ...
        $ST.executeQuery($QUERY);
    - pattern: |
        $QUERY = ... + $VAR ;
        ...
        $ST.executeQuery($QUERY);
    - pattern: |
        $QUERY = String.format("...",...,$VAR,...);
        ...
        $ST.executeQuery($QUERY);
    - pattern: $ST.executeQuery((StringBuilder $SB).toString());
    - pattern: $ST.executeQuery(... + $VAR + ...);
    - pattern: $ST.executeQuery(... + $VAR);
    - pattern: $ST.executeQuery(...,String.format("...",...,$VAR,...), ...);
  - metavariable-pattern:
      metavariable: $ST
      pattern-either:
      - pattern: (java.sql.Statement $ST)
      - pattern: (org.apache.turbine.om.peer.BasePeer $ST)
  message: |
    The method identified is susceptible to injection. The input should be validated and properly
    escaped.
  languages:
  - java
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-89'
    shortDescription: 'Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    technology:
    - java
    primary_identifier: find_sec_bugs.CUSTOM_INJECTION-1
    secondary_identifiers:
    - name: Find Security Bugs-CUSTOM_INJECTION
      type: find_sec_bugs_type
      value: CUSTOM_INJECTION
    license: MIT
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.CUSTOM_INJECTION-1
    shortlink: https://sg.run/0WpJ
    semgrep.dev:
      rule:
        rule_id: JDUoqr
        version_id: 5PTjY5
        url: https://semgrep.dev/playground/r/5PTjY5/gitlab.find_sec_bugs.CUSTOM_INJECTION-1
        origin: custom
- id: gitlab.find_sec_bugs.CUSTOM_INJECTION-2
  patterns:
  - pattern-not-inside: |
      final String $VAR = ...;
  - pattern-either:
    - pattern: |
        "$SQL_STR" + ...
    - pattern: String.format("$SQL_STR", ...)
    - pattern: |
        "$SQL_STR".concat(...)
    - pattern: (StringBuilder $BUILDER). ... .append("$SQL_STR")
    - patterns:
      - pattern-inside: |
          StringBuilder $BUILDER = new StringBuilder("$SQL_STR");
          ...
      - pattern: $BUILDER.append(...)
    - patterns:
      - pattern-inside: |
          $QUERY = "$SQL_STR";
          ...
      - pattern: $QUERY += ...
  - metavariable-regex:
      metavariable: $SQL_STR
      regex: (?i)(select|insert|create|update|alter|delete|drop)\b
  message: |
    The method identified is susceptible to injection. The input should be validated and properly
    escaped.
  languages:
  - java
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-89'
    shortDescription: 'Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    technology:
    - java
    primary_identifier: find_sec_bugs.CUSTOM_INJECTION-2
    secondary_identifiers:
    - name: Find Security Bugs-CUSTOM_INJECTION
      type: find_sec_bugs_type
      value: CUSTOM_INJECTION
    license: MIT
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.CUSTOM_INJECTION-2
    shortlink: https://sg.run/KyG6
    semgrep.dev:
      rule:
        rule_id: 5rUN6G
        version_id: GxTyW9
        url: https://semgrep.dev/playground/r/GxTyW9/gitlab.find_sec_bugs.CUSTOM_INJECTION-2
        origin: custom
- id: gitlab.find_sec_bugs.EL_INJECTION-1
  patterns:
  - pattern-inside: |
      $FUNC(..., String $EXPR, ...) {
        ...
        ELContext $CTX = ...;
        ...
      }
  - pattern-either:
    - pattern: (ExpressionFactory $EXP).createValueExpression((ELContext $CTX), $EXPR,
        ...)
    - pattern: (ExpressionFactory $EXP).createMethodExpression((ELContext $CTX), $EXPR,
        ...)
  message: |
    An expression is built with a dynamic value. The source of the value(s) should be verified to
    avoid that unfiltered values fall into this risky code evaluation.
  languages:
  - java
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-94'
    shortDescription: 'Improper Control of Generation of Code (''Code Injection'')'
    technology:
    - java
    primary_identifier: find_sec_bugs.EL_INJECTION-1
    secondary_identifiers:
    - name: Find Security Bugs-EL_INJECTION
      type: find_sec_bugs_type
      value: EL_INJECTION
    license: MIT
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.EL_INJECTION-1
    shortlink: https://sg.run/4k1E
    semgrep.dev:
      rule:
        rule_id: GdUo2e
        version_id: RGT7BO
        url: https://semgrep.dev/playground/r/RGT7BO/gitlab.find_sec_bugs.EL_INJECTION-1
        origin: custom
- id: gitlab.find_sec_bugs.REQUESTDISPATCHER_FILE_DISCLOSURE-1.STRUTS_FILE_DISCLOSURE-1.SPRING_FILE_DISCLOSURE-1
  mode: taint
  pattern-sources:
  - pattern: (javax.servlet.http.HttpServletRequest $VAR).getParameter(...)
  pattern-sinks:
  - patterns:
    - pattern: new org.springframework.web.servlet.ModelAndView($FST);
    - pattern: $FST
  - patterns:
    - pattern: new org.springframework.web.servlet.ModelAndView($FST, $SND);
    - pattern: $FST
  - patterns:
    - pattern: new org.springframework.web.servlet.ModelAndView($FST, $SND, $TRD);
    - pattern: $FST
  - patterns:
    - pattern: new org.apache.struts.action.ActionForward($FST)
    - pattern: $FST
  - patterns:
    - pattern: new org.apache.struts.action.ActionForward($FST, $SND)
    - pattern: $FST
  - patterns:
    - pattern: new org.apache.struts.action.ActionForward($FST, $SND, $TRD)
    - pattern: $SND
  - patterns:
    - pattern: new org.apache.struts.action.ActionForward($FST, $SND, $TRD)
    - pattern: $TRD
  - patterns:
    - pattern-inside: |
        $ACTION = new org.apache.struts.action.ActionForward();
        ...
    - pattern: $ACTION.setPath(...)
  - patterns:
    - pattern-inside: |
        $MVC = new org.springframework.web.servlet.ModelAndView();
        ...
    - pattern: $MVC.setViewName(...);
  - patterns:
    - pattern-inside: |
        $REQ = $HTTP.getRequestDispatcher(...);
        ...
    - pattern-either:
      - pattern: $REQ.include($FST, $SND)
      - pattern: $REQ.forward($FST, $SND)
  languages:
  - java
  message: |
    Constructing a server-side redirect path with user input could allow an
    attacker to download application binaries (including application classes or
    jar files) or view arbitrary files within protected directories.
  metadata:
    category: security
    cwe: 'CWE-552'
    shortDescription: 'Files or Directories Accessible to External Parties'
    primary_identifier: find_sec_bugs.REQUESTDISPATCHER_FILE_DISCLOSURE-1.STRUTS_FILE_DISCLOSURE-1.SPRING_FILE_DISCLOSURE-1
    secondary_identifiers:
    - name: Find Security Bugs-REQUESTDISPATCHER_FILE_DISCLOSURE
      type: find_sec_bugs_type
      value: REQUESTDISPATCHER_FILE_DISCLOSURE
    - name: Find Security Bugs-STRUTS_FILE_DISCLOSURE
      type: find_sec_bugs_type
      value: STRUTS_FILE_DISCLOSURE
    - name: Find Security Bugs-SPRING_FILE_DISCLOSURE
      type: find_sec_bugs_type
      value: SPRING_FILE_DISCLOSURE
    license: MIT
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.REQUESTDISPATCHER_FILE_DISCLOSURE-1.STRUTS_FILE_DISCLOSURE-1.SPRING_FILE_DISCLOSURE-1
    shortlink: https://sg.run/PPWq
    semgrep.dev:
      rule:
        rule_id: ReU2bl
        version_id: A8T8y9
        url: https://semgrep.dev/playground/r/A8T8y9/gitlab.find_sec_bugs.REQUESTDISPATCHER_FILE_DISCLOSURE-1.STRUTS_FILE_DISCLOSURE-1.SPRING_FILE_DISCLOSURE-1
        origin: custom
  severity: ERROR
- id: gitlab.find_sec_bugs.HTTP_PARAMETER_POLLUTION-1
  mode: taint
  pattern-sources:
  - pattern: (HttpServletRequest $REQ).getParameter(...)
  pattern-sanitizers:
  - pattern: java.net.URLEncoder.encode(...)
  - pattern: com.google.common.net.UrlEscapers.urlPathSegmentEscaper().escape(...)
  pattern-sinks:
  - pattern: new org.apache.http.client.methods.HttpGet(...)
  - pattern: new org.apache.commons.httpclient.methods.GetMethod(...)
  - pattern: (org.apache.commons.httpclient.methods.GetMethod $GM).setQueryString(...)
  message: |
    Concatenating unvalidated user input into a URL can allow an attacker to override the value of
    a request parameter. Attacker may be able to override existing parameter values, inject a new
    parameter or exploit variables out of a direct reach. HTTP Parameter Pollution (HPP) attacks
    consist of injecting encoded query string delimiters into other existing parameters. If a web
    application does not properly sanitize the user input, a malicious user may compromise the
    logic of the application to perform either client-side or server-side attacks.
  languages:
  - java
  severity: ERROR
  metadata:
    category: security
    cwe: 'CWE-88'
    shortDescription: 'Improper Neutralization of Argument Delimiters in a Command (''Argument
      Injection'')'
    technology:
    - java
    primary_identifier: find_sec_bugs.HTTP_PARAMETER_POLLUTION-1
    secondary_identifiers:
    - name: Find Security Bugs-HTTP_PARAMETER_POLLUTION
      type: find_sec_bugs_type
      value: HTTP_PARAMETER_POLLUTION
    license: MIT
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.HTTP_PARAMETER_POLLUTION-1
    shortlink: https://sg.run/Jw5Q
    semgrep.dev:
      rule:
        rule_id: AbUNR4
        version_id: BjT5Qx
        url: https://semgrep.dev/playground/r/BjT5Qx/gitlab.find_sec_bugs.HTTP_PARAMETER_POLLUTION-1
        origin: custom
- id: gitlab.find_sec_bugs.LDAP_INJECTION-1
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-inside: |
        $FUNC(..., $VAR, ...) {
          ...
        }
    - pattern: $VAR
  - patterns:
    - pattern-inside: |
        $FUNC(..., $X, ...) {
          ...
          $VAR = ... + $X;
          ...
        }
    - pattern: $VAR
  pattern-sinks:
  - pattern: javax.naming.ldap.LdapName(...)
  - pattern: (javax.naming.directory.Context $C).lookup(...)
  - pattern: (javax.naming.Context $C).lookup(...)
  - patterns:
    - pattern-inside: (java.util.Properties $P).put($KEY, $VAL)
    - pattern-not-inside: |
        $FUNC(..., $VAL, ...) {
          ...
        }
    - pattern: $VAL
  - patterns:
    - pattern-inside: (com.unboundid.ldap.sdk.LDAPConnection $C).search($QUERY, ...)
    - pattern: $QUERY
  - patterns:
    - pattern-either:
      - pattern: $CTX.lookup(...)
      - patterns:
        - pattern-inside: $CTX.search($QUERY, ...)
        - pattern: $QUERY
      - patterns:
        - pattern-inside: $CTX.search($NAME, $FILTER, ...)
        - pattern: $FILTER
    - metavariable-pattern:
        metavariable: $CTX
        pattern-either:
        - pattern: (javax.naming.directory.DirContext $C)
        - pattern: (javax.naming.directory.InitialDirContext $IDC)
        - pattern: (javax.naming.ldap.LdapContext $LC)
        - pattern: (javax.naming.event.EventDirContext $EDC)
        - pattern: (com.sun.jndi.ldap.LdapCtx $LC)
  - patterns:
    - pattern-either:
      - patterns:
        - pattern-inside: $CTX.list($QUERY, ...)
        - pattern: $QUERY
      - patterns:
        - pattern-inside: $CTX.lookup($QUERY, ...)
        - pattern: $QUERY
      - patterns:
        - pattern-inside: $CTX.search($QUERY, ...)
        - pattern: $QUERY
      - patterns:
        - pattern-inside: $CTX.search($NAME, $FILTER, ...)
        - pattern: $FILTER
    - metavariable-pattern:
        metavariable: $CTX
        pattern-either:
        - pattern: (org.springframework.ldap.core.LdapTemplate $LT)
        - pattern: (org.springframework.ldap.core.LdapOperations $LO)
  message: |
    Just like SQL, all inputs passed to an LDAP query need to be passed in safely. Unfortunately,
    LDAP doesn't have prepared statement interfaces like SQL. Therefore, the primary defense
    against LDAP injection is strong input validation of any untrusted data before including it in
    an LDAP query.
  languages:
  - java
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-90'
    shortDescription: 'Improper Neutralization of Special Elements used in an LDAP Query
      (''LDAP Injection'')'
    technology:
    - java
    primary_identifier: find_sec_bugs.LDAP_INJECTION-1
    secondary_identifiers:
    - name: Find Security Bugs-LDAP_INJECTION
      type: find_sec_bugs_type
      value: LDAP_INJECTION
    license: MIT
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.LDAP_INJECTION-1
    shortlink: https://sg.run/5Z93
    semgrep.dev:
      rule:
        rule_id: BYUKEw
        version_id: DkTJ39
        url: https://semgrep.dev/playground/r/DkTJ39/gitlab.find_sec_bugs.LDAP_INJECTION-1
        origin: custom
- id: gitlab.find_sec_bugs.OGNL_INJECTION-1
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-inside: |
        $FUNC(..., $VAR, ...) {
          ...
        }
    - metavariable-pattern:
        metavariable: $VAR
        pattern-either:
        - pattern: (String $S)
        - pattern: (Map<String, ?> $M)
        - pattern: (Map<String, String> $M)
        - pattern: (Map<String, Object> $M)
    - pattern: $VAR
  pattern-sinks:
  - patterns:
    - pattern-inside: com.opensymphony.xwork2.util.TextParseUtil.translateVariables($VAL,
        ...)
    - pattern: $VAL
  - patterns:
    - pattern-inside: com.opensymphony.xwork2.util.TextParseUtil.translateVariablesCollection($VAL,
        ...)
    - pattern: $VAL
  - pattern: com.opensymphony.xwork2.util.TextParseUtil.shallBeIncluded(...)
  - pattern: com.opensymphony.xwork2.util.TextParseUtil.commaDelimitedStringToSet(...)
  - patterns:
    - pattern-inside: (com.opensymphony.xwork2.util.TextParser $P).evaluate($VAR,
        $VAL, ...)
    - pattern: $VAL
  - patterns:
    - pattern-inside: (com.opensymphony.xwork2.util.OgnlTextParser $P).evaluate($VAR,
        $VAL, ...)
    - pattern: $VAL
  - pattern: (com.opensymphony.xwork2.ognl.OgnlReflectionProvider $P).getGetMethod($CLZ,
      ...)
  - pattern: (com.opensymphony.xwork2.ognl.OgnlReflectionProvider $P).getSetMethod($CLZ,
      ...)
  - pattern: (com.opensymphony.xwork2.ognl.OgnlReflectionProvider $P).getField($CLZ,
      ...)
  - patterns:
    - pattern-inside: (com.opensymphony.xwork2.ognl.OgnlReflectionProvider $P).setProperties($MAP,
        ...)
    - pattern: $MAP
  - patterns:
    - pattern-inside: (com.opensymphony.xwork2.ognl.OgnlReflectionProvider $P).setProperty($VAL,
        ...)
    - pattern: $VAL
  - patterns:
    - pattern-inside: (com.opensymphony.xwork2.ognl.OgnlReflectionProvider $P).getValue($VAL,
        ...)
    - pattern: $VAL
  - patterns:
    - pattern-inside: (com.opensymphony.xwork2.ognl.OgnlReflectionProvider $P).setValue($VAL,
        ...)
    - pattern: $VAL
  - pattern: (com.opensymphony.xwork2.util.reflection.ReflectionProvider $P).getGetMethod($CLZ,
      ...)
  - pattern: (com.opensymphony.xwork2.util.reflection.ReflectionProvider $P).getSetMethod($CLZ,
      ...)
  - pattern: (com.opensymphony.xwork2.util.reflection.ReflectionProvider $P).getField($CLZ,
      ...)
  - patterns:
    - pattern-inside: (com.opensymphony.xwork2.util.reflection.ReflectionProvider
        $P).setProperties($MAP, ...)
    - pattern: $MAP
  - patterns:
    - pattern-inside: (com.opensymphony.xwork2.util.reflection.ReflectionProvider
        $P).setProperty($VAR, ...)
    - pattern: $VAR
  - patterns:
    - pattern-inside: (com.opensymphony.xwork2.util.reflection.ReflectionProvider
        $P).getValue($VAR, ...)
    - pattern: $VAR
  - patterns:
    - pattern-inside: (com.opensymphony.xwork2.util.reflection.ReflectionProvider
        $P).setValue($VAR, ...)
    - pattern: $VAR
  - patterns:
    - pattern-inside: (com.opensymphony.xwork2.ognl.OgnlUtil $P).setProperties($MAP,
        ...)
    - pattern: $MAP
  - patterns:
    - pattern-inside: (com.opensymphony.xwork2.ognl.OgnlUtil $P).setProperty($VAR,
        ...)
    - pattern: $VAR
  - patterns:
    - pattern-inside: (com.opensymphony.xwork2.ognl.OgnlUtil $P).getValue($VAR, ...)
    - pattern: $VAR
  - patterns:
    - pattern-inside: (com.opensymphony.xwork2.ognl.OgnlUtil $P).setValue($VAR, ...)
    - pattern: $VAR
  - patterns:
    - pattern-inside: (com.opensymphony.xwork2.ognl.OgnlUtil $P).callMethod($VAR,
        ...)
    - pattern: $VAR
  - patterns:
    - pattern-inside: (com.opensymphony.xwork2.ognl.OgnlUtil $P).compile($VAR, ...)
    - pattern: $VAR
  - pattern: (org.apache.struts2.util.VelocityStrutsUtil $P).evaluate(...)
  - pattern: org.apache.struts2.util.StrutsUtil.findString(...)
  - pattern: org.apache.struts2.util.StrutsUtil.findValue(..., $VAL)
  - pattern: org.apache.struts2.util.StrutsUtil.getText(...)
  - pattern: org.apache.struts2.util.StrutsUtil.translateVariables(...)
  - patterns:
    - pattern-inside: org.apache.struts2.util.StrutsUtil.makeSelectList($VAR, ...)
    - pattern: $VAR
  - patterns:
    - pattern-inside: (org.apache.struts2.views.jsp.ui.OgnlTool $T).findValue($VAR,
        ...)
    - pattern: $VAR
  - pattern: (com.opensymphony.xwork2.util.ValueStack $V).findString(...)
  - patterns:
    - pattern-inside: (com.opensymphony.xwork2.util.ValueStack $V).findValue($VAR,
        ...)
    - pattern: $VAR
  - patterns:
    - pattern-inside: (com.opensymphony.xwork2.util.ValueStack $V).setValue($VAR,
        ...)
    - pattern: $VAR
  - patterns:
    - pattern-inside: (com.opensymphony.xwork2.util.ValueStack $V).setParameter($VAR,
        ...)
    - pattern: $VAR
  message: |
    "A expression is built with a dynamic value. The source of the value(s) should be verified to
    avoid that unfiltered values fall into this risky code evaluation."
  languages:
  - java
  severity: WARNING
  metadata:
    category: security
    technology:
    - java
    primary_identifier: find_sec_bugs.OGNL_INJECTION-1
    secondary_identifiers:
    - name: Find Security Bugs-OGNL_INJECTION
      type: find_sec_bugs_type
      value: OGNL_INJECTION
    license: MIT
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.OGNL_INJECTION-1
    shortlink: https://sg.run/Gb4n
    semgrep.dev:
      rule:
        rule_id: DbU2QO
        version_id: WrT9ko
        url: https://semgrep.dev/playground/r/WrT9ko/gitlab.find_sec_bugs.OGNL_INJECTION-1
        origin: custom
- id: gitlab.find_sec_bugs.PATH_TRAVERSAL_IN-1
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-inside: |
        $FUNC(String[] $ARGS) {
          ...
        }
    - pattern: $ARGS[$IDX]
  - patterns:
    - pattern-inside: |
        $FUNC(..., String $VAR, ...) {
          ...
        }
    - pattern: $VAR
  pattern-sanitizers:
  - pattern: org.apache.commons.io.FilenameUtils.getName(...)
  pattern-sinks:
  - patterns:
    - pattern-inside: |
        $U = new java.net.URI($VAR)
    - pattern-either:
      - pattern-inside: new java.io.File($U)
      - pattern-inside: java.nio.file.Paths.get($U)
    - pattern: $VAR
  - patterns:
    - pattern-inside: new java.io.RandomAccessFile($INPUT,...)
    - pattern: $INPUT
  - pattern: new java.io.FileReader(...)
  - pattern: new javax.activation.FileDataSource(...)
  - pattern: new java.io.FileInputStream(...)
  - patterns:
    - pattern-either:
      - pattern-inside: new java.io.File(...,(String $VAR), ...)
      - pattern-inside: java.nio.file.Paths.get(...,(String $VAR),...)
      - pattern-inside: java.io.File.createTempFile(...,(String $VAR), ...)
      - pattern-inside: java.io.File.createTempDirectory(...,(String $VAR),...)
      - pattern-inside: java.nio.file.Files.createTempFile(..., (String $VAR), ...)
      - pattern-inside: java.nio.file.Files.createTempDirectory(..., (String $VAR),
          ...)
    - pattern: $VAR
  message: |
    A file is opened to read its content. The filename comes from an input parameter. If an
    unfiltered parameter is passed to this file API, files from an arbitrary filesystem location
    could be read. This rule identifies potential path traversal vulnerabilities. In many cases,
    the constructed file path cannot be controlled by the user.
  languages:
  - java
  severity: ERROR
  metadata:
    category: security
    cwe: 'CWE-22'
    shortDescription: 'Improper Limitation of a Pathname to a Restricted Directory (''Path
      Traversal'')'
    technology:
    - java
    primary_identifier: find_sec_bugs.PATH_TRAVERSAL_IN-1
    secondary_identifiers:
    - name: Find Security Bugs-PATH_TRAVERSAL_IN
      type: find_sec_bugs_type
      value: PATH_TRAVERSAL_IN
    license: MIT
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.PATH_TRAVERSAL_IN-1
    shortlink: https://sg.run/R5KK
    semgrep.dev:
      rule:
        rule_id: WAUYbb
        version_id: 0bTBQE
        url: https://semgrep.dev/playground/r/0bTBQE/gitlab.find_sec_bugs.PATH_TRAVERSAL_IN-1
        origin: custom
- id: gitlab.find_sec_bugs.PT_RELATIVE_PATH_TRAVERSAL-1
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-inside: |
        $P = (HttpServletRequest $REQ).getParameter(...);
        ...
    - pattern-either:
      - pattern: $P + ...
      - pattern: '... + $P'
  pattern-sanitizers:
  - pattern: org.apache.commons.io.FilenameUtils.getName(...)
  pattern-sinks:
  - patterns:
    - pattern-inside: |
        $U = new java.net.URI($VAR)
    - pattern-either:
      - pattern-inside: new java.io.File($U)
      - pattern-inside: java.nio.file.Paths.get($U)
    - pattern: $VAR
  - patterns:
    - pattern-inside: new java.io.RandomAccessFile($INPUT,...)
    - pattern: $INPUT
  - pattern: new java.io.FileReader(...)
  - pattern: new javax.activation.FileDataSource(...)
  - pattern: new java.io.FileInputStream(...)
  - pattern: new java.io.File(...)
  - pattern: java.nio.file.Paths.get(...)
  - pattern: java.io.File.createTempFile(...)
  - pattern: java.io.File.createTempDirectory(...)
  - pattern: java.nio.file.Files.createTempFile(...)
  - pattern: java.nio.file.Files.createTempDirectory(...)
  - patterns:
    - pattern-inside: new java.io.FileWriter($PATH, ...)
    - pattern: $PATH
  - patterns:
    - pattern-inside: new java.io.FileOutputStream($PATH, ...)
    - pattern: $PATH
  message: |
    "The software uses an HTTP request parameter to construct a pathname that should be within a
    restricted directory, but it does not properly neutralize sequences such as ".." that can
    resolve to a location that is outside of that directory. See
    http://cwe.mitre.org/data/definitions/23.html for more information."
  languages:
  - java
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-22'
    shortDescription: 'Improper Limitation of a Pathname to a Restricted Directory (''Path
      Traversal'')'
    technology:
    - java
    primary_identifier: find_sec_bugs.PT_RELATIVE_PATH_TRAVERSAL-1
    secondary_identifiers:
    - name: Find Security Bugs-PT_RELATIVE_PATH_TRAVERSAL
      type: find_sec_bugs_type
      value: PT_RELATIVE_PATH_TRAVERSAL
    license: MIT
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.PT_RELATIVE_PATH_TRAVERSAL-1
    shortlink: https://sg.run/De5j
    semgrep.dev:
      rule:
        rule_id: qNUpqY
        version_id: l4TbeW
        url: https://semgrep.dev/playground/r/l4TbeW/gitlab.find_sec_bugs.PT_RELATIVE_PATH_TRAVERSAL-1
        origin: custom
- id: gitlab.find_sec_bugs.LDAP_ANONYMOUS-1
  patterns:
  - pattern-inside: |
      import javax.naming.Context;
      ...
  - pattern: $ENV.put(Context.SECURITY_AUTHENTICATION, "none");
  languages:
  - java
  message: |
    Without proper access control, executing an LDAP statement that contains a
    user-controlled value can allow an attacker to abuse poorly configured LDAP
    context
  metadata:
    category: security
    cwe: 'CWE-20'
    shortDescription: 'Improper Input Validation'
    primary_identifier: find_sec_bugs.LDAP_ANONYMOUS-1
    secondary_identifiers:
    - name: Find Security Bugs-LDAP_ANONYMOUS
      type: find_sec_bugs_type
      value: LDAP_ANONYMOUS
    license: MIT
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.LDAP_ANONYMOUS-1
    shortlink: https://sg.run/0Wrb
    semgrep.dev:
      rule:
        rule_id: PeUjLD
        version_id: 6xT3Ay
        url: https://semgrep.dev/playground/r/6xT3Ay/gitlab.find_sec_bugs.LDAP_ANONYMOUS-1
        origin: custom
  severity: WARNING
- id: gitlab.find_sec_bugs.LDAP_ENTRY_POISONING-1
  patterns:
  - pattern: new javax.naming.directory.SearchControls($SCOPE, $CLIMIT, $TLIMIT, $ATTR,
      true, $DEREF)
  languages:
  - java
  message: |
    Without proper access control, executing an LDAP statement that contains a
    user-controlled value can allow an attacker to abuse poorly configured LDAP
    context
  metadata:
    category: security
    cwe: 'CWE-20'
    shortDescription: 'Improper Input Validation'
    primary_identifier: find_sec_bugs.LDAP_ENTRY_POISONING-1
    secondary_identifiers:
    - name: Find Security Bugs-LDAP_ENTRY_POISONING
      type: find_sec_bugs_type
      value: LDAP_ENTRY_POISONING
    license: MIT
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.LDAP_ENTRY_POISONING-1
    shortlink: https://sg.run/Ky0d
    semgrep.dev:
      rule:
        rule_id: JDUog3
        version_id: o5TvWZ
        url: https://semgrep.dev/playground/r/o5TvWZ/gitlab.find_sec_bugs.LDAP_ENTRY_POISONING-1
        origin: custom
  severity: ERROR
- id: gitlab.find_sec_bugs.DMI_CONSTANT_DB_PASSWORD-1.HARD_CODE_PASSWORD-3
  patterns:
  - pattern: java.sql.DriverManager.getConnection($URI, $USR, "...");
  message: |
    This code creates a database connect using a hardcoded, constant password. Anyone with access
    to either the source code or the compiled code can easily learn the password.
  languages:
  - java
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-259'
    shortDescription: 'Use of Hard-coded Password'
    technology:
    - java
    primary_identifier: find_sec_bugs.DMI_CONSTANT_DB_PASSWORD-1.HARD_CODE_PASSWORD-3
    secondary_identifiers:
    - name: Find Security Bugs-DMI_CONSTANT_DB_PASSWORD
      type: find_sec_bugs_type
      value: DMI_CONSTANT_DB_PASSWORD
    - name: Find Security Bugs-HARD_CODE_PASSWORD
      type: find_sec_bugs_type
      value: HARD_CODE_PASSWORD
    license: MIT
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.DMI_CONSTANT_DB_PASSWORD-1.HARD_CODE_PASSWORD-3
    shortlink: https://sg.run/qZAx
    semgrep.dev:
      rule:
        rule_id: 5rUN5O
        version_id: zyTdX8
        url: https://semgrep.dev/playground/r/zyTdX8/gitlab.find_sec_bugs.DMI_CONSTANT_DB_PASSWORD-1.HARD_CODE_PASSWORD-3
        origin: custom
- id: gitlab.find_sec_bugs.DMI_EMPTY_DB_PASSWORD-1.HARD_CODE_PASSWORD-2
  patterns:
  - pattern: java.sql.DriverManager.getConnection($URI, $USR, "");
  message: |
    This code creates a database connect using a blank or empty password. This indicates that the
    database is not protected by a password.
  languages:
  - java
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-259'
    shortDescription: 'Use of Hard-coded Password'
    technology:
    - java
    primary_identifier: find_sec_bugs.DMI_EMPTY_DB_PASSWORD-1.HARD_CODE_PASSWORD-2
    secondary_identifiers:
    - name: Find Security Bugs-DMI_EMPTY_DB_PASSWORD
      type: find_sec_bugs_type
      value: DMI_EMPTY_DB_PASSWORD
    - name: Find Security Bugs-HARD_CODE_PASSWORD
      type: find_sec_bugs_type
      value: HARD_CODE_PASSWORD
    license: MIT
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.DMI_EMPTY_DB_PASSWORD-1.HARD_CODE_PASSWORD-2
    shortlink: https://sg.run/lW3j
    semgrep.dev:
      rule:
        rule_id: GdUow0
        version_id: pZToqL
        url: https://semgrep.dev/playground/r/pZToqL/gitlab.find_sec_bugs.DMI_EMPTY_DB_PASSWORD-1.HARD_CODE_PASSWORD-2
        origin: custom
- id: gitlab.flawfinder.MultiByteToWideChar-1
  languages:
  - c
  message: |
    The software does not properly handle when an input contains Unicode encoding.
  metadata:
    cwe: 'CWE-120'
    shortDescription: 'Requires maximum length in CHARACTERS, not bytes (CWE-120)'
    primary_identifier: flawfinder.MultiByteToWideChar-1
    secondary_identifiers:
    - name: Flawfinder - MultiByteToWideChar
      type: flawfinder_func_name
      value: MultiByteToWideChar
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.MultiByteToWideChar-1
    shortlink: https://sg.run/N82x
    semgrep.dev:
      rule:
        rule_id: qNUb31
        version_id: 0bTBZE
        url: https://semgrep.dev/playground/r/0bTBZE/gitlab.flawfinder.MultiByteToWideChar-1
        origin: custom
  pattern: MultiByteToWideChar(...)
  severity: INFO
- id: gitlab.flawfinder.StrCat-1.StrCatA-1.StrcatW-1.lstrcatA-1.lstrcatW-1.strCatBuff-1.StrCatBuffA-1.StrCatBuffW-1.StrCatChainW-1._tccat-1._mbccat-1._ftcscat-1.StrCatN-1.StrCatNA-1.StrCatNW-1.StrNCat-1.StrNCatA-1.StrNCatW-1.lstrncat-1.lstrcatnA-1.lstrcatnW-1
  languages:
  - c
  message: |
    Buffer overflow is not checked.
  metadata:
    cwe: 'CWE-120'
    shortDescription: 'Does not check for buffer overflows when concatenating to destination
      [MS-banned] (CWE-120)'
    primary_identifier: flawfinder.StrCat-1.StrCatA-1.StrcatW-1.lstrcatA-1.lstrcatW-1.strCatBuff-1.StrCatBuffA-1.StrCatBuffW-1.StrCatChainW-1._tccat-1._mbccat-1._ftcscat-1.StrCatN-1.StrCatNA-1.StrCatNW-1.StrNCat-1.StrNCatA-1.StrNCatW-1.lstrncat-1.lstrcatnA-1.lstrcatnW-1
    secondary_identifiers:
    - name: Flawfinder - StrCat
      type: flawfinder_func_name
      value: StrCat
    - name: Flawfinder - StrCatA
      type: flawfinder_func_name
      value: StrCatA
    - name: Flawfinder - StrcatW
      type: flawfinder_func_name
      value: StrcatW
    - name: Flawfinder - lstrcatA
      type: flawfinder_func_name
      value: lstrcatA
    - name: Flawfinder - lstrcatW
      type: flawfinder_func_name
      value: lstrcatW
    - name: Flawfinder - strCatBuff
      type: flawfinder_func_name
      value: strCatBuff
    - name: Flawfinder - StrCatBuffA
      type: flawfinder_func_name
      value: StrCatBuffA
    - name: Flawfinder - StrCatBuffW
      type: flawfinder_func_name
      value: StrCatBuffW
    - name: Flawfinder - StrCatChainW
      type: flawfinder_func_name
      value: StrCatChainW
    - name: Flawfinder - _tccat
      type: flawfinder_func_name
      value: _tccat
    - name: Flawfinder - _mbccat
      type: flawfinder_func_name
      value: _mbccat
    - name: Flawfinder - _ftcscat
      type: flawfinder_func_name
      value: _ftcscat
    - name: Flawfinder - StrCatN
      type: flawfinder_func_name
      value: StrCatN
    - name: Flawfinder - StrCatNA
      type: flawfinder_func_name
      value: StrCatNA
    - name: Flawfinder - StrCatNW
      type: flawfinder_func_name
      value: StrCatNW
    - name: Flawfinder - StrNCat
      type: flawfinder_func_name
      value: StrNCat
    - name: Flawfinder - StrNCatA
      type: flawfinder_func_name
      value: StrNCatA
    - name: Flawfinder - StrNCatW
      type: flawfinder_func_name
      value: StrNCatW
    - name: Flawfinder - lstrncat
      type: flawfinder_func_name
      value: lstrncat
    - name: Flawfinder - lstrcatnA
      type: flawfinder_func_name
      value: lstrcatnA
    - name: Flawfinder - lstrcatnW
      type: flawfinder_func_name
      value: lstrcatnW
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.StrCat-1.StrCatA-1.StrcatW-1.lstrcatA-1.lstrcatW-1.strCatBuff-1.StrCatBuffA-1.StrCatBuffW-1.StrCatChainW-1._tccat-1._mbccat-1._ftcscat-1.StrCatN-1.StrCatNA-1.StrCatNW-1.StrNCat-1.StrNCatA-1.StrNCatW-1.lstrncat-1.lstrcatnA-1.lstrcatnW-1
    shortlink: https://sg.run/kkoX
    semgrep.dev:
      rule:
        rule_id: lBUzG9
        version_id: K3TeRY
        url: https://semgrep.dev/playground/r/K3TeRY/gitlab.flawfinder.StrCat-1.StrCatA-1.StrcatW-1.lstrcatA-1.lstrcatW-1.strCatBuff-1.StrCatBuffA-1.StrCatBuffW-1.StrCatChainW-1._tccat-1._mbccat-1._ftcscat-1.StrCatN-1.StrCatNA-1.StrCatNW-1.StrNCat-1.StrNCatA-1.StrNCatW-1.lstrncat-1.lstrcatnA-1.lstrcatnW-1
        origin: custom
  pattern-either:
  - pattern: StrCat(...)
  - pattern: StrCatA(...)
  - pattern: StrcatW(...)
  - pattern: lstrcatA(...)
  - pattern: lstrcatW(...)
  - pattern: strCatBuff(...)
  - pattern: StrCatBuffA(...)
  - pattern: StrCatBuffW(...)
  - pattern: StrCatChainW(...)
  - pattern: _tccat(...)
  - pattern: _mbccat(...)
  - pattern: _ftcscat(...)
  - pattern: StrCatN(...)
  - pattern: StrCatNA(...)
  - pattern: StrCatNW(...)
  - pattern: StrNCat(...)
  - pattern: StrNCatA(...)
  - pattern: StrNCatW(...)
  - pattern: lstrncat(...)
  - pattern: lstrcatnA(...)
  - pattern: lstrcatnW(...)
  severity: ERROR
- id: gitlab.flawfinder.char-1.TCHAR-1.wchar_t-1
  languages:
  - c
  message: |
    Perform bounds checking, use functions that limit length, or ensure that the size is larger
    than the maximum possible length.
  metadata:
    cwe: 'CWE-120'
    shortDescription: 'Statically-sized arrays can be improperly restricted, leading to
      potential overflows or other issues (CWE-119!/CWE-120)'
    primary_identifier: flawfinder.char-1.TCHAR-1.wchar_t-1
    secondary_identifiers:
    - name: Flawfinder - char
      type: flawfinder_func_name
      value: char
    - name: Flawfinder - TCHAR
      type: flawfinder_func_name
      value: TCHAR
    - name: Flawfinder - wchar_t
      type: flawfinder_func_name
      value: wchar_t
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.char-1.TCHAR-1.wchar_t-1
    shortlink: https://sg.run/w1kx
    semgrep.dev:
      rule:
        rule_id: PeUBNk
        version_id: qkTGrX
        url: https://semgrep.dev/playground/r/qkTGrX/gitlab.flawfinder.char-1.TCHAR-1.wchar_t-1
        origin: custom
  pattern-either:
  - patterns:
    - pattern-regex: (wchar_t) *[a-zA-Z0-9_]+\[.*\]
    - pattern-not-regex: (wchar_t) *[a-zA-Z0-9_]+\[\](\s|)\= *([a-zA-Z]|)(\s|)("|{)(.*)
  - patterns:
    - pattern-regex: (char) *[a-zA-Z0-9_]+\[.*\]
    - pattern-not-regex: (char) *[a-zA-Z0-9_]+\[\](\s|)\= *([a-zA-Z]|)(\s|)("|{)(.*)
  - patterns:
    - pattern-regex: (TCHAR) *[a-zA-Z0-9_]+\[.*\]
    - pattern-not-regex: (TCHAR) *[a-zA-Z0-9_]+\[\](\s|)\= *([a-zA-Z]|)(\s|)("|{)(.*)
  - patterns:
    - pattern-regex: static *(const)? *(wchar_t|char|TCHAR) *[a-zA-Z0-9_]+ *\[.*\]\*(={.*})?
  - patterns:
    - pattern-regex: (.*|)(\s|)\=(\s|)\((char.*) (malloc)\(.*\[[0-9]+\].*\)
  severity: INFO
- id: gitlab.flawfinder.equal-1.mismatch-1.is_permutation-1
  languages:
  - c
  message: |
    This function is often discouraged by most C++ coding standards in favor of its safer
    alternatives provided since C++14. Consider using a form of this function that checks the
    second iterator before potentially overflowing it.
  metadata:
    cwe: 'CWE-126'
    shortDescription: 'Function does not check the second iterator for over-read conditions
      (CWE-126)'
    primary_identifier: flawfinder.equal-1.mismatch-1.is_permutation-1
    secondary_identifiers:
    - name: Flawfinder - equal
      type: flawfinder_func_name
      value: equal
    - name: Flawfinder - mismatch
      type: flawfinder_func_name
      value: mismatch
    - name: Flawfinder - is_permutation
      type: flawfinder_func_name
      value: is_permutation
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.equal-1.mismatch-1.is_permutation-1
    shortlink: https://sg.run/xewe
    semgrep.dev:
      rule:
        rule_id: JDUQ8Q
        version_id: l4TbYW
        url: https://semgrep.dev/playground/r/l4TbYW/gitlab.flawfinder.equal-1.mismatch-1.is_permutation-1
        origin: custom
  pattern-either:
  - pattern: equal(...)
  - pattern: mismatch(...)
  - pattern: is_permutation(...)
  severity: INFO
- id: gitlab.flawfinder.fscanf-1.sscanf-1.vsscanf-1.vfscanf-1._ftscanf-1.fwscanf-1.vfwscanf-1.vswscanf-1
  languages:
  - c
  message: |
    Specify a limit to %s, or use a different input function.
  metadata:
    cwe: 'CWE-120'
    shortDescription: 'The scanf() family''s %s operation, without a limit specification,
      permits buffer overflows (CWE-120, CWE-20)'
    primary_identifier: flawfinder.fscanf-1.sscanf-1.vsscanf-1.vfscanf-1._ftscanf-1.fwscanf-1.vfwscanf-1.vswscanf-1
    secondary_identifiers:
    - name: Flawfinder - fscanf
      type: flawfinder_func_name
      value: fscanf
    - name: Flawfinder - sscanf
      type: flawfinder_func_name
      value: sscanf
    - name: Flawfinder - vsscanf
      type: flawfinder_func_name
      value: vsscanf
    - name: Flawfinder - vfscanf
      type: flawfinder_func_name
      value: vfscanf
    - name: Flawfinder - _ftscanf
      type: flawfinder_func_name
      value: _ftscanf
    - name: Flawfinder - fwscanf
      type: flawfinder_func_name
      value: fwscanf
    - name: Flawfinder - vfwscanf
      type: flawfinder_func_name
      value: vfwscanf
    - name: Flawfinder - vswscanf
      type: flawfinder_func_name
      value: vswscanf
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.fscanf-1.sscanf-1.vsscanf-1.vfscanf-1._ftscanf-1.fwscanf-1.vfwscanf-1.vswscanf-1
    shortlink: https://sg.run/O8Xe
    semgrep.dev:
      rule:
        rule_id: 5rU8bL
        version_id: YDT5xl
        url: https://semgrep.dev/playground/r/YDT5xl/gitlab.flawfinder.fscanf-1.sscanf-1.vsscanf-1.vfscanf-1._ftscanf-1.fwscanf-1.vfwscanf-1.vswscanf-1
        origin: custom
  pattern-either:
  - pattern: fscanf(...)
  - pattern: sscanf(...)
  - pattern: vsscanf(...)
  - pattern: vfscanf(...)
  - pattern: _ftscanf(...)
  - pattern: fwscanf(...)
  - pattern: vfwscanf(...)
  - pattern: vswscanf(...)
  severity: ERROR
- id: gitlab.flawfinder.g_get_home_dir-1
  languages:
  - c
  message: |
    Check environment variables carefully before using them.
  metadata:
    cwe: 'CWE-20'
    shortDescription: 'This function is synonymous with ''getenv("HOME")'';it returns untrustable
      input if the environment can beset by an attacker.  It can have any content
      and length, and the same variable can be set more than once (CWE-807, CWE-20)'
    primary_identifier: flawfinder.g_get_home_dir-1
    secondary_identifiers:
    - name: Flawfinder - g_get_home_dir
      type: flawfinder_func_name
      value: g_get_home_dir
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.g_get_home_dir-1
    shortlink: https://sg.run/eK0X
    semgrep.dev:
      rule:
        rule_id: GdUZpz
        version_id: 6xT3ky
        url: https://semgrep.dev/playground/r/6xT3ky/gitlab.flawfinder.g_get_home_dir-1
        origin: custom
  pattern: g_get_home_dir(...)
  severity: WARNING
- id: gitlab.flawfinder.g_get_tmp_dir-1
  languages:
  - c
  message: |
    Check environment variables carefully before using them.
  metadata:
    cwe: 'CWE-20'
    shortDescription: 'This function is synonymous with ''getenv("TMP")'';it returns untrustable
      input if the environment can beset by an attacker.  It can have any content
      and length, and the same variable can be set more than once (CWE-807, CWE-20)'
    primary_identifier: flawfinder.g_get_tmp_dir-1
    secondary_identifiers:
    - name: Flawfinder - g_get_tmp_dir
      type: flawfinder_func_name
      value: g_get_tmp_dir
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.g_get_tmp_dir-1
    shortlink: https://sg.run/v2NX
    semgrep.dev:
      rule:
        rule_id: ReUojK
        version_id: o5TvPZ
        url: https://semgrep.dev/playground/r/o5TvPZ/gitlab.flawfinder.g_get_tmp_dir-1
        origin: custom
  pattern: g_get_tmp_dir(...)
  severity: WARNING
- id: gitlab.flawfinder.getchar-1.fgetc-1.getc-1.read-1._gettc-1
  languages:
  - c
  message: |
    CWE-20: Check buffer boundaries if used in a loop including recursive loops
  metadata:
    cwe: 'CWE-20'
    shortDescription: 'Check buffer boundaries if used in a loop including recursive loops
      (CWE-120, CWE-20)'
    primary_identifier: flawfinder.getchar-1.fgetc-1.getc-1.read-1._gettc-1
    secondary_identifiers:
    - name: Flawfinder - getchar
      type: flawfinder_func_name
      value: getchar
    - name: Flawfinder - fgetc
      type: flawfinder_func_name
      value: fgetc
    - name: Flawfinder - getc
      type: flawfinder_func_name
      value: getc
    - name: Flawfinder - read
      type: flawfinder_func_name
      value: read
    - name: Flawfinder - _gettc
      type: flawfinder_func_name
      value: _gettc
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.getchar-1.fgetc-1.getc-1.read-1._gettc-1
    shortlink: https://sg.run/d0WP
    semgrep.dev:
      rule:
        rule_id: AbUGwN
        version_id: zyTd98
        url: https://semgrep.dev/playground/r/zyTd98/gitlab.flawfinder.getchar-1.fgetc-1.getc-1.read-1._gettc-1
        origin: custom
  pattern-either:
  - pattern: getchar(...)
  - pattern: fgetc(...)
  - pattern: getc(...)
  - pattern: read(...)
  - pattern: _gettc(...)
  severity: INFO
- id: gitlab.flawfinder.getenv-1.curl_getenv-1
  languages:
  - c
  message: |
    Check environment variables carefully before using them.
  metadata:
    cwe: 'CWE-20'
    shortDescription: 'Environment variables are untrustable input if they can be set by
      an attacker.  They can have any content and length, and the same variable can
      be set more than once (CWE-807, CWE-20)'
    primary_identifier: flawfinder.getenv-1.curl_getenv-1
    secondary_identifiers:
    - name: Flawfinder - getenv
      type: flawfinder_func_name
      value: getenv
    - name: Flawfinder - curl_getenv
      type: flawfinder_func_name
      value: curl_getenv
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.getenv-1.curl_getenv-1
    shortlink: https://sg.run/ZkO7
    semgrep.dev:
      rule:
        rule_id: BYU761
        version_id: pZToJL
        url: https://semgrep.dev/playground/r/pZToJL/gitlab.flawfinder.getenv-1.curl_getenv-1
        origin: custom
  pattern-either:
  - pattern: getenv(...)
  - pattern: curl_getenv(...)
  severity: WARNING
- id: gitlab.flawfinder.getopt-1.getopt_long-1
  languages:
  - c
  message: |
    Check implementation on installation, or limit the size of all string inputs.
  metadata:
    cwe: 'CWE-120'
    shortDescription: 'Some older implementations do not protect against internal buffer
      overflows (CWE-120, CWE-20)'
    primary_identifier: flawfinder.getopt-1.getopt_long-1
    secondary_identifiers:
    - name: Flawfinder - getopt
      type: flawfinder_func_name
      value: getopt
    - name: Flawfinder - getopt_long
      type: flawfinder_func_name
      value: getopt_long
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.getopt-1.getopt_long-1
    shortlink: https://sg.run/nk2G
    semgrep.dev:
      rule:
        rule_id: DbUKAn
        version_id: 2KTeXv
        url: https://semgrep.dev/playground/r/2KTeXv/gitlab.flawfinder.getopt-1.getopt_long-1
        origin: custom
  pattern-either:
  - pattern: getopt(...)
  - pattern: getopt_long(...)
  severity: WARNING
- id: gitlab.flawfinder.getpw-1
  languages:
  - c
  message: |
    Use getpwuid() instead.
  metadata:
    cwe: 'CWE-120'
    shortDescription: 'This function is dangerous; it may overflow the provided buffer.
      It extracts data from a ''protected'' area, but most systems have many commands
      to let users modify the protected area, and it''s not always clear what their
      limits are.  Best to avoid using this function altogether (CWE-676, CWE-120)'
    primary_identifier: flawfinder.getpw-1
    secondary_identifiers:
    - name: Flawfinder - getpw
      type: flawfinder_func_name
      value: getpw
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.getpw-1
    shortlink: https://sg.run/EO08
    semgrep.dev:
      rule:
        rule_id: WAUP03
        version_id: X0TEp4
        url: https://semgrep.dev/playground/r/X0TEp4/gitlab.flawfinder.getpw-1
        origin: custom
  pattern: getpw(...)
  severity: ERROR
- id: gitlab.flawfinder.gets-1._getts-1
  languages:
  - c
  message: |
    Use fgets() instead.
  metadata:
    cwe: 'CWE-120'
    shortDescription: 'Does not check for buffer overflows (CWE-120, CWE-20)'
    primary_identifier: flawfinder.gets-1._getts-1
    secondary_identifiers:
    - name: Flawfinder - gets
      type: flawfinder_func_name
      value: gets
    - name: Flawfinder - _getts
      type: flawfinder_func_name
      value: _getts
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.gets-1._getts-1
    shortlink: https://sg.run/7G7v
    semgrep.dev:
      rule:
        rule_id: 0oUJjK
        version_id: jQTWp1
        url: https://semgrep.dev/playground/r/jQTWp1/gitlab.flawfinder.gets-1._getts-1
        origin: custom
  pattern-either:
  - pattern: gets(...)
  - pattern: _getts(...)
  severity: ERROR
- id: gitlab.flawfinder.getwd-1
  languages:
  - c
  message: |
    Use getcwd instead.
  metadata:
    cwe: 'CWE-120'
    shortDescription: 'This does not protect against buffer overflows by itself, so use
      with caution (CWE-120, CWE-20)'
    primary_identifier: flawfinder.getwd-1
    secondary_identifiers:
    - name: Flawfinder - getwd
      type: flawfinder_func_name
      value: getwd
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.getwd-1
    shortlink: https://sg.run/L8zL
    semgrep.dev:
      rule:
        rule_id: KxUY1o
        version_id: 1QTBn3
        url: https://semgrep.dev/playground/r/1QTBn3/gitlab.flawfinder.getwd-1
        origin: custom
  pattern: getwd(...)
  severity: WARNING
- id: gitlab.find_sec_bugs.URLCONNECTION_SSRF_FD-1
  pattern-either:
  - patterns:
    - pattern: new URL(...). ... .connect()
    - pattern-not: new URL("..."). ... .connect()
  - patterns:
    - pattern: new URL(...). ... .GetContent(...)
    - pattern-not: new URL("..."). ... .GetContent(...)
  - patterns:
    - pattern: new URL(...). ... .openConnection(...)
    - pattern-not: new URL("..."). ... .openConnection(...)
  - patterns:
    - pattern: new URL(...). ... .openStream(...)
    - pattern-not: new URL("..."). ... .openStream(...)
  - patterns:
    - pattern: new URL(...). ... .getContent(...)
    - pattern-not: new URL("..."). ... .getContent(...)
  languages:
  - java
  message: |
    Server-Side Request Forgery occur when a web server executes a request to a
    user supplied destination parameter that is not validated. Such vulnerabilities
    could allow an attacker to access internal services or to launch attacks from
    your web server.
  metadata:
    category: security
    cwe: 'CWE-918'
    shortDescription: 'Server-Side Request Forgery (SSRF)'
    primary_identifier: find_sec_bugs.URLCONNECTION_SSRF_FD-1
    secondary_identifiers:
    - name: Find Security Bugs-URLCONNECTION_SSRF_FD
      type: find_sec_bugs_type
      value: URLCONNECTION_SSRF_FD
    license: MIT
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.URLCONNECTION_SSRF_FD-1
    shortlink: https://sg.run/Njl7
    semgrep.dev:
      rule:
        rule_id: pKUblx
        version_id: kbTprQ
        url: https://semgrep.dev/playground/r/kbTprQ/gitlab.find_sec_bugs.URLCONNECTION_SSRF_FD-1
        origin: custom
  severity: ERROR
- id: gitlab.find_sec_bugs.BAD_HEXA_CONVERSION-1
  patterns:
  - pattern: |
      $B_ARR = (java.security.MessageDigest $MD).digest(...);
      ...
      for(...) {
        ...
        Integer.toHexString(...);
      }
  languages:
  - java
  message: |
    When converting a byte array containing a hash signature to a human readable string, a
    conversion mistake can be made if the array is read byte by byte.
  metadata:
    cwe: 'CWE-704'
    shortDescription: 'Incorrect Type Conversion or Cast'
    category: security
    confidence: HIGH
    primary_identifier: find_sec_bugs.BAD_HEXA_CONVERSION-1
    secondary_identifiers:
    - name: Find Security Bugs-BAD_HEXA_CONVERSION
      type: find_sec_bugs_type
      value: BAD_HEXA_CONVERSION
    license: MIT
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.BAD_HEXA_CONVERSION-1
    shortlink: https://sg.run/kD4K
    semgrep.dev:
      rule:
        rule_id: 2ZUd06
        version_id: w8Tr4g
        url: https://semgrep.dev/playground/r/w8Tr4g/gitlab.find_sec_bugs.BAD_HEXA_CONVERSION-1
        origin: custom
  severity: WARNING
- id: gitlab.find_sec_bugs.XSS_REQUEST_WRAPPER-1
  patterns:
  - pattern-inside: |
      class $CLASS extends HttpServletRequestWrapper {
      ...
      }
  - pattern: stripXSS(...) { ... }
  languages:
  - java
  message: |
    Avoid using custom XSS filtering. Please use standard sanitization functions.
  metadata:
    category: security
    cwe: 'CWE-79'
    shortDescription: 'Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    primary_identifier: find_sec_bugs.XSS_REQUEST_WRAPPER-1
    secondary_identifiers:
    - name: Find Security Bugs-XSS_REQUEST_WRAPPER
      type: find_sec_bugs_type
      value: XSS_REQUEST_WRAPPER
    license: MIT
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.XSS_REQUEST_WRAPPER-1
    shortlink: https://sg.run/gG7n
    semgrep.dev:
      rule:
        rule_id: eqUZdN
        version_id: QkTDBO
        url: https://semgrep.dev/playground/r/QkTDBO/gitlab.find_sec_bugs.XSS_REQUEST_WRAPPER-1
        origin: custom
  severity: INFO
- id: gitlab.find_sec_bugs.WICKET_XSS1-1
  patterns:
  - pattern: (org.apache.wicket.markup.html.basic.Label $X).setEscapeModelStrings(false);
  languages:
  - java
  message: |
    Disabling HTML escaping put the application at risk for Cross-Site Scripting (XSS).
  metadata:
    category: security
    cwe: 'CWE-79'
    shortDescription: 'Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    primary_identifier: find_sec_bugs.WICKET_XSS1-1
    secondary_identifiers:
    - name: Find Security Bugs-WICKET_XSS1
      type: find_sec_bugs_type
      value: WICKET_XSS1
    license: MIT
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.WICKET_XSS1-1
    shortlink: https://sg.run/QJoP
    semgrep.dev:
      rule:
        rule_id: v8Uvkz
        version_id: 3ZTn7N
        url: https://semgrep.dev/playground/r/3ZTn7N/gitlab.find_sec_bugs.WICKET_XSS1-1
        origin: custom
  severity: WARNING
- id: gitlab.find_sec_bugs.XSS_REQUEST_PARAMETER_TO_SERVLET_WRITER-1
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-inside: $FUNC(..., HttpServletRequest $REQ, ...) {...}
    - pattern: $REQ.getParameter(...);
  pattern-sanitizers:
  - patterns:
    - pattern-inside: org.owasp.encoder.Encode.forHtml($TAINTED);
    - pattern: $TAINTED
  pattern-sinks:
  - patterns:
    - pattern-inside: $FUNC(..., HttpServletResponse $RES, ...) {...}
    - pattern-inside: |
        $WRITER = $RES.getWriter();
        ...
    - pattern: $WRITER.write($DATA,...);
    - pattern: $DATA
  - patterns:
    - pattern-inside: $FUNC(..., HttpServletResponse $RES, ...) {...}
    - pattern: $RES.getWriter().write($DATA,...);
    - pattern: $DATA
  message: |
    Servlet reflected cross site scripting vulnerability
  languages:
  - java
  severity: WARNING
  metadata:
    cwe: 'CWE-79'
    shortDescription: 'Improper Neutralization of Input During Web Page Generation'
    category: security
    technology:
    - java
    primary_identifier: find_sec_bugs.XSS_REQUEST_PARAMETER_TO_SERVLET_WRITER-1
    secondary_identifiers:
    - name: Find Security Bugs-XSS_REQUEST_PARAMETER_TO_SERVLET_WRITER
      type: find_sec_bugs_type
      value: XSS_REQUEST_PARAMETER_TO_SERVLET_WRITER
    license: MIT
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.XSS_REQUEST_PARAMETER_TO_SERVLET_WRITER-1
    shortlink: https://sg.run/3Qkb
    semgrep.dev:
      rule:
        rule_id: d8U6Rg
        version_id: 44Tpxn
        url: https://semgrep.dev/playground/r/44Tpxn/gitlab.find_sec_bugs.XSS_REQUEST_PARAMETER_TO_SERVLET_WRITER-1
        origin: custom
- id: gitlab.find_sec_bugs.XSS_SERVLET-1
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-inside: $FUNC(..., HttpServletRequest $REQ, ...) {...}
    - pattern: $REQ.getParameter(...);
  pattern-sanitizers:
  - patterns:
    - pattern-inside: org.owasp.encoder.Encode.forHtml($TAINTED);
    - pattern: $TAINTED
  pattern-sinks:
  - patterns:
    - pattern-inside: $FUNC(..., HttpServletResponse $RES, ...) {...}
    - pattern-inside: |
        $WRITER = $RES.getWriter();
        ...
    - pattern: $WRITER.write($DATA,...);
    - pattern: $DATA
  - patterns:
    - pattern-inside: $FUNC(..., HttpServletResponse $RES, ...) {...}
    - pattern: $RES.getWriter().write($DATA,...);
    - pattern: $DATA
  message: |
    A potential XSS was found. It could be used to execute unwanted JavaScript in a
    client's browser.
  languages:
  - java
  metadata:
    cwe: 'CWE-79'
    shortDescription: 'Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    category: security
    primary_identifier: find_sec_bugs.XSS_SERVLET-1
    secondary_identifiers:
    - name: Find Security Bugs-XSS_SERVLET
      type: find_sec_bugs_type
      value: XSS_SERVLET
    license: MIT
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.XSS_SERVLET-1
    shortlink: https://sg.run/4kwE
    semgrep.dev:
      rule:
        rule_id: ZqUeEA
        version_id: PkTvEp
        url: https://semgrep.dev/playground/r/PkTvEp/gitlab.find_sec_bugs.XSS_SERVLET-1
        origin: custom
  severity: WARNING
- id: gitlab.find_sec_bugs.XSS_SERVLET-2.XSS_SERVLET_PARAMETER-1
  pattern-either:
  - patterns:
    - pattern-inside: $TYPE $FUNC(..., ServletRequest $REQ, ...) { ... }
    - pattern-either:
      - pattern: $REQ.getParameter(...);
      - pattern: $REQ.getParameterValues();
      - pattern: $REQ.getParameterMap(...);
      - pattern: $REQ.getParameterNames();
  - patterns:
    - pattern-inside: $TYPE $FUNC(..., HttpServletRequest $SREQ, ...) { ... }
    - pattern-either:
      - pattern: $SREQ.getRequestedSessionId();
      - pattern: $SREQ.getQueryString();
      - pattern: $SREQ.getParameter(...);
      - pattern: $SREQ.getParameterValues();
      - pattern: $SREQ.getParameterMap(...);
      - pattern: $SREQ.getParameterNames();
      - patterns:
        - pattern: $SREQ.getHeader($HEADER);
        - metavariable-regex:
            metavariable: $HEADER
            regex: (?i)(Host|Referer|User-Agent)
  message: |
    The Servlet can read GET and POST parameters from various methods. The value obtained should be
    considered unsafe. You may need to validate or sanitize those values before passing them to
    sensitive APIs
  languages:
  - java
  severity: WARNING
  metadata:
    cwe: 'CWE-20'
    shortDescription: 'Improper Input Validation'
    category: security
    technology:
    - java
    primary_identifier: find_sec_bugs.XSS_SERVLET-2.XSS_SERVLET_PARAMETER-1
    secondary_identifiers:
    - name: Find Security Bugs-XSS_SERVLET
      type: find_sec_bugs_type
      value: XSS_SERVLET
    - name: Find Security Bugs-XSS_SERVLET_PARAMETER
      type: find_sec_bugs_type
      value: XSS_SERVLET_PARAMETER
    license: MIT
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.XSS_SERVLET-2.XSS_SERVLET_PARAMETER-1
    shortlink: https://sg.run/PP6q
    semgrep.dev:
      rule:
        rule_id: nJUneR
        version_id: JdTb2q
        url: https://semgrep.dev/playground/r/JdTb2q/gitlab.find_sec_bugs.XSS_SERVLET-2.XSS_SERVLET_PARAMETER-1
        origin: custom
- id: gitlab.find_sec_bugs.XXE_SAXPARSER-1
  patterns:
  - pattern-inside: |
      $SF = SAXParserFactory.newInstance();
      ...
  - pattern-not-inside: |
      $SF.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);
      ...
  - pattern-not-inside: |
      $SF.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true);
      ...
  - pattern-inside: |
      $P = $SFP.newSAXParser();
      ...
  - pattern: $P.parse(...);
  languages:
  - java
  message: |
    XML External Entity (XXE) attacks can occur when an XML parser supports XML
    entities while processing XML received from an untrusted source.
  metadata:
    category: security
    cwe: 'CWE-611'
    shortDescription: 'Improper Restriction of XML External Entity Reference (''XXE'')'
    primary_identifier: find_sec_bugs.XXE_SAXPARSER-1
    secondary_identifiers:
    - name: Find Security Bugs-XXE_SAXPARSER
      type: find_sec_bugs_type
      value: XXE_SAXPARSER
    license: MIT
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.XXE_SAXPARSER-1
    shortlink: https://sg.run/JwWQ
    semgrep.dev:
      rule:
        rule_id: EwU1kG
        version_id: 5PTjB5
        url: https://semgrep.dev/playground/r/5PTjB5/gitlab.find_sec_bugs.XXE_SAXPARSER-1
        origin: custom
  severity: ERROR
- id: gitlab.find_sec_bugs.XXE_DTD_TRANSFORM_FACTORY-1.XXE_XSLT_TRANSFORM_FACTORY-1
  patterns:
  - pattern-inside: import javax.xml.transform.*; ...
  - pattern-inside: |
      $T = $FACT.newTransformer();
      ...
  - pattern-not-inside: |
      $T.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, "");
      ...
  - pattern-not-inside: |
      $T.setAttribute(XMLConstants.ACCESS_EXTERNAL_SCHEMA, "");
      ...
  - pattern-not-inside: |
      $T.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);
      ...
  - pattern: $T.transform(...)
  languages:
  - java
  message: |
    XML External Entity (XXE) attacks can occur when an XML parser supports XML
    entities while processing XML received from an untrusted source.
  metadata:
    category: security
    cwe: 'CWE-611'
    shortDescription: 'Improper Restriction of XML External Entity Reference (''XXE'')'
    primary_identifier: find_sec_bugs.XXE_DTD_TRANSFORM_FACTORY-1.XXE_XSLT_TRANSFORM_FACTORY-1
    secondary_identifiers:
    - name: Find Security Bugs-XXE_DTD_TRANSFORM_FACTORY
      type: find_sec_bugs_type
      value: XXE_DTD_TRANSFORM_FACTORY
    - name: Find Security Bugs-XXE_XSLT_TRANSFORM_FACTORY
      type: find_sec_bugs_type
      value: XXE_XSLT_TRANSFORM_FACTORY
    license: MIT
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.XXE_DTD_TRANSFORM_FACTORY-1.XXE_XSLT_TRANSFORM_FACTORY-1
    shortlink: https://sg.run/5Zx3
    semgrep.dev:
      rule:
        rule_id: 7KUb72
        version_id: GxTy49
        url: https://semgrep.dev/playground/r/GxTy49/gitlab.find_sec_bugs.XXE_DTD_TRANSFORM_FACTORY-1.XXE_XSLT_TRANSFORM_FACTORY-1
        origin: custom
  severity: ERROR
- id: gitlab.find_sec_bugs.XXE_XMLREADER-1
  patterns:
  - pattern-inside: |
      $R = XMLReaderFactory.createXMLReader();
      ...
  - pattern-not-inside: |
      $R.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);
      ...
  - pattern: $R.parse(...);
  languages:
  - java
  message: |
    XML External Entity (XXE) attacks can occur when an XML parser supports XML
    entities while processing XML received from an untrusted source.
  metadata:
    category: security
    cwe: 'CWE-611'
    shortDescription: 'Improper Restriction of XML External Entity Reference (''XXE'')'
    primary_identifier: find_sec_bugs.XXE_XMLREADER-1
    secondary_identifiers:
    - name: Find Security Bugs-XXE_XMLREADER
      type: find_sec_bugs_type
      value: XXE_XMLREADER
    license: MIT
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.XXE_XMLREADER-1
    shortlink: https://sg.run/GbAn
    semgrep.dev:
      rule:
        rule_id: L1UzY1
        version_id: RGT7dO
        url: https://semgrep.dev/playground/r/RGT7dO/gitlab.find_sec_bugs.XXE_XMLREADER-1
        origin: custom
  severity: ERROR
- id: gitlab.find_sec_bugs.XXE_XMLSTREAMREADER-1
  patterns:
  - pattern-inside: |
      $SF = XMLInputFactory.newFactory();
      ...
  - pattern-not-inside: |
      $SF.setProperty(XMLInputFactory.SUPPORT_DTD, false);
      ...
  - pattern-not-inside: |
      $SF.setProperty(XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES, false);
      ...
  - pattern-not-inside: |
      $SF.setProperty(XMLInputFactory.SUPPORT_DTD, Boolean.FALSE);
      ...
  - pattern-not-inside: |
      $SF.setProperty(XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES, Boolean.FALSE);
      ...
  - pattern: $SF.createXMLStreamReader(...)
  languages:
  - java
  message: |
    XML External Entity (XXE) attacks can occur when an XML parser supports XML
    entities while processing XML received from an untrusted source.
  metadata:
    category: security
    cwe: 'CWE-611'
    shortDescription: 'Improper Restriction of XML External Entity Reference (''XXE'')'
    primary_identifier: find_sec_bugs.XXE_XMLSTREAMREADER-1
    secondary_identifiers:
    - name: Find Security Bugs-XXE_XMLSTREAMREADER
      type: find_sec_bugs_type
      value: XXE_XMLSTREAMREADER
    license: MIT
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.XXE_XMLSTREAMREADER-1
    shortlink: https://sg.run/R5zK
    semgrep.dev:
      rule:
        rule_id: 8GUv2b
        version_id: A8T8x9
        url: https://semgrep.dev/playground/r/A8T8x9/gitlab.find_sec_bugs.XXE_XMLSTREAMREADER-1
        origin: custom
  severity: ERROR
- id: gitlab.find_sec_bugs.XXE_XPATH-1.XXE_DOCUMENT-1
  patterns:
  - pattern-inside: |
      $DF = df.newDocumentBuilder();
      ...
  - pattern-not-inside: |
      $DF.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, "");
      ...
  - pattern-not-inside: |
      $DF.setAttribute(XMLConstants.ACCESS_EXTERNAL_SCHEMA, "");
      ...
  - pattern-not-inside: |
      $DF.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);
      ...
  - pattern-not-inside: |
      $DF.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true);
      ...
  - pattern: $SF.newDocumentBuilder(...)
  languages:
  - java
  message: |
    XML External Entity (XXE) attacks can occur when an XML parser supports XML
    entities while processing XML received from an untrusted source.
  metadata:
    category: security
    cwe: 'CWE-611'
    shortDescription: 'Improper Restriction of XML External Entity Reference (''XXE'')'
    primary_identifier: find_sec_bugs.XXE_XPATH-1.XXE_DOCUMENT-1
    secondary_identifiers:
    - name: Find Security Bugs-XXE_XPATH
      type: find_sec_bugs_type
      value: XXE_XPATH
    - name: Find Security Bugs-XXE_DOCUMENT
      type: find_sec_bugs_type
      value: XXE_DOCUMENT
    license: MIT
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.XXE_XPATH-1.XXE_DOCUMENT-1
    shortlink: https://sg.run/AL44
    semgrep.dev:
      rule:
        rule_id: gxUk44
        version_id: BjT5ox
        url: https://semgrep.dev/playground/r/BjT5ox/gitlab.find_sec_bugs.XXE_XPATH-1.XXE_DOCUMENT-1
        origin: custom
  severity: ERROR
- id: gitlab.flawfinder.RpcImpersonateClient-1.ImpersonateLoggedOnUser-1.CoImpersonateClient-1.ImpersonateNamedPipeClient-1.ImpersonateDdeClientWindow-1.ImpersonateSecurityContext-1.SetThreadToken-1
  languages:
  - c
  message: |
    Make sure the return value is checked, and do not continue if a failure is reported.
  metadata:
    cwe: 'CWE-250'
    shortDescription: 'If this call fails, the program could fail to drop heightened privileges
      (CWE-250)'
    primary_identifier: flawfinder.RpcImpersonateClient-1.ImpersonateLoggedOnUser-1.CoImpersonateClient-1.ImpersonateNamedPipeClient-1.ImpersonateDdeClientWindow-1.ImpersonateSecurityContext-1.SetThreadToken-1
    secondary_identifiers:
    - name: Flawfinder - RpcImpersonateClient
      type: flawfinder_func_name
      value: RpcImpersonateClient
    - name: Flawfinder - ImpersonateLoggedOnUser
      type: flawfinder_func_name
      value: ImpersonateLoggedOnUser
    - name: Flawfinder - CoImpersonateClient
      type: flawfinder_func_name
      value: CoImpersonateClient
    - name: Flawfinder - ImpersonateNamedPipeClient
      type: flawfinder_func_name
      value: ImpersonateNamedPipeClient
    - name: Flawfinder - ImpersonateDdeClientWindow
      type: flawfinder_func_name
      value: ImpersonateDdeClientWindow
    - name: Flawfinder - ImpersonateSecurityContext
      type: flawfinder_func_name
      value: ImpersonateSecurityContext
    - name: Flawfinder - SetThreadToken
      type: flawfinder_func_name
      value: SetThreadToken
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.RpcImpersonateClient-1.ImpersonateLoggedOnUser-1.CoImpersonateClient-1.ImpersonateNamedPipeClient-1.ImpersonateDdeClientWindow-1.ImpersonateSecurityContext-1.SetThreadToken-1
    shortlink: https://sg.run/rk96
    semgrep.dev:
      rule:
        rule_id: 0oUJjL
        version_id: DkTJL9
        url: https://semgrep.dev/playground/r/DkTJL9/gitlab.flawfinder.RpcImpersonateClient-1.ImpersonateLoggedOnUser-1.CoImpersonateClient-1.ImpersonateNamedPipeClient-1.ImpersonateDdeClientWindow-1.ImpersonateSecurityContext-1.SetThreadToken-1
        origin: custom
  pattern-either:
  - pattern: RpcImpersonateClient(...)
  - pattern: ImpersonateLoggedOnUser(...)
  - pattern: CoImpersonateClient(...)
  - pattern: ImpersonateNamedPipeClient(...)
  - pattern: ImpersonateDdeClientWindow(...)
  - pattern: ImpersonateSecurityContext(...)
  - pattern: SetThreadToken(...)
  severity: ERROR
- id: gitlab.flawfinder.umask-1
  languages:
  - c
  message: |
    Ensure that umask is given most restrictive possible setting (e.g.,
    066 or 077)
  metadata:
    cwe: 'CWE-732'
    shortDescription: 'Ensure that umask is given most restrictive possible setting (e.g.,
      066 or 077) (CWE-732)'
    primary_identifier: flawfinder.umask-1
    secondary_identifiers:
    - name: Flawfinder - umask
      type: flawfinder_func_name
      value: umask
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.umask-1
    shortlink: https://sg.run/brBZ
    semgrep.dev:
      rule:
        rule_id: KxUY1n
        version_id: WrT9go
        url: https://semgrep.dev/playground/r/WrT9go/gitlab.flawfinder.umask-1
        origin: custom
  pattern: umask(...)
  severity: INFO
- id: gitlab.flawfinder.strcat-1
  languages:
  - c
  message: |
    Consider using strcat_s, strncat, strlcat, or snprintf (warning: strncat is easily misused).
  metadata:
    cwe: 'CWE-120'
    shortDescription: 'Does not check for buffer overflows when concatenating to destination
      [MS-banned] (CWE-120)'
    primary_identifier: flawfinder.strcat-1
    secondary_identifiers:
    - name: Flawfinder - strcat
      type: flawfinder_func_name
      value: strcat
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.strcat-1
    shortlink: https://sg.run/GwqB
    semgrep.dev:
      rule:
        rule_id: X5U7re
        version_id: O9Tzr2
        url: https://semgrep.dev/playground/r/O9Tzr2/gitlab.flawfinder.strcat-1
        origin: custom
  pattern: strcat(...)
  severity: ERROR
- id: gitlab.flawfinder.strccpy-1.strcadd-1
  languages:
  - c
  message: |
    Ensure that destination buffer is sufficiently large.
  metadata:
    cwe: 'CWE-120'
    shortDescription: 'Subject to buffer overflow if buffer is not as big as claimed (CWE-120)'
    primary_identifier: flawfinder.strccpy-1.strcadd-1
    secondary_identifiers:
    - name: Flawfinder - strccpy
      type: flawfinder_func_name
      value: strccpy
    - name: Flawfinder - strcadd
      type: flawfinder_func_name
      value: strcadd
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.strccpy-1.strcadd-1
    shortlink: https://sg.run/RP9E
    semgrep.dev:
      rule:
        rule_id: j2URoA
        version_id: e1T5wo
        url: https://semgrep.dev/playground/r/e1T5wo/gitlab.flawfinder.strccpy-1.strcadd-1
        origin: custom
  pattern-either:
  - pattern: strccpy(...)
  - pattern: strcadd(...)
  severity: INFO
- id: gitlab.flawfinder.strcpy-1
  languages:
  - c
  message: |
    Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused).
  metadata:
    cwe: 'CWE-120'
    shortDescription: 'Does not check for buffer overflows when copying to destination
      [MS-banned] (CWE-120)'
    primary_identifier: flawfinder.strcpy-1
    secondary_identifiers:
    - name: Flawfinder - strcpy
      type: flawfinder_func_name
      value: strcpy
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.strcpy-1
    shortlink: https://sg.run/AwAg
    semgrep.dev:
      rule:
        rule_id: 10Ue1w
        version_id: vdTgJE
        url: https://semgrep.dev/playground/r/vdTgJE/gitlab.flawfinder.strcpy-1
        origin: custom
  pattern: strcpy(...)
  severity: ERROR
- id: gitlab.flawfinder.strcpyA-1.strcpyW-1.StrCpy-1.StrCpyA-1.lstrcpyA-1.lstrcpyW-1._tccpy-1._mbccpy-1._ftcscpy-1._mbsncpy-1.StrCpyN-1.StrCpyNA-1.StrCpyNW-1.StrNCpy-1.strcpynA-1.StrNCpyA-1.StrNCpyW-1.lstrcpynA-1.lstrcpynW-1
  languages:
  - c
  message: |
    Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused).
  metadata:
    cwe: 'CWE-120'
    shortDescription: 'Does not check for buffer overflows when copying to destination
      [MS-banned] (CWE-120)'
    primary_identifier: flawfinder.strcpyA-1.strcpyW-1.StrCpy-1.StrCpyA-1.lstrcpyA-1.lstrcpyW-1._tccpy-1._mbccpy-1._ftcscpy-1._mbsncpy-1.StrCpyN-1.StrCpyNA-1.StrCpyNW-1.StrNCpy-1.strcpynA-1.StrNCpyA-1.StrNCpyW-1.lstrcpynA-1.lstrcpynW-1
    secondary_identifiers:
    - name: Flawfinder - strcpyA
      type: flawfinder_func_name
      value: strcpyA
    - name: Flawfinder - strcpyW
      type: flawfinder_func_name
      value: strcpyW
    - name: Flawfinder - StrCpy
      type: flawfinder_func_name
      value: StrCpy
    - name: Flawfinder - StrCpyA
      type: flawfinder_func_name
      value: StrCpyA
    - name: Flawfinder - lstrcpyA
      type: flawfinder_func_name
      value: lstrcpyA
    - name: Flawfinder - lstrcpyW
      type: flawfinder_func_name
      value: lstrcpyW
    - name: Flawfinder - _tccpy
      type: flawfinder_func_name
      value: _tccpy
    - name: Flawfinder - _mbccpy
      type: flawfinder_func_name
      value: _mbccpy
    - name: Flawfinder - _ftcscpy
      type: flawfinder_func_name
      value: _ftcscpy
    - name: Flawfinder - _mbsncpy
      type: flawfinder_func_name
      value: _mbsncpy
    - name: Flawfinder - StrCpyN
      type: flawfinder_func_name
      value: StrCpyN
    - name: Flawfinder - StrCpyNA
      type: flawfinder_func_name
      value: StrCpyNA
    - name: Flawfinder - StrCpyNW
      type: flawfinder_func_name
      value: StrCpyNW
    - name: Flawfinder - StrNCpy
      type: flawfinder_func_name
      value: StrNCpy
    - name: Flawfinder - strcpynA
      type: flawfinder_func_name
      value: strcpynA
    - name: Flawfinder - StrNCpyA
      type: flawfinder_func_name
      value: StrNCpyA
    - name: Flawfinder - StrNCpyW
      type: flawfinder_func_name
      value: StrNCpyW
    - name: Flawfinder - lstrcpynA
      type: flawfinder_func_name
      value: lstrcpynA
    - name: Flawfinder - lstrcpynW
      type: flawfinder_func_name
      value: lstrcpynW
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.strcpyA-1.strcpyW-1.StrCpy-1.StrCpyA-1.lstrcpyA-1.lstrcpyW-1._tccpy-1._mbccpy-1._ftcscpy-1._mbsncpy-1.StrCpyN-1.StrCpyNA-1.StrCpyNW-1.StrNCpy-1.strcpynA-1.StrNCpyA-1.StrNCpyW-1.lstrcpynA-1.lstrcpynW-1
    shortlink: https://sg.run/BLBb
    semgrep.dev:
      rule:
        rule_id: 9AUkxG
        version_id: d6T1E1
        url: https://semgrep.dev/playground/r/d6T1E1/gitlab.flawfinder.strcpyA-1.strcpyW-1.StrCpy-1.StrCpyA-1.lstrcpyA-1.lstrcpyW-1._tccpy-1._mbccpy-1._ftcscpy-1._mbsncpy-1.StrCpyN-1.StrCpyNA-1.StrCpyNW-1.StrNCpy-1.strcpynA-1.StrNCpyA-1.StrNCpyW-1.lstrcpynA-1.lstrcpynW-1
        origin: custom
  pattern-either:
  - pattern: strcpyA(...)
  - pattern: strcpyW(...)
  - pattern: StrCpy(...)
  - pattern: StrCpyA(...)
  - pattern: lstrcpyA(...)
  - pattern: lstrcpyW(...)
  - pattern: _tccpy(...)
  - pattern: _mbccpy(...)
  - pattern: _ftcscpy(...)
  - pattern: _mbsncpy(...)
  - pattern: StrCpyN(...)
  - pattern: StrCpyNA(...)
  - pattern: StrCpyNW(...)
  - pattern: StrNCpy(...)
  - pattern: strcpynA(...)
  - pattern: StrNCpyA(...)
  - pattern: StrNCpyW(...)
  - pattern: lstrcpynA(...)
  - pattern: lstrcpynW(...)
  severity: ERROR
- id: gitlab.flawfinder.streadd-1.strecpy-1
  languages:
  - c
  message: |
    Ensure the destination has 4 times the size of the source, to leave room for expansion.
  metadata:
    cwe: 'CWE-120'
    shortDescription: 'This function does not protect against buffer overflows (CWE-120)'
    primary_identifier: flawfinder.streadd-1.strecpy-1
    secondary_identifiers:
    - name: Flawfinder - streadd
      type: flawfinder_func_name
      value: streadd
    - name: Flawfinder - strecpy
      type: flawfinder_func_name
      value: strecpy
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.streadd-1.strecpy-1
    shortlink: https://sg.run/DwW2
    semgrep.dev:
      rule:
        rule_id: yyUyKE
        version_id: ZRTnJ0
        url: https://semgrep.dev/playground/r/ZRTnJ0/gitlab.flawfinder.streadd-1.strecpy-1
        origin: custom
  pattern-either:
  - pattern: streadd(...)
  - pattern: strecpy(...)
  severity: ERROR
- id: gitlab.flawfinder.strlen-1.wcslen-1._tcslen-1._mbslen-1
  languages:
  - c
  message: |
    Does not handle strings that are not \\0-terminated.
  metadata:
    cwe: 'CWE-126'
    shortDescription: 'Does not handle strings that are not \0-terminated; if given one
      it may perform an over-read (it could cause a crash if unprotected) (CWE-126)'
    primary_identifier: flawfinder.strlen-1.wcslen-1._tcslen-1._mbslen-1
    secondary_identifiers:
    - name: Flawfinder - strlen
      type: flawfinder_func_name
      value: strlen
    - name: Flawfinder - wcslen
      type: flawfinder_func_name
      value: wcslen
    - name: Flawfinder - _tcslen
      type: flawfinder_func_name
      value: _tcslen
    - name: Flawfinder - _mbslen
      type: flawfinder_func_name
      value: _mbslen
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.strlen-1.wcslen-1._tcslen-1._mbslen-1
    shortlink: https://sg.run/WOky
    semgrep.dev:
      rule:
        rule_id: r6U9Qq
        version_id: nWTjl3
        url: https://semgrep.dev/playground/r/nWTjl3/gitlab.flawfinder.strlen-1.wcslen-1._tcslen-1._mbslen-1
        origin: custom
  pattern-either:
  - pattern: strlen(...)
  - pattern: wcslen(...)
  - pattern: _tcslen(...)
  - pattern: _mbslen(...)
  severity: INFO
- id: gitlab.flawfinder.strncat-1
  languages:
  - c
  message: |
    Consider strcat_s, strlcat, snprintf, or automatically resizing strings.
  metadata:
    cwe: 'CWE-120'
    shortDescription: 'Easily used incorrectly (e.g., incorrectly computing the correct
      maximum size to add) [MS-banned] (CWE-120)'
    primary_identifier: flawfinder.strncat-1
    secondary_identifiers:
    - name: Flawfinder - strncat
      type: flawfinder_func_name
      value: strncat
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.strncat-1
    shortlink: https://sg.run/057k
    semgrep.dev:
      rule:
        rule_id: bwUN2p
        version_id: ExTObz
        url: https://semgrep.dev/playground/r/ExTObz/gitlab.flawfinder.strncat-1
        origin: custom
  pattern: strncat(...)
  severity: INFO
- id: gitlab.flawfinder.strncpy-1
  languages:
  - c
  message: |
    Easily used incorrectly
  metadata:
    cwe: 'CWE-120'
    shortDescription: 'Doesn''t always \0-terminate or check for invalid pointers [MS-banned]
      (CWE-120)'
    primary_identifier: flawfinder.strncpy-1
    secondary_identifiers:
    - name: Flawfinder - strncpy
      type: flawfinder_func_name
      value: strncpy
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.strncpy-1
    shortlink: https://sg.run/K8oP
    semgrep.dev:
      rule:
        rule_id: NbUY74
        version_id: 7ZTdw4
        url: https://semgrep.dev/playground/r/7ZTdw4/gitlab.flawfinder.strncpy-1
        origin: custom
  pattern: strncpy(...)
  severity: INFO
- id: gitlab.flawfinder.strtrns-1
  languages:
  - c
  message: |
    Ensure that destination is at least as long as the source.
  metadata:
    cwe: 'CWE-120'
    shortDescription: 'This function does not protect against buffer overflows (CWE-120)'
    primary_identifier: flawfinder.strtrns-1
    secondary_identifiers:
    - name: Flawfinder - strtrns
      type: flawfinder_func_name
      value: strtrns
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.strtrns-1
    shortlink: https://sg.run/qq11
    semgrep.dev:
      rule:
        rule_id: kxU811
        version_id: LjTOJb
        url: https://semgrep.dev/playground/r/LjTOJb/gitlab.flawfinder.strtrns-1
        origin: custom
  pattern: strtrns(...)
  severity: WARNING
- id: gitlab.flawfinder.EVP_des_ecb-1.EVP_des_cbc-1.EVP_des_cfb-1.EVP_des_ofb-1.EVP_desx_cbc-1
  languages:
  - c
  message: |
    Use a different patent-free encryption algorithm with a larger keysize, such as 3DES or AES.
  metadata:
    cwe: 'CWE-327'
    shortDescription: 'DES only supports a 56-bit keysize, which is too small given today''s
      computers (CWE-327)'
    primary_identifier: flawfinder.EVP_des_ecb-1.EVP_des_cbc-1.EVP_des_cfb-1.EVP_des_ofb-1.EVP_desx_cbc-1
    secondary_identifiers:
    - name: Flawfinder - EVP_des_ecb
      type: flawfinder_func_name
      value: EVP_des_ecb
    - name: Flawfinder - EVP_des_cbc
      type: flawfinder_func_name
      value: EVP_des_cbc
    - name: Flawfinder - EVP_des_cfb
      type: flawfinder_func_name
      value: EVP_des_cfb
    - name: Flawfinder - EVP_des_ofb
      type: flawfinder_func_name
      value: EVP_des_ofb
    - name: Flawfinder - EVP_desx_cbc
      type: flawfinder_func_name
      value: EVP_desx_cbc
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.EVP_des_ecb-1.EVP_des_cbc-1.EVP_des_cfb-1.EVP_des_ofb-1.EVP_desx_cbc-1
    shortlink: https://sg.run/lxzL
    semgrep.dev:
      rule:
        rule_id: wdUGO7
        version_id: 8KTX0l
        url: https://semgrep.dev/playground/r/8KTX0l/gitlab.flawfinder.EVP_des_ecb-1.EVP_des_cbc-1.EVP_des_cfb-1.EVP_des_ofb-1.EVP_desx_cbc-1
        origin: custom
  pattern-either:
  - pattern: EVP_des_ecb(...)
  - pattern: EVP_des_cbc(...)
  - pattern: EVP_des_cfb(...)
  - pattern: EVP_des_ofb(...)
  - pattern: EVP_desx_cbc(...)
  severity: ERROR
- id: gitlab.flawfinder.EVP_rc4_40-1.EVP_rc2_40_cbc-1.EVP_rc2_64_cbc-1
  languages:
  - c
  message: |
    Use a different patent-free encryption algorithm with a larger keysize, such as 3DES or AES.
  metadata:
    cwe: 'CWE-327'
    shortDescription: 'These keysizes are too small given today''s computers (CWE-327)'
    primary_identifier: flawfinder.EVP_rc4_40-1.EVP_rc2_40_cbc-1.EVP_rc2_64_cbc-1
    secondary_identifiers:
    - name: Flawfinder - EVP_rc4_40
      type: flawfinder_func_name
      value: EVP_rc4_40
    - name: Flawfinder - EVP_rc2_40_cbc
      type: flawfinder_func_name
      value: EVP_rc2_40_cbc
    - name: Flawfinder - EVP_rc2_64_cbc
      type: flawfinder_func_name
      value: EVP_rc2_64_cbc
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.EVP_rc4_40-1.EVP_rc2_40_cbc-1.EVP_rc2_64_cbc-1
    shortlink: https://sg.run/YXxW
    semgrep.dev:
      rule:
        rule_id: x8U2ke
        version_id: gETjp7
        url: https://semgrep.dev/playground/r/gETjp7/gitlab.flawfinder.EVP_rc4_40-1.EVP_rc2_40_cbc-1.EVP_rc2_64_cbc-1
        origin: custom
  pattern-either:
  - pattern: EVP_rc4_40(...)
  - pattern: EVP_rc2_40_cbc(...)
  - pattern: EVP_rc2_64_cbc(...)
  severity: ERROR
- id: gitlab.flawfinder.crypt-1.crypt_r-1
  languages:
  - c
  message: |
    Use a different algorithm, such as SHA-256, with a larger, non-repeating salt.
  metadata:
    cwe: 'CWE-327'
    shortDescription: 'The crypt functions use a poor one-way hashing algorithm; since
      they only accept passwords of 8 characters or fewer and only a two-byte salt,
      they are excessively vulnerable to dictionary attacks given today''s faster
      computing equipment (CWE-327)'
    primary_identifier: flawfinder.crypt-1.crypt_r-1
    secondary_identifiers:
    - name: Flawfinder - crypt
      type: flawfinder_func_name
      value: crypt
    - name: Flawfinder - crypt_r
      type: flawfinder_func_name
      value: crypt_r
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.crypt-1.crypt_r-1
    shortlink: https://sg.run/657w
    semgrep.dev:
      rule:
        rule_id: OrUD57
        version_id: QkTDLO
        url: https://semgrep.dev/playground/r/QkTDLO/gitlab.flawfinder.crypt-1.crypt_r-1
        origin: custom
  pattern-either:
  - pattern: crypt(...)
  - pattern: crypt_r(...)
  severity: ERROR
- id: gitlab.flawfinder.fprintf-1.vfprintf-1._ftprintf-1._vftprintf-1.fwprintf-1.fvwprintf-1
  languages:
  - c
  message: |
    Use a constant for the format specification.
  metadata:
    cwe: 'CWE-134'
    shortDescription: 'If format strings can be influenced by an attacker, they can be
      exploited (CWE-134)'
    primary_identifier: flawfinder.fprintf-1.vfprintf-1._ftprintf-1._vftprintf-1.fwprintf-1.fvwprintf-1
    secondary_identifiers:
    - name: Flawfinder - fprintf
      type: flawfinder_func_name
      value: fprintf
    - name: Flawfinder - vfprintf
      type: flawfinder_func_name
      value: vfprintf
    - name: Flawfinder - _ftprintf
      type: flawfinder_func_name
      value: _ftprintf
    - name: Flawfinder - _vftprintf
      type: flawfinder_func_name
      value: _vftprintf
    - name: Flawfinder - fwprintf
      type: flawfinder_func_name
      value: fwprintf
    - name: Flawfinder - fvwprintf
      type: flawfinder_func_name
      value: fvwprintf
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.fprintf-1.vfprintf-1._ftprintf-1._vftprintf-1.fwprintf-1.fvwprintf-1
    shortlink: https://sg.run/owX7
    semgrep.dev:
      rule:
        rule_id: eqUpJj
        version_id: 3ZTngN
        url: https://semgrep.dev/playground/r/3ZTngN/gitlab.flawfinder.fprintf-1.vfprintf-1._ftprintf-1._vftprintf-1.fwprintf-1.fvwprintf-1
        origin: custom
  pattern-either:
  - patterns:
    - pattern: fprintf($FD, $FMT, ...)
    - pattern-not: fprintf($FD, "...", ...)
  - patterns:
    - pattern: vfprintf($FMT, $ARGS, ...)
    - pattern-not: vfprintf("...", $ARGS, ...)
  - patterns:
    - pattern: _ftprintf($FD, $FMT, ...)
    - pattern-not: _ftprintf($FD, "...", ...)
  - patterns:
    - pattern: fwprintf($FD, $FMT, ...)
    - pattern-not: fwprintf($FD, "...", ...)
  - patterns:
    - pattern: fvwprintf($FD, $FMT, ...)
    - pattern-not: fvwprintf($FD, "...", ...)
  severity: ERROR
- id: gitlab.flawfinder.printf-1.vprintf-1.vwprintf-1.vfwprintf-1._vtprintf-1.wprintf-1
  languages:
  - c
  message: |
    Use a constant for the format specification.
  metadata:
    cwe: 'CWE-134'
    shortDescription: 'If format strings can be influenced by an attacker, they can be
      exploited (CWE-134)'
    primary_identifier: flawfinder.printf-1.vprintf-1.vwprintf-1.vfwprintf-1._vtprintf-1.wprintf-1
    secondary_identifiers:
    - name: Flawfinder - printf
      type: flawfinder_func_name
      value: printf
    - name: Flawfinder - vprintf
      type: flawfinder_func_name
      value: vprintf
    - name: Flawfinder - vwprintf
      type: flawfinder_func_name
      value: vwprintf
    - name: Flawfinder - vfwprintf
      type: flawfinder_func_name
      value: vfwprintf
    - name: Flawfinder - _vtprintf
      type: flawfinder_func_name
      value: _vtprintf
    - name: Flawfinder - wprintf
      type: flawfinder_func_name
      value: wprintf
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.printf-1.vprintf-1.vwprintf-1.vfwprintf-1._vtprintf-1.wprintf-1
    shortlink: https://sg.run/z9Oz
    semgrep.dev:
      rule:
        rule_id: v8UjyR
        version_id: 44TpJn
        url: https://semgrep.dev/playground/r/44TpJn/gitlab.flawfinder.printf-1.vprintf-1.vwprintf-1.vfwprintf-1._vtprintf-1.wprintf-1
        origin: custom
  pattern-either:
  - patterns:
    - pattern: printf(...)
    - pattern-not: printf("...",...)
  - patterns:
    - pattern: vprintf($FMT, ...)
    - pattern-not: vprintf("...", ...)
  - patterns:
    - pattern: vwprintf($FMT, ...)
    - pattern-not: vwprintf("...", ...)
  - patterns:
    - pattern: vfwprintf($FILE, $FMT, ...)
    - pattern-not: vfwprintf($FILE, "...", ...)
  - patterns:
    - pattern: _vtprintf($FILE, $FMT, ...)
    - pattern-not: _vtprintf($FILE, "...", ...)
  - patterns:
    - pattern: wprintf($FMT, ...)
    - pattern-not: wprintf("...", ...)
  severity: ERROR
- id: gitlab.flawfinder.snprintf-1.vsnprintf-1._snprintf-1._sntprintf-1._vsntprintf-1
  languages:
  - c
  message: |
    Use a constant for the format specification.
  metadata:
    cwe: 'CWE-134'
    shortDescription: 'If format strings can be influenced by an attacker, they can be
      exploited, and note that sprintf variations do not always \0-terminate (CWE-134)'
    primary_identifier: flawfinder.snprintf-1.vsnprintf-1._snprintf-1._sntprintf-1._vsntprintf-1
    secondary_identifiers:
    - name: Flawfinder - snprintf
      type: flawfinder_func_name
      value: snprintf
    - name: Flawfinder - vsnprintf
      type: flawfinder_func_name
      value: vsnprintf
    - name: Flawfinder - _snprintf
      type: flawfinder_func_name
      value: _snprintf
    - name: Flawfinder - _sntprintf
      type: flawfinder_func_name
      value: _sntprintf
    - name: Flawfinder - _vsntprintf
      type: flawfinder_func_name
      value: _vsntprintf
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.snprintf-1.vsnprintf-1._snprintf-1._sntprintf-1._vsntprintf-1
    shortlink: https://sg.run/pkj3
    semgrep.dev:
      rule:
        rule_id: d8UlJZ
        version_id: PkTvKp
        url: https://semgrep.dev/playground/r/PkTvKp/gitlab.flawfinder.snprintf-1.vsnprintf-1._snprintf-1._sntprintf-1._vsntprintf-1
        origin: custom
  pattern-either:
  - patterns:
    - pattern: snprintf($BUF,$SIZ,$FMT,...)
    - pattern-not: snprintf($BUF,$SIZ,"...",...)
  - patterns:
    - pattern: vsnprintf($BUF,$SIZ,$FMT)
    - pattern-not: vsnprintf($BUF,$SIZ,"...",...)
  - patterns:
    - pattern: _snprintf($BUF,$SIZ,$FMT,...)
    - pattern-not: _snprintf($BUF,$SIZ,$FMT,"...",...)
  - patterns:
    - pattern: _sntprintf($VAR,$FMT,...)
    - pattern-not: sntprintf($VAR,"...",...)
  - patterns:
    - pattern: _vsntprintf($VAR,$FMT,...)
    - pattern-not: _vsntprintf($VAR,"...",...)
  severity: ERROR
- id: gitlab.flawfinder.syslog-1
  languages:
  - c
  message: |
    Use a constant format string for syslog.
  metadata:
    cwe: 'CWE-134'
    shortDescription: 'If syslog''s format strings can be influenced by an attacker, they
      can be exploited (CWE-134)'
    primary_identifier: flawfinder.syslog-1
    secondary_identifiers:
    - name: Flawfinder - syslog
      type: flawfinder_func_name
      value: syslog
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.syslog-1
    shortlink: https://sg.run/2R7z
    semgrep.dev:
      rule:
        rule_id: ZqUgoz
        version_id: JdTb4q
        url: https://semgrep.dev/playground/r/JdTb4q/gitlab.flawfinder.syslog-1
        origin: custom
  pattern-either:
  - patterns:
    - pattern: syslog($FUNC,...)
    - pattern-not: syslog($FUNC,"...",...)
  severity: ERROR
- id: gitlab.flawfinder.memalign-1
  languages:
  - c
  message: |
    Use posix_memalign instead (defined in POSIX's 1003.1d).  Don't switch to valloc(); it is
    marked as obsolete in BSD 4.3, as legacy in SUSv2, and is no longer defined in SUSv3.  In some
    cases, malloc()'s alignment may be sufficient.
  metadata:
    cwe: 'CWE-676'
    shortDescription: 'On some systems (though not Linux-based systems) an attempt to
      free() results from memalign() may fail. This may, on a few systems, be exploitable.  Also
      note that memalign() may not check that the boundary parameter is correct (CWE-676)'
    primary_identifier: flawfinder.memalign-1
    secondary_identifiers:
    - name: Flawfinder - memalign
      type: flawfinder_func_name
      value: memalign
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.memalign-1
    shortlink: https://sg.run/X8wl
    semgrep.dev:
      rule:
        rule_id: nJUrv6
        version_id: 5PTjx5
        url: https://semgrep.dev/playground/r/5PTjx5/gitlab.flawfinder.memalign-1
        origin: custom
  pattern-either:
  - pattern: memalign(...)
  - pattern-regex: (void)\s\*(\s|)(memalign)\;
  severity: INFO
- id: gitlab.flawfinder.atoi-1.atol-1._wtoi-1._wtoi64-1
  languages:
  - c
  message: |
    If source untrusted, check both minimum and maximum, even if the input had no minus sign (large
    numbers can roll over into negative number; consider saving to an unsigned value if that is
    intended).
  metadata:
    cwe: 'CWE-190'
    shortDescription: 'Unless checked, the resulting number can exceed the expected range
      (CWE-190)'
    primary_identifier: flawfinder.atoi-1.atol-1._wtoi-1._wtoi64-1
    secondary_identifiers:
    - name: Flawfinder - atoi
      type: flawfinder_func_name
      value: atoi
    - name: Flawfinder - atol
      type: flawfinder_func_name
      value: atol
    - name: Flawfinder - _wtoi
      type: flawfinder_func_name
      value: _wtoi
    - name: Flawfinder - _wtoi64
      type: flawfinder_func_name
      value: _wtoi64
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.atoi-1.atol-1._wtoi-1._wtoi64-1
    shortlink: https://sg.run/jk6Z
    semgrep.dev:
      rule:
        rule_id: EwUQzn
        version_id: GxTyg9
        url: https://semgrep.dev/playground/r/GxTyg9/gitlab.flawfinder.atoi-1.atol-1._wtoi-1._wtoi64-1
        origin: custom
  pattern-either:
  - pattern: atoi(...)
  - pattern: atol(...)
  - pattern: _wtoi(...)
  - pattern: _wtoi64(...)
  severity: INFO
- id: gitlab.flawfinder.AddAccessAllowedAce-1
  languages:
  - c
  message: |
    Make sure that you set inheritance by hand if you wish it to inherit.
  metadata:
    cwe: 'CWE-732'
    shortDescription: 'This doesn''t set the inheritance bits in the access control entry
      (ACE) header (CWE-732)'
    primary_identifier: flawfinder.AddAccessAllowedAce-1
    secondary_identifiers:
    - name: Flawfinder - AddAccessAllowedAce
      type: flawfinder_func_name
      value: AddAccessAllowedAce
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.AddAccessAllowedAce-1
    shortlink: https://sg.run/1G7b
    semgrep.dev:
      rule:
        rule_id: 7KUpk7
        version_id: RGT7NO
        url: https://semgrep.dev/playground/r/RGT7NO/gitlab.flawfinder.AddAccessAllowedAce-1
        origin: custom
  pattern: AddAccessAllowedAce(...)
  severity: WARNING
- id: gitlab.flawfinder.InitializeCriticalSection-1
  languages:
  - c
  message: |
    Use InitializeCriticalSectionAndSpinCount instead.
  metadata:
    cwe: 'CWE-754'
    shortDescription: 'Exceptions can be thrown in low-memory situations'
    primary_identifier: flawfinder.InitializeCriticalSection-1
    secondary_identifiers:
    - name: Flawfinder - InitializeCriticalSection
      type: flawfinder_func_name
      value: InitializeCriticalSection
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.InitializeCriticalSection-1
    shortlink: https://sg.run/967k
    semgrep.dev:
      rule:
        rule_id: L1Urv6
        version_id: A8T8v9
        url: https://semgrep.dev/playground/r/A8T8v9/gitlab.flawfinder.InitializeCriticalSection-1
        origin: custom
  pattern: InitializeCriticalSection(...)
  severity: WARNING
- id: gitlab.flawfinder.LoadLibrary-1
  languages:
  - c
  message: |
    Use LoadLibraryEx with one of the search flags, or call SetSearchPathMode to use a safe search
    path, or pass a full path to the library.
  metadata:
    cwe: 'CWE-20'
    shortDescription: 'Ensure that the full path to the library is specified, or current
      directory may be used (CWE-829, CWE-20)'
    primary_identifier: flawfinder.LoadLibrary-1
    secondary_identifiers:
    - name: Flawfinder - LoadLibrary
      type: flawfinder_func_name
      value: LoadLibrary
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.LoadLibrary-1
    shortlink: https://sg.run/y6n8
    semgrep.dev:
      rule:
        rule_id: 8GUx8Y
        version_id: BjT54x
        url: https://semgrep.dev/playground/r/BjT54x/gitlab.flawfinder.LoadLibrary-1
        origin: custom
  pattern: LoadLibrary(...)
  severity: WARNING
- id: gitlab.flawfinder.LoadLibraryEx-1
  languages:
  - c
  message: |
    Use a flag like LOAD_LIBRARY_SEARCH_SYSTEM32 or LOAD_LIBRARY_SEARCH_APPLICATION_DIR to search
    only desired folders.
  metadata:
    cwe: 'CWE-20'
    shortDescription: 'Ensure that the full path to the library is specified, or current
      directory may be used (CWE-829, CWE-20)'
    primary_identifier: flawfinder.LoadLibraryEx-1
    secondary_identifiers:
    - name: Flawfinder - LoadLibraryEx
      type: flawfinder_func_name
      value: LoadLibraryEx
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.LoadLibraryEx-1
    shortlink: https://sg.run/rkn6
    semgrep.dev:
      rule:
        rule_id: gxUYQ3
        version_id: DkTJB9
        url: https://semgrep.dev/playground/r/DkTJB9/gitlab.flawfinder.LoadLibraryEx-1
        origin: custom
  pattern: LoadLibraryEx(...)
  severity: WARNING
- id: gitlab.flawfinder.lstrcat-1.wcscat-1._tcscat-1._mbscat-1
  languages:
  - c
  message: |
    Buffer overflows is not checked
  metadata:
    cwe: 'CWE-120'
    shortDescription: 'Does not check for buffer overflows when concatenating to destination
      [MS-banned] (CWE-120)'
    primary_identifier: flawfinder.lstrcat-1.wcscat-1._tcscat-1._mbscat-1
    secondary_identifiers:
    - name: Flawfinder - lstrcat
      type: flawfinder_func_name
      value: lstrcat
    - name: Flawfinder - wcscat
      type: flawfinder_func_name
      value: wcscat
    - name: Flawfinder - _tcscat
      type: flawfinder_func_name
      value: _tcscat
    - name: Flawfinder - _mbscat
      type: flawfinder_func_name
      value: _mbscat
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.lstrcat-1.wcscat-1._tcscat-1._mbscat-1
    shortlink: https://sg.run/8R7J
    semgrep.dev:
      rule:
        rule_id: qNUb3v
        version_id: 9lT2L6
        url: https://semgrep.dev/playground/r/9lT2L6/gitlab.flawfinder.lstrcat-1.wcscat-1._tcscat-1._mbscat-1
        origin: custom
  pattern-either:
  - pattern: lstrcat(...)
  - pattern: wcscat(...)
  - pattern: _tcscat(...)
  - pattern: _mbscat(...)
  severity: ERROR
- id: gitlab.flawfinder.lstrcatn-1.wcsncat-1._tcsncat-1._mbsnbcat-1
  languages:
  - c
  message: |
    Consider strcat_s, strlcat, or automatically resizing strings.
  metadata:
    cwe: 'CWE-120'
    shortDescription: 'Easily used incorrectly (e.g., incorrectly computing the correct
      maximum size to add) [MS-banned] (CWE-120)'
    primary_identifier: flawfinder.lstrcatn-1.wcsncat-1._tcsncat-1._mbsnbcat-1
    secondary_identifiers:
    - name: Flawfinder - lstrcatn
      type: flawfinder_func_name
      value: lstrcatn
    - name: Flawfinder - wcsncat
      type: flawfinder_func_name
      value: wcsncat
    - name: Flawfinder - _tcsncat
      type: flawfinder_func_name
      value: _tcsncat
    - name: Flawfinder - _mbsnbcat
      type: flawfinder_func_name
      value: _mbsnbcat
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.lstrcatn-1.wcsncat-1._tcsncat-1._mbsnbcat-1
    shortlink: https://sg.run/grqo
    semgrep.dev:
      rule:
        rule_id: lBUzGo
        version_id: yeT8z5
        url: https://semgrep.dev/playground/r/yeT8z5/gitlab.flawfinder.lstrcatn-1.wcsncat-1._tcsncat-1._mbsnbcat-1
        origin: custom
  pattern-either:
  - pattern: lstrcatn(...)
  - pattern: wcsncat(...)
  - pattern: _tcsncat(...)
  - pattern: _mbsnbcat(...)
  severity: INFO
- id: gitlab.flawfinder.lstrcpy-1.wcscpy-1._tcscpy-1._mbscpy-1
  languages:
  - c
  message: |
    Consider using a function version that stops copying at the end of the buffer.
  metadata:
    cwe: 'CWE-120'
    shortDescription: 'Does not check for buffer overflows when copying to destination
      [MS-banned] (CWE-120)'
    primary_identifier: flawfinder.lstrcpy-1.wcscpy-1._tcscpy-1._mbscpy-1
    secondary_identifiers:
    - name: Flawfinder - lstrcpy
      type: flawfinder_func_name
      value: lstrcpy
    - name: Flawfinder - wcscpy
      type: flawfinder_func_name
      value: wcscpy
    - name: Flawfinder - _tcscpy
      type: flawfinder_func_name
      value: _tcscpy
    - name: Flawfinder - _mbscpy
      type: flawfinder_func_name
      value: _mbscpy
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.lstrcpy-1.wcscpy-1._tcscpy-1._mbscpy-1
    shortlink: https://sg.run/Q41D
    semgrep.dev:
      rule:
        rule_id: YGUQd4
        version_id: rxTqX8
        url: https://semgrep.dev/playground/r/rxTqX8/gitlab.flawfinder.lstrcpy-1.wcscpy-1._tcscpy-1._mbscpy-1
        origin: custom
  pattern-either:
  - pattern: lstrcpy(...)
  - pattern: wcscpy(...)
  - pattern: _tcscpy(...)
  - pattern: _mbscpy(...)
  severity: ERROR
- id: gitlab.flawfinder.lstrcpyn-1.wcsncpy-1._tcsncpy-1._mbsnbcpy-1
  languages:
  - c
  message: |
    Easily used incorrectly
  metadata:
    cwe: 'CWE-120'
    shortDescription: 'Doesn''t always \0-terminate or check for invalid pointers [MS-banned]
      (CWE-120)'
    primary_identifier: flawfinder.lstrcpyn-1.wcsncpy-1._tcsncpy-1._mbsnbcpy-1
    secondary_identifiers:
    - name: Flawfinder - lstrcpyn
      type: flawfinder_func_name
      value: lstrcpyn
    - name: Flawfinder - wcsncpy
      type: flawfinder_func_name
      value: wcsncpy
    - name: Flawfinder - _tcsncpy
      type: flawfinder_func_name
      value: _tcsncpy
    - name: Flawfinder - _mbsnbcpy
      type: flawfinder_func_name
      value: _mbsnbcpy
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.lstrcpyn-1.wcsncpy-1._tcsncpy-1._mbsnbcpy-1
    shortlink: https://sg.run/347g
    semgrep.dev:
      rule:
        rule_id: 6JU6Nz
        version_id: bZTrJx
        url: https://semgrep.dev/playground/r/bZTrJx/gitlab.flawfinder.lstrcpyn-1.wcsncpy-1._tcsncpy-1._mbsnbcpy-1
        origin: custom
  pattern-either:
  - pattern: lstrcpyn(...)
  - pattern: wcsncpy(...)
  - pattern: _tcsncpy(...)
  - pattern: _mbsnbcpy(...)
  severity: INFO
- id: gitlab.flawfinder.memcpy-1.CopyMemory-1.bcopy-1
  languages:
  - c
  message: |
    Make sure destination can always hold the source data.
  metadata:
    cwe: 'CWE-120'
    shortDescription: 'Does not check for buffer overflows when copying to destination
      (CWE-120)'
    primary_identifier: flawfinder.memcpy-1.CopyMemory-1.bcopy-1
    secondary_identifiers:
    - name: Flawfinder - memcpy
      type: flawfinder_func_name
      value: memcpy
    - name: Flawfinder - CopyMemory
      type: flawfinder_func_name
      value: CopyMemory
    - name: Flawfinder - bcopy
      type: flawfinder_func_name
      value: bcopy
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.memcpy-1.CopyMemory-1.bcopy-1
    shortlink: https://sg.run/4P7g
    semgrep.dev:
      rule:
        rule_id: oqUr65
        version_id: NdTLEE
        url: https://semgrep.dev/playground/r/NdTLEE/gitlab.flawfinder.memcpy-1.CopyMemory-1.bcopy-1
        origin: custom
  pattern-either:
  - pattern: memcpy(...)
  - pattern: CopyMemory(...)
  - pattern: bcopy(...)
  severity: INFO
- id: gitlab.flawfinder.realpath-1
  languages:
  - c
  message: |
    Ensure that the destination buffer is at least of size MAXPATHLEN, andto protect against
    implementation problems, the input argument should also be checked to ensure it is no larger
    than MAXPATHLEN.
  metadata:
    cwe: 'CWE-120'
    shortDescription: 'This function does not protect against buffer overflows, and some
      implementations can overflow internally (CWE-120/CWE-785!)'
    primary_identifier: flawfinder.realpath-1
    secondary_identifiers:
    - name: Flawfinder - realpath
      type: flawfinder_func_name
      value: realpath
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.realpath-1
    shortlink: https://sg.run/P8jN
    semgrep.dev:
      rule:
        rule_id: zdU1EX
        version_id: kbTp9Q
        url: https://semgrep.dev/playground/r/kbTp9Q/gitlab.flawfinder.realpath-1
        origin: custom
  pattern: realpath(...)
  severity: WARNING
- id: gitlab.flawfinder.scanf-1.vscanf-1.wscanf-1._tscanf-1.vwscanf-1
  languages:
  - c
  message: |
    Specify a limit to %s, or use a different input function.
  metadata:
    cwe: 'CWE-120'
    shortDescription: 'The scanf() family''s %s operation, without a limit specification,
      permits buffer overflows (CWE-120, CWE-20)'
    primary_identifier: flawfinder.scanf-1.vscanf-1.wscanf-1._tscanf-1.vwscanf-1
    secondary_identifiers:
    - name: Flawfinder - scanf
      type: flawfinder_func_name
      value: scanf
    - name: Flawfinder - vscanf
      type: flawfinder_func_name
      value: vscanf
    - name: Flawfinder - wscanf
      type: flawfinder_func_name
      value: wscanf
    - name: Flawfinder - _tscanf
      type: flawfinder_func_name
      value: _tscanf
    - name: Flawfinder - vwscanf
      type: flawfinder_func_name
      value: vwscanf
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.scanf-1.vscanf-1.wscanf-1._tscanf-1.vwscanf-1
    shortlink: https://sg.run/Jj6o
    semgrep.dev:
      rule:
        rule_id: pKUw5J
        version_id: w8Trvg
        url: https://semgrep.dev/playground/r/w8Trvg/gitlab.flawfinder.scanf-1.vscanf-1.wscanf-1._tscanf-1.vwscanf-1
        origin: custom
  pattern-either:
  - patterns:
    - pattern: scanf($FMT, ...)
    - pattern-not: scanf("...", ...)
  - patterns:
    - pattern: vscanf($FMT, ...)
    - pattern-not: vscanf("...", ...)
  - patterns:
    - pattern: wscanf($FMT, ...)
    - pattern-not: wscanf("...", ...)
  - patterns:
    - pattern: _tscanf($FMT, ...)
    - pattern-not: _tscanf("...", ...)
  - patterns:
    - pattern: vwscanf(FMT, ...)
    - pattern-not: vwscanf("...", ...)
  severity: ERROR
- id: gitlab.flawfinder.sprintf-1.vsprintf-1.swprintf-1.vswprintf-1._stprintf-1._vstprintf-1
  languages:
  - c
  message: |
    Use sprintf_s, snprintf, or vsnprintf.
  metadata:
    cwe: 'CWE-120'
    shortDescription: 'Does not check for buffer overflows (CWE-120)'
    primary_identifier: flawfinder.sprintf-1.vsprintf-1.swprintf-1.vswprintf-1._stprintf-1._vstprintf-1
    secondary_identifiers:
    - name: Flawfinder - sprintf
      type: flawfinder_func_name
      value: sprintf
    - name: Flawfinder - vsprintf
      type: flawfinder_func_name
      value: vsprintf
    - name: Flawfinder - swprintf
      type: flawfinder_func_name
      value: swprintf
    - name: Flawfinder - vswprintf
      type: flawfinder_func_name
      value: vswprintf
    - name: Flawfinder - _stprintf
      type: flawfinder_func_name
      value: _stprintf
    - name: Flawfinder - _vstprintf
      type: flawfinder_func_name
      value: _vstprintf
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.sprintf-1.vsprintf-1.swprintf-1.vswprintf-1._stprintf-1._vstprintf-1
    shortlink: https://sg.run/5J76
    semgrep.dev:
      rule:
        rule_id: 2ZUK9n
        version_id: xyTO1y
        url: https://semgrep.dev/playground/r/xyTO1y/gitlab.flawfinder.sprintf-1.vsprintf-1.swprintf-1.vswprintf-1._stprintf-1._vstprintf-1
        origin: custom
  pattern-either:
  - pattern: sprintf(...)
  - pattern: vsprintf(...)
  - pattern: swprintf(...)
  - pattern: vswprintf(...)
  - pattern: _stprintf(...)
  - pattern: _vstprintf(...)
  severity: ERROR
- id: gitlab.flawfinder.SetSecurityDescriptorDacl-1
  languages:
  - c
  message: |
    Never create NULL ACLs; an attacker can set it to Everyone (Deny
    All Access)
  metadata:
    cwe: 'CWE-732'
    shortDescription: 'Never create NULL ACLs; an attacker can set it to Everyone (Deny
      All Access), which would even forbid administrator access (CWE-732)'
    primary_identifier: flawfinder.SetSecurityDescriptorDacl-1
    secondary_identifiers:
    - name: Flawfinder - SetSecurityDescriptorDacl
      type: flawfinder_func_name
      value: SetSecurityDescriptorDacl
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.SetSecurityDescriptorDacl-1
    shortlink: https://sg.run/brkZ
    semgrep.dev:
      rule:
        rule_id: QrUpe8
        version_id: WrT9eo
        url: https://semgrep.dev/playground/r/WrT9eo/gitlab.flawfinder.SetSecurityDescriptorDacl-1
        origin: custom
  pattern: SetSecurityDescriptorDacl(...)
  severity: ERROR
- id: gitlab.flawfinder.chroot-1
  languages:
  - c
  message: |
    Make sure the program immediately chdir("/"), closes file descriptors, and drops root
    privileges, and that all necessary files (and no more!) are in the new root.
  metadata:
    cwe: 'CWE-22'
    shortDescription: 'chroot can be very helpful, but is hard to use correctly (CWE-250,
      CWE-22)'
    primary_identifier: flawfinder.chroot-1
    secondary_identifiers:
    - name: Flawfinder - chroot
      type: flawfinder_func_name
      value: chroot
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.chroot-1
    shortlink: https://sg.run/N8Dx
    semgrep.dev:
      rule:
        rule_id: 3qUE0p
        version_id: 0bTB0E
        url: https://semgrep.dev/playground/r/0bTB0E/gitlab.flawfinder.chroot-1
        origin: custom
  pattern: chroot(...)
  severity: WARNING
- id: gitlab.flawfinder.cuserid-1
  languages:
  - c
  message: |
    Use getpwuid(geteuid()) and extract the desired information instead.
  metadata:
    cwe: 'CWE-120'
    shortDescription: 'Exactly what cuserid() does is poorly defined (e.g., some systems
      use the effective uid, like Linux, while others like System V use the real uid).
      Thus, you can''t trust what it does. It''s certainly not portable (The cuserid
      function was included in the 1988 version of POSIX, but removed from the 1990
      version).  Also, if passed a non-null parameter, there''s a risk of a buffer
      overflow if the passed-in buffer is not at least L_cuserid characters long (CWE-120)'
    primary_identifier: flawfinder.cuserid-1
    secondary_identifiers:
    - name: Flawfinder - cuserid
      type: flawfinder_func_name
      value: cuserid
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.cuserid-1
    shortlink: https://sg.run/kkgX
    semgrep.dev:
      rule:
        rule_id: 4bU20k
        version_id: K3TeAY
        url: https://semgrep.dev/playground/r/K3TeAY/gitlab.flawfinder.cuserid-1
        origin: custom
  pattern: cuserid(...)
  severity: ERROR
- id: gitlab.flawfinder.fopen-1.open-1
  languages:
  - c
  message: |
    Check when opening files - can an attacker redirect it (via symlinks).
  metadata:
    cwe: 'CWE-362'
    shortDescription: 'Check when opening files - can an attacker redirect it (via symlinks),
      force the opening of special file type (e.g., device files), move things around
      to create a race condition, control its ancestors, or change its contents? (CWE-362)'
    primary_identifier: flawfinder.fopen-1.open-1
    secondary_identifiers:
    - name: Flawfinder - fopen
      type: flawfinder_func_name
      value: fopen
    - name: Flawfinder - open
      type: flawfinder_func_name
      value: open
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.fopen-1.open-1
    shortlink: https://sg.run/w1nx
    semgrep.dev:
      rule:
        rule_id: PeUBPk
        version_id: qkTGAX
        url: https://semgrep.dev/playground/r/qkTGAX/gitlab.flawfinder.fopen-1.open-1
        origin: custom
  pattern-either:
  - pattern: fopen(...)
  - pattern: open(...)
  severity: INFO
- id: gitlab.flawfinder.getlogin-1
  languages:
  - c
  message: |
    Use getpwuid(geteuid()) and extract the desired information instead.
  metadata:
    cwe: 'CWE-807'
    shortDescription: 'It''s often easy to fool getlogin.  Sometimes it does not work
      at all, because some program messed up the utmp file.  Often, it gives only
      the first 8 characters of the login name. The user currently logged in on the
      controlling tty of our program need not be the user who started it.  Avoid getlogin()
      for security-related purposes (CWE-807)'
    primary_identifier: flawfinder.getlogin-1
    secondary_identifiers:
    - name: Flawfinder - getlogin
      type: flawfinder_func_name
      value: getlogin
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.getlogin-1
    shortlink: https://sg.run/xene
    semgrep.dev:
      rule:
        rule_id: JDUQ9Q
        version_id: l4Tb3W
        url: https://semgrep.dev/playground/r/l4Tb3W/gitlab.flawfinder.getlogin-1
        origin: custom
  pattern: getlogin(...)
  severity: ERROR
- id: gitlab.flawfinder.getpass-1
  languages:
  - c
  message: |
    Make the specific calls to do exactly what you want.  If you continue to use it, or write your
    own, be sure to zero the password as soon as possible to avoid leaving the cleartext password
    visible in the process' address space.
  metadata:
    cwe: 'CWE-20'
    shortDescription: 'This function is obsolete and not portable. It was in SUSv2 but
      removed by POSIX.2.  What it does exactly varies considerably between systems,
      particularly in where its prompt is displayed and where it gets its data (e.g.,
      /dev/tty, stdin, stderr, etc.). In addition, some implementations overflow buffers.
      (CWE-676, CWE-120, CWE-20)'
    primary_identifier: flawfinder.getpass-1
    secondary_identifiers:
    - name: Flawfinder - getpass
      type: flawfinder_func_name
      value: getpass
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.getpass-1
    shortlink: https://sg.run/O8We
    semgrep.dev:
      rule:
        rule_id: 5rU8gL
        version_id: YDT5gl
        url: https://semgrep.dev/playground/r/YDT5gl/gitlab.flawfinder.getpass-1
        origin: custom
  pattern: getpass(...)
  severity: ERROR
- id: gitlab.flawfinder.gsignal-1.ssignal-1
  languages:
  - c
  message: |
    Switch to raise/signal, or some other signalling approach.
  metadata:
    cwe: 'CWE-676'
    shortDescription: 'These functions are considered obsolete on most systems, and very
      non-portable (Linux-based systems handle them radically different, basically
      if gsignal/ssignal were the same as raise/signal respectively, while System
      V considers them a separate set and obsolete) (CWE-676)'
    primary_identifier: flawfinder.gsignal-1.ssignal-1
    secondary_identifiers:
    - name: Flawfinder - gsignal
      type: flawfinder_func_name
      value: gsignal
    - name: Flawfinder - ssignal
      type: flawfinder_func_name
      value: ssignal
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.gsignal-1.ssignal-1
    shortlink: https://sg.run/eKOX
    semgrep.dev:
      rule:
        rule_id: GdUZdz
        version_id: JdTbOo
        url: https://semgrep.dev/playground/r/JdTbOo/gitlab.flawfinder.gsignal-1.ssignal-1
        origin: custom
  pattern-either:
  - pattern: gsignal(...)
  - pattern: ssignal(...)
  severity: INFO
- id: gitlab.gosec.G402-2
  patterns:
  - pattern-either:
    - pattern: tls.VersionTLS11
    - pattern: tls.VersionTLS10
  message: |
    Use of deprecated TLS version which may result in the unauthorized retrieval
    of sensitive information. It is recommended to use TLS 1.2 or TLS 1.3 instead.
  metadata:
    cwe: 'CWE-310'
    shortDescription: 'Cryptographic Issues'
    owasp: A6:2017-Security Misconfiguration
    primary_identifier: gosec.G402-2
    secondary_identifiers:
    - name: Gosec Rule ID G402
      type: gosec_rule_id
      value: G402
    license: MIT
    source: https://semgrep.dev/r/gitlab.gosec.G402-2
    shortlink: https://sg.run/ykQZ
    semgrep.dev:
      rule:
        rule_id: wdUnqg
        version_id: 5PT1A7
        url: https://semgrep.dev/playground/r/5PT1A7/gitlab.gosec.G402-2
        origin: custom
  languages:
  - go
  severity: WARNING
- id: gitlab.gosec.G107-1
  patterns:
  - pattern-either:
    - patterns:
      - pattern: http.Get($URL)
      - pattern-not: http.Get("...")
    - patterns:
      - pattern: http.Head($URL)
      - pattern-not: http.Head("...")
    - patterns:
      - pattern: http.Post($URL, ...)
      - pattern-not: http.Post("...", ...)
    - patterns:
      - pattern: http.PostForm($URL, ...)
      - pattern-not: http.PostForm("...", ...)
    - patterns:
      - pattern-inside: |
          $REQ, ... := http.NewRequest(..., url, ...)
          ...
          $CLIENT := &http.Client{...}
          ...
      - pattern: $CLIENT.Do($REQ)
    - patterns:
      - pattern-not-inside: |
          const $X = "..."
          ...
      - pattern-not-inside: |
          var $Y string = "..."
          ...
          $X = $Y
          ...
      - pattern-not-inside: |
          $Y := "..."
          ...
          $X = $Y
          ...
      - pattern: http.Get($X)
  message: |
    Url provided to HTTP request as taint input
  metadata:
    cwe: 'CWE-88'
    shortDescription: 'Improper Neutralization of Argument Delimiters in a Command'
    primary_identifier: gosec.G107-1
    secondary_identifiers:
    - name: Gosec Rule ID G107
      type: gosec_rule_id
      value: G107
    license: MIT
    source: https://semgrep.dev/r/gitlab.gosec.G107-1
    shortlink: https://sg.run/rDQj
    semgrep.dev:
      rule:
        rule_id: x8UZly
        version_id: LjTOd2
        url: https://semgrep.dev/playground/r/LjTOd2/gitlab.gosec.G107-1
        origin: custom
  severity: WARNING
  languages:
  - go
- id: gitlab.flawfinder.ulimit-1
  languages:
  - c
  message: |
    Use getrlimit(2), setrlimit(2), and sysconf(3) instead.
  metadata:
    cwe: 'CWE-676'
    shortDescription: 'This C routine is considered obsolete (as opposed to the shell
      command by the same name, which is NOT obsolete) (CWE-676)'
    primary_identifier: flawfinder.ulimit-1
    secondary_identifiers:
    - name: Flawfinder - ulimit
      type: flawfinder_func_name
      value: ulimit
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.ulimit-1
    shortlink: https://sg.run/v2nX
    semgrep.dev:
      rule:
        rule_id: ReUo4K
        version_id: 5PTjK9
        url: https://semgrep.dev/playground/r/5PTjK9/gitlab.flawfinder.ulimit-1
        origin: custom
  pattern: ulimit(...)
  severity: INFO
- id: gitlab.flawfinder.usleep-1
  languages:
  - c
  message: |
    Use nanosleep(2) or setitimer(2) instead.
  metadata:
    cwe: 'CWE-676'
    shortDescription: 'This C routine is considered obsolete (as opposed to the shell
      command by the same name).   The interaction of this function with SIGALRM and
      other timer functions such as sleep(), alarm(), setitimer(), and nanosleep()
      is unspecified (CWE-676)'
    primary_identifier: flawfinder.usleep-1
    secondary_identifiers:
    - name: Flawfinder - usleep
      type: flawfinder_func_name
      value: usleep
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.usleep-1
    shortlink: https://sg.run/d0xP
    semgrep.dev:
      rule:
        rule_id: AbUGoN
        version_id: GxTyb6
        url: https://semgrep.dev/playground/r/GxTyb6/gitlab.flawfinder.usleep-1
        origin: custom
  pattern: usleep(...)
  severity: INFO
- id: gitlab.flawfinder.access-1
  languages:
  - c
  message: |
    Set up the correct permissions (e.g., using setuid()) and try to open the file directly.
  metadata:
    cwe: 'CWE-362'
    shortDescription: 'This usually indicates a security flaw.  If an attacker can change
      anything along the path between the call to access() and the file''s actual
      use (e.g., by moving files), the attacker can exploit the race condition (CWE-362/CWE-367!)'
    primary_identifier: flawfinder.access-1
    secondary_identifiers:
    - name: Flawfinder - access
      type: flawfinder_func_name
      value: access
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.access-1
    shortlink: https://sg.run/ZkX7
    semgrep.dev:
      rule:
        rule_id: BYU731
        version_id: RGT7NR
        url: https://semgrep.dev/playground/r/RGT7NR/gitlab.flawfinder.access-1
        origin: custom
  pattern: access(...)
  severity: ERROR
- id: gitlab.flawfinder.chgrp-1
  languages:
  - c
  message: |
    Use fchgrp( ) instead.
  metadata:
    cwe: 'CWE-362'
    shortDescription: 'This accepts filename arguments; if an attacker can move those
      files, a race condition results. (CWE-362)'
    primary_identifier: flawfinder.chgrp-1
    secondary_identifiers:
    - name: Flawfinder - chgrp
      type: flawfinder_func_name
      value: chgrp
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.chgrp-1
    shortlink: https://sg.run/nknG
    semgrep.dev:
      rule:
        rule_id: DbUKrn
        version_id: A8T8vg
        url: https://semgrep.dev/playground/r/A8T8vg/gitlab.flawfinder.chgrp-1
        origin: custom
  pattern: chgrp(...)
  severity: ERROR
- id: gitlab.flawfinder.chmod-1
  languages:
  - c
  message: |
    Use fchmod( ) instead.
  metadata:
    cwe: 'CWE-362'
    shortDescription: 'This accepts filename arguments; if an attacker can move those
      files, a race condition results. (CWE-362)'
    primary_identifier: flawfinder.chmod-1
    secondary_identifiers:
    - name: Flawfinder - chmod
      type: flawfinder_func_name
      value: chmod
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.chmod-1
    shortlink: https://sg.run/EOe8
    semgrep.dev:
      rule:
        rule_id: WAUP43
        version_id: BjT54b
        url: https://semgrep.dev/playground/r/BjT54b/gitlab.flawfinder.chmod-1
        origin: custom
  pattern: chmod(...)
  severity: ERROR
- id: gitlab.flawfinder.chown-1
  languages:
  - c
  message: |
    Use fchown( ) instead.
  metadata:
    cwe: 'CWE-362'
    shortDescription: 'This accepts filename arguments; if an attacker can move those
      files, a race condition results. (CWE-362)'
    primary_identifier: flawfinder.chown-1
    secondary_identifiers:
    - name: Flawfinder - chown
      type: flawfinder_func_name
      value: chown
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.chown-1
    shortlink: https://sg.run/7Gpv
    semgrep.dev:
      rule:
        rule_id: 0oUJPK
        version_id: DkTJBw
        url: https://semgrep.dev/playground/r/DkTJBw/gitlab.flawfinder.chown-1
        origin: custom
  pattern: chown(...)
  severity: ERROR
- id: gitlab.flawfinder.readlink-1
  languages:
  - c
  message: |
    Reconsider approach.
  metadata:
    cwe: 'CWE-20'
    shortDescription: 'This accepts filename arguments; if an attacker can move those files
      or change the link content, a race condition results.  Also, it does not terminate
      with ASCII NUL. (CWE-362, CWE-20)'
    primary_identifier: flawfinder.readlink-1
    secondary_identifiers:
    - name: Flawfinder - readlink
      type: flawfinder_func_name
      value: readlink
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.readlink-1
    shortlink: https://sg.run/L8AL
    semgrep.dev:
      rule:
        rule_id: KxUYWo
        version_id: WrT9eG
        url: https://semgrep.dev/playground/r/WrT9eG/gitlab.flawfinder.readlink-1
        origin: custom
  pattern: readlink(...)
  severity: ERROR
- id: gitlab.flawfinder.vfork-1
  languages:
  - c
  message: |
    Use fork() instead.
  metadata:
    cwe: 'CWE-362'
    shortDescription: 'On some old systems, vfork() permits race conditions, and it''s
      very difficult to use correctly (CWE-362)'
    primary_identifier: flawfinder.vfork-1
    secondary_identifiers:
    - name: Flawfinder - vfork
      type: flawfinder_func_name
      value: vfork
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.vfork-1
    shortlink: https://sg.run/8R2J
    semgrep.dev:
      rule:
        rule_id: qNUb8v
        version_id: 0bTB0q
        url: https://semgrep.dev/playground/r/0bTB0q/gitlab.flawfinder.vfork-1
        origin: custom
  pattern: vfork(...)
  severity: INFO
- id: gitlab.flawfinder.drand48-1.erand48-1.jrand48-1.lcong48-1.lrand48-1.mrand48-1.nrand48-1.random-1.seed48-1.setstate-1.srand-1.strfry-1.srandom-1.g_rand_boolean-1.g_rand_int-1.g_rand_int_range-1.g_rand_double-1.g_rand_double_range-1.g_random_boolean-1.g_random_int-1.g_random_int_range-1.g_random_double-1.g_random_double_range-1
  languages:
  - c
  message: |
    Use a more secure technique for acquiring random values.
  metadata:
    cwe: 'CWE-327'
    shortDescription: 'This function is not sufficiently random for security-related functions
      such as key and nonce creation (CWE-327)'
    primary_identifier: flawfinder.drand48-1.erand48-1.jrand48-1.lcong48-1.lrand48-1.mrand48-1.nrand48-1.random-1.seed48-1.setstate-1.srand-1.strfry-1.srandom-1.g_rand_boolean-1.g_rand_int-1.g_rand_int_range-1.g_rand_double-1.g_rand_double_range-1.g_random_boolean-1.g_random_int-1.g_random_int_range-1.g_random_double-1.g_random_double_range-1
    secondary_identifiers:
    - name: Flawfinder - drand48
      type: flawfinder_func_name
      value: drand48
    - name: Flawfinder - erand48
      type: flawfinder_func_name
      value: erand48
    - name: Flawfinder - jrand48
      type: flawfinder_func_name
      value: jrand48
    - name: Flawfinder - lcong48
      type: flawfinder_func_name
      value: lcong48
    - name: Flawfinder - lrand48
      type: flawfinder_func_name
      value: lrand48
    - name: Flawfinder - mrand48
      type: flawfinder_func_name
      value: mrand48
    - name: Flawfinder - nrand48
      type: flawfinder_func_name
      value: nrand48
    - name: Flawfinder - random
      type: flawfinder_func_name
      value: random
    - name: Flawfinder - seed48
      type: flawfinder_func_name
      value: seed48
    - name: Flawfinder - setstate
      type: flawfinder_func_name
      value: setstate
    - name: Flawfinder - srand
      type: flawfinder_func_name
      value: srand
    - name: Flawfinder - strfry
      type: flawfinder_func_name
      value: strfry
    - name: Flawfinder - srandom
      type: flawfinder_func_name
      value: srandom
    - name: Flawfinder - g_rand_boolean
      type: flawfinder_func_name
      value: g_rand_boolean
    - name: Flawfinder - g_rand_int
      type: flawfinder_func_name
      value: g_rand_int
    - name: Flawfinder - g_rand_int_range
      type: flawfinder_func_name
      value: g_rand_int_range
    - name: Flawfinder - g_rand_double
      type: flawfinder_func_name
      value: g_rand_double
    - name: Flawfinder - g_rand_double_range
      type: flawfinder_func_name
      value: g_rand_double_range
    - name: Flawfinder - g_random_boolean
      type: flawfinder_func_name
      value: g_random_boolean
    - name: Flawfinder - g_random_int
      type: flawfinder_func_name
      value: g_random_int
    - name: Flawfinder - g_random_int_range
      type: flawfinder_func_name
      value: g_random_int_range
    - name: Flawfinder - g_random_double
      type: flawfinder_func_name
      value: g_random_double
    - name: Flawfinder - g_random_double_range
      type: flawfinder_func_name
      value: g_random_double_range
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.drand48-1.erand48-1.jrand48-1.lcong48-1.lrand48-1.mrand48-1.nrand48-1.random-1.seed48-1.setstate-1.srand-1.strfry-1.srandom-1.g_rand_boolean-1.g_rand_int-1.g_rand_int_range-1.g_rand_double-1.g_rand_double_range-1.g_random_boolean-1.g_random_int-1.g_random_int_range-1.g_random_double-1.g_random_double_range-1
    shortlink: https://sg.run/grno
    semgrep.dev:
      rule:
        rule_id: lBUzno
        version_id: K3TeAQ
        url: https://semgrep.dev/playground/r/K3TeAQ/gitlab.flawfinder.drand48-1.erand48-1.jrand48-1.lcong48-1.lrand48-1.mrand48-1.nrand48-1.random-1.seed48-1.setstate-1.srand-1.strfry-1.srandom-1.g_rand_boolean-1.g_rand_int-1.g_rand_int_range-1.g_rand_double-1.g_rand_double_range-1.g_random_boolean-1.g_random_int-1.g_random_int_range-1.g_random_double-1.g_random_double_range-1
        origin: custom
  pattern-either:
  - pattern: drand48(...)
  - pattern: erand48(...)
  - pattern: jrand48(...)
  - pattern: lcong48(...)
  - pattern: lrand48(...)
  - pattern: mrand48(...)
  - pattern: nrand48(...)
  - pattern: random(...)
  - pattern: seed48(...)
  - pattern: setstate(...)
  - pattern: srand(...)
  - pattern: strfry(...)
  - pattern: srandom(...)
  - pattern: g_rand_boolean(...)
  - pattern: g_rand_int(...)
  - pattern: g_rand_int_range(...)
  - pattern: g_rand_double(...)
  - pattern: g_rand_double_range(...)
  - pattern: g_random_boolean(...)
  - pattern: g_random_int(...)
  - pattern: g_random_int_range(...)
  - pattern: g_random_double(...)
  - pattern: g_random_double_range(...)
  - pattern-regex: (long|short|double|int|float|void)\s(\*|)(\s|)(seed48|lcong48)(\(.*\))\;
  severity: WARNING
- id: gitlab.flawfinder.CreateProcess-1
  languages:
  - c
  message: |
    Specify the application path in the first argument, NOT as part of the second, or embedded
    spaces could allow an attacker to force a different program to run.
  metadata:
    cwe: 'CWE-78'
    shortDescription: 'This causes a new process to execute and is difficult to use safely
      (CWE-78)'
    primary_identifier: flawfinder.CreateProcess-1
    secondary_identifiers:
    - name: Flawfinder - CreateProcess
      type: flawfinder_func_name
      value: CreateProcess
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.CreateProcess-1
    shortlink: https://sg.run/Q4KD
    semgrep.dev:
      rule:
        rule_id: YGUQ94
        version_id: qkTGAK
        url: https://semgrep.dev/playground/r/qkTGAK/gitlab.flawfinder.CreateProcess-1
        origin: custom
  pattern: CreateProcess(...)
  severity: WARNING
- id: gitlab.flawfinder.CreateProcessAsUser-1.CreateProcessWithLogon-1
  languages:
  - c
  message: |
    Especially watch out for embedded spaces.
  metadata:
    cwe: 'CWE-78'
    shortDescription: 'This causes a new process to execute and is difficult to use safely
      (CWE-78)'
    primary_identifier: flawfinder.CreateProcessAsUser-1.CreateProcessWithLogon-1
    secondary_identifiers:
    - name: Flawfinder - CreateProcessAsUser
      type: flawfinder_func_name
      value: CreateProcessAsUser
    - name: Flawfinder - CreateProcessWithLogon
      type: flawfinder_func_name
      value: CreateProcessWithLogon
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.CreateProcessAsUser-1.CreateProcessWithLogon-1
    shortlink: https://sg.run/34Yg
    semgrep.dev:
      rule:
        rule_id: 6JU6Pz
        version_id: l4Tb3e
        url: https://semgrep.dev/playground/r/l4Tb3e/gitlab.flawfinder.CreateProcessAsUser-1.CreateProcessWithLogon-1
        origin: custom
  pattern-either:
  - pattern: CreateProcessAsUser(...)
  - pattern: CreateProcessWithLogon(...)
  severity: WARNING
- id: gitlab.flawfinder.execl-1.execlp-1.execle-1.execv-1.execvp-1.popen-1.WinExec-1.ShellExecute-1
  languages:
  - c
  message: |
    try using a library call that implements the same functionality if available.
  metadata:
    cwe: 'CWE-78'
    shortDescription: 'This causes a new program to execute and is difficult to use safely
      (CWE-78)'
    primary_identifier: flawfinder.execl-1.execlp-1.execle-1.execv-1.execvp-1.popen-1.WinExec-1.ShellExecute-1
    secondary_identifiers:
    - name: Flawfinder - execl
      type: flawfinder_func_name
      value: execl
    - name: Flawfinder - execlp
      type: flawfinder_func_name
      value: execlp
    - name: Flawfinder - execle
      type: flawfinder_func_name
      value: execle
    - name: Flawfinder - execv
      type: flawfinder_func_name
      value: execv
    - name: Flawfinder - execvp
      type: flawfinder_func_name
      value: execvp
    - name: Flawfinder - popen
      type: flawfinder_func_name
      value: popen
    - name: Flawfinder - WinExec
      type: flawfinder_func_name
      value: WinExec
    - name: Flawfinder - ShellExecute
      type: flawfinder_func_name
      value: ShellExecute
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.execl-1.execlp-1.execle-1.execv-1.execvp-1.popen-1.WinExec-1.ShellExecute-1
    shortlink: https://sg.run/4P6g
    semgrep.dev:
      rule:
        rule_id: oqUr85
        version_id: YDT5gx
        url: https://semgrep.dev/playground/r/YDT5gx/gitlab.flawfinder.execl-1.execlp-1.execle-1.execv-1.execvp-1.popen-1.WinExec-1.ShellExecute-1
        origin: custom
  pattern-either:
  - pattern: execl(...)
  - pattern: execlp(...)
  - pattern: execle(...)
  - pattern: execv(...)
  - pattern: execvp(...)
  - pattern: popen(...)
  - pattern: WinExec(...)
  - pattern: ShellExecute(...)
  severity: ERROR
- id: gitlab.flawfinder.system-1
  languages:
  - c
  message: |
    try using a library call that implements the same functionality if available.
  metadata:
    cwe: 'CWE-78'
    shortDescription: 'This causes a new program to execute and is difficult to use safely
      (CWE-78)'
    primary_identifier: flawfinder.system-1
    secondary_identifiers:
    - name: Flawfinder - system
      type: flawfinder_func_name
      value: system
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.system-1
    shortlink: https://sg.run/P80N
    semgrep.dev:
      rule:
        rule_id: zdU17X
        version_id: 6xT344
        url: https://semgrep.dev/playground/r/6xT344/gitlab.flawfinder.system-1
        origin: custom
  pattern: system(...)
  severity: ERROR
- id: gitlab.flawfinder.GetTempFileName-1
  languages:
  - c
  message: |
    Temporary file race condition in certain cases.
  metadata:
    cwe: 'CWE-377'
    shortDescription: 'Temporary file race condition in certain cases (e.g., if run as
      SYSTEM in many versions of Windows) (CWE-377)'
    primary_identifier: flawfinder.GetTempFileName-1
    secondary_identifiers:
    - name: Flawfinder - GetTempFileName
      type: flawfinder_func_name
      value: GetTempFileName
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.GetTempFileName-1
    shortlink: https://sg.run/JjGo
    semgrep.dev:
      rule:
        rule_id: pKUw7J
        version_id: o5TvGQ
        url: https://semgrep.dev/playground/r/o5TvGQ/gitlab.flawfinder.GetTempFileName-1
        origin: custom
  pattern: GetTempFileName(...)
  severity: WARNING
- id: gitlab.flawfinder.mkstemp-1
  languages:
  - c
  message: |
    Some older Unix-like systems create temp files with permission to write by
    all by default, so be sure to set the umask to override this. Also, some older
    Unix systems might fail to use O_EXCL when opening the file, so make sure that
    O_EXCL is used by the library.
  metadata:
    cwe: 'CWE-377'
    shortDescription: 'Potential for temporary file vulnerability in some circumstances.'
    primary_identifier: flawfinder.mkstemp-1
    secondary_identifiers:
    - name: Flawfinder - mkstemp
      type: flawfinder_func_name
      value: mkstemp
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.mkstemp-1
    shortlink: https://sg.run/5Jo6
    semgrep.dev:
      rule:
        rule_id: 2ZUKJn
        version_id: zyTd6v
        url: https://semgrep.dev/playground/r/zyTd6v/gitlab.flawfinder.mkstemp-1
        origin: custom
  pattern: mkstemp(...)
  severity: INFO
- id: gitlab.flawfinder.mktemp-1
  languages:
  - c
  message: |
    Creating and using insecure temporary files can leave application and system data vulnerable to
    attack (CWE-377).
  metadata:
    cwe: 'CWE-377'
    shortDescription: 'Temporary file race condition (CWE-377)'
    primary_identifier: flawfinder.mktemp-1
    secondary_identifiers:
    - name: Flawfinder - mktemp
      type: flawfinder_func_name
      value: mktemp
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.mktemp-1
    shortlink: https://sg.run/GwPB
    semgrep.dev:
      rule:
        rule_id: X5U76e
        version_id: pZToR4
        url: https://semgrep.dev/playground/r/pZToR4/gitlab.flawfinder.mktemp-1
        origin: custom
  pattern: mktemp(...)
  severity: ERROR
- id: gitlab.flawfinder.tmpfile-1
  languages:
  - c
  message: |
    Creating and using insecure temporary files can leave application and system data vulnerable to
    attack
  metadata:
    cwe: 'CWE-377'
    shortDescription: 'Function tmpfile() has a security flaw on some systems (e.g., older
      System V systems) (CWE-377)'
    primary_identifier: flawfinder.tmpfile-1
    secondary_identifiers:
    - name: Flawfinder - tmpfile
      type: flawfinder_func_name
      value: tmpfile
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.tmpfile-1
    shortlink: https://sg.run/RPqE
    semgrep.dev:
      rule:
        rule_id: j2UR7A
        version_id: 2KTenk
        url: https://semgrep.dev/playground/r/2KTenk/gitlab.flawfinder.tmpfile-1
        origin: custom
  pattern: tmpfile(...)
  severity: INFO
- id: gitlab.flawfinder.tmpnam-1.tempnam-1
  languages:
  - c
  message: |
    Creating and using insecure temporary files can leave application and system data vulnerable to
    attack.
  metadata:
    cwe: 'CWE-377'
    shortDescription: 'Temporary file race condition (CWE-377)'
    primary_identifier: flawfinder.tmpnam-1.tempnam-1
    secondary_identifiers:
    - name: Flawfinder - tmpnam
      type: flawfinder_func_name
      value: tmpnam
    - name: Flawfinder - tempnam
      type: flawfinder_func_name
      value: tempnam
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.tmpnam-1.tempnam-1
    shortlink: https://sg.run/Awkg
    semgrep.dev:
      rule:
        rule_id: 10Ueqw
        version_id: X0TEG1
        url: https://semgrep.dev/playground/r/X0TEG1/gitlab.flawfinder.tmpnam-1.tempnam-1
        origin: custom
  pattern-either:
  - pattern: tmpnam(...)
  - pattern: tempnam(...)
  severity: WARNING
- id: gitlab.security_code_scan.SCS0019-1
  patterns:
  - pattern-inside: |
      [Authorize]
      public class $CLZ {
        ...
      }
  - pattern: |
      [OutputCache]
      public $RET $FOO(...)
      {
        ...
      }
  message: |
    Having the annotation [OutputCache] will disable the annotation [Authorize] for
    the requests following the first one.
  languages:
  - csharp
  severity: INFO
  metadata:
    category: security
    cwe: 'CWE-524'
    shortDescription: 'Use of Cache Containing Sensitive Information'
    primary_identifier: security_code_scan.SCS0019-1
    secondary_identifiers:
    - name: SCS0019
      type: security_code_scan_rule_id
      value: SCS0019
    license: MIT
    source: https://semgrep.dev/r/gitlab.security_code_scan.SCS0019-1
    shortlink: https://sg.run/QyJZ
    semgrep.dev:
      rule:
        rule_id: eqU4Z2
        version_id: A8T8Pg
        url: https://semgrep.dev/playground/r/A8T8Pg/gitlab.security_code_scan.SCS0019-1
        origin: custom
- id: gitlab.security_code_scan.SCS0009-1
  mode: taint
  pattern-sources:
  - pattern: |
      var $COOKIE = new HttpCookie(...);
  pattern-sinks:
  - pattern: $COOKIE
  pattern-sanitizers:
  - pattern: $COOKIE.HttpOnly = true;
  message: |
    The HttpOnly flag is not set for the cookie. An attacker could perform XSS with a malicious
    script.
  languages:
  - csharp
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-1004'
    shortDescription: 'Sensitive Cookie Without ''HttpOnly'' Flag'
    primary_identifier: security_code_scan.SCS0009-1
    secondary_identifiers:
    - name: SCS0009
      type: security_code_scan_rule_id
      value: SCS0009
    license: MIT
    source: https://semgrep.dev/r/gitlab.security_code_scan.SCS0009-1
    shortlink: https://sg.run/39QK
    semgrep.dev:
      rule:
        rule_id: v8ULvw
        version_id: BjT5jb
        url: https://semgrep.dev/playground/r/BjT5jb/gitlab.security_code_scan.SCS0009-1
        origin: custom
- id: gitlab.security_code_scan.SCS0008-1
  mode: taint
  pattern-sources:
  - pattern: |
      var $COOKIE = new HttpCookie(...);
  pattern-sinks:
  - pattern: $COOKIE
  pattern-sanitizers:
  - pattern: $COOKIE.Secure = true;
  message: |
    The Secure attribute for sensitive cookies in HTTPS sessions is not set, which could cause the
    user agent to send those cookies in plaintext over an HTTP session.
  languages:
  - csharp
  severity: WARNING
  metadata:
    category: security
    cwe: "CWE-614: Sensitive Cookie in HTTPS Session Without \u2018Secure\u2019 Attribute"
    primary_identifier: security_code_scan.SCS0008-1
    secondary_identifiers:
    - name: SCS0008
      type: security_code_scan_rule_id
      value: SCS0008
    license: MIT
    source: https://semgrep.dev/r/gitlab.security_code_scan.SCS0008-1
    shortlink: https://sg.run/49k5
    semgrep.dev:
      rule:
        rule_id: d8U86o
        version_id: DkTJow
        url: https://semgrep.dev/playground/r/DkTJow/gitlab.security_code_scan.SCS0008-1
        origin: custom
- id: gitlab.security_code_scan.SCS0004-1
  patterns:
  - pattern-inside: |
      using System.Net;
      ...
  - pattern: ServicePointManager.ServerCertificateValidationCallback += $CALLBACK;
  - metavariable-pattern:
      metavariable: $CALLBACK
      patterns:
      - pattern-either:
        - pattern: $RETURNTYPE $FUNC(...) { return true; }
        - pattern: (...) => true;
  message: |
    When a certificate is invalid or malicious, it might allow an attacker to spoof a trusted
    entity by interfering in the communication path between the host and client. The software might
    connect to a malicious host while believing it is a trusted host, or the software might be
    deceived into accepting spoofed data that appears to originate from a trusted host.
  languages:
  - csharp
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-295'
    shortDescription: 'Improper Certificate Validation'
    primary_identifier: security_code_scan.SCS0004-1
    secondary_identifiers:
    - name: SCS0004
      type: security_code_scan_rule_id
      value: SCS0004
    license: MIT
    source: https://semgrep.dev/r/gitlab.security_code_scan.SCS0004-1
    shortlink: https://sg.run/PwPz
    semgrep.dev:
      rule:
        rule_id: ZqUDen
        version_id: WrT95G
        url: https://semgrep.dev/playground/r/WrT95G/gitlab.security_code_scan.SCS0004-1
        origin: custom
- id: gitlab.security_code_scan.SCS0010-1
  patterns:
  - pattern-inside: |
      using System.Security.Cryptography;
      ...
  - pattern-either:
    - pattern-regex: .*DES\.Create\(\);
    - pattern: new DESCryptoServiceProvider();
    - pattern-regex: .*TripleDES\.Create\(\);
    - pattern: new TripleDESCryptoServiceProvider();
    - pattern-regex: .*RC2\.Create\(\);
    - pattern: new RC2CryptoServiceProvider();
  message: |
    The use of a broken or risky cryptographic algorithm is an unnecessary risk that may result in
    the exposure of sensitive information.
  languages:
  - csharp
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-327'
    shortDescription: 'Use of a Broken or Risky Cryptographic Algorithm'
    primary_identifier: security_code_scan.SCS0010-1
    secondary_identifiers:
    - name: SCS0010
      type: security_code_scan_rule_id
      value: SCS0010
    license: MIT
    source: https://semgrep.dev/r/gitlab.security_code_scan.SCS0010-1
    shortlink: https://sg.run/Jzwy
    semgrep.dev:
      rule:
        rule_id: nJUQnX
        version_id: 0bTBkq
        url: https://semgrep.dev/playground/r/0bTBkq/gitlab.security_code_scan.SCS0010-1
        origin: custom
- id: gitlab.security_code_scan.SCS0013-1
  patterns:
  - pattern-inside: |
      using System.Security.Cryptography;
      ...
  - metavariable-regex:
      metavariable: $CIPHER
      regex: ^(ECB|CBC|OFB|CFB|CTS)$
  - pattern: CipherMode.$CIPHER
  message: |
    The cipher text produced is susceptible to alteration by an adversary. The cipher provides no
    way to detect that the data has been tampered with. If the cipher text can be controlled by an
    attacker, it could be altered without detection. The use of AES in CBC mode with a HMAC is
    recommended guaranteeing integrity and confidentiality.
  languages:
  - csharp
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-327'
    shortDescription: 'Use of a Broken or Risky Cryptographic Algorithm'
    primary_identifier: security_code_scan.SCS0013-1
    secondary_identifiers:
    - name: SCS0013
      type: security_code_scan_rule_id
      value: SCS0013
    license: MIT
    source: https://semgrep.dev/r/gitlab.security_code_scan.SCS0013-1
    shortlink: https://sg.run/5gZ0
    semgrep.dev:
      rule:
        rule_id: EwUe1Z
        version_id: K3Te9Q
        url: https://semgrep.dev/playground/r/K3Te9Q/gitlab.security_code_scan.SCS0013-1
        origin: custom
- id: gitlab.security_code_scan.SCS0006-1
  patterns:
  - pattern-either:
    - patterns:
      - metavariable-regex:
          metavariable: $HASH_PROVIDER
          regex: ^(SHA1CryptoServiceProvider|MD5CryptoServiceProvider)$
      - pattern: new $HASH_PROVIDER
    - patterns:
      - metavariable-regex:
          metavariable: $HASH_CLASS
          regex: ^System.Security.Cryptography.(SHA1|MD5)$
      - pattern: $HASH_CLASS.$METHOD();
  message: |
    The use of a broken or risky cryptographic algorithm is an unnecessary risk that may result in
    the exposure of sensitive information.
  languages:
  - csharp
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-327'
    shortDescription: 'Use of a Broken or Risky Cryptographic Algorithm'
    primary_identifier: security_code_scan.SCS0006-1
    secondary_identifiers:
    - name: SCS0006
      type: security_code_scan_rule_id
      value: SCS0006
    license: MIT
    source: https://semgrep.dev/r/gitlab.security_code_scan.SCS0006-1
    shortlink: https://sg.run/Gzbq
    semgrep.dev:
      rule:
        rule_id: 7KUKbk
        version_id: qkTGgK
        url: https://semgrep.dev/playground/r/qkTGgK/gitlab.security_code_scan.SCS0006-1
        origin: custom
- id: gitlab.security_code_scan.SCS0005-1
  patterns:
  - pattern: (Random $RNG).$METHOD(...);
  - focus-metavariable: $RNG
  message: |
    The use of a predictable random value can lead to vulnerabilities when used in certain security
    critical contexts.
  languages:
  - csharp
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-338'
    shortDescription: 'Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG)'
    primary_identifier: security_code_scan.SCS0005-1
    secondary_identifiers:
    - name: SCS0005
      type: security_code_scan_rule_id
      value: SCS0005
    license: MIT
    source: https://semgrep.dev/r/gitlab.security_code_scan.SCS0005-1
    shortlink: https://sg.run/Rw5q
    semgrep.dev:
      rule:
        rule_id: L1URz8
        version_id: l4Tbqe
        url: https://semgrep.dev/playground/r/l4Tbqe/gitlab.security_code_scan.SCS0005-1
        origin: custom
- id: gitlab.security_code_scan.SCS0016-1
  patterns:
  - pattern: |
      [$HTTPMETHOD]
      public $RET $FOO(...) {
        ...
      }
  - pattern-not: |
      [ValidateAntiForgeryToken]
      public $RET $FOO(...) {
        ...
      }
  - metavariable-regex:
      metavariable: $HTTPMETHOD
      regex: Http(Post|Delete|Patch|Put)
  message: "An attacker could send a link to the victim. By visiting the\nmalicious
    link, a web page would trigger a POST request (because it is a\nblind attack -
    the attacker doesn\u2019t see a response from triggered request\nand has no use
    from GET request and GET requests should not change a state\non the server by
    definition) to the website. The victim would not be able\nto acknowledge that
    an action is made in the background, but his cookie\nwould be automatically submitted
    if he is authenticated to the website.\nThis attack does not require special interaction
    other than visiting a\nwebsite.\n"
  languages:
  - csharp
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-352'
    shortDescription: 'Cross-Site Request Forgery (CSRF)'
    primary_identifier: security_code_scan.SCS0016-1
    secondary_identifiers:
    - name: SCS0016
      type: security_code_scan_rule_id
      value: SCS0016
    license: MIT
    source: https://semgrep.dev/r/gitlab.security_code_scan.SCS0016-1
    shortlink: https://sg.run/AKL2
    semgrep.dev:
      rule:
        rule_id: 8GU3vk
        version_id: YDT5Gx
        url: https://semgrep.dev/playground/r/YDT5Gx/gitlab.security_code_scan.SCS0016-1
        origin: custom
- id: gitlab.security_code_scan.SCS0028-1
  patterns:
  - pattern-not: $OBJ.Deserialize("...")
  - pattern-not: $OBJ.UnsafeDeserialize("...")
  - pattern-not: $OBJ.UnsafeDeserializeMethodResponse("...")
  - pattern-not: $OBJ.ReadObject("...")
  - pattern-not: $OBJ.DeserializeFromString("...")
  - pattern-not: $OBJ.DeserializeFromReader("...")
  - pattern-not: $OBJ.DeserializeFromStream("...")
  - pattern-not: $OBJ.DeserializeRequest("...")
  - pattern-not: $OBJ.ToObject("...")
  - pattern-not: $OBJ.DeserializeResponse("...")
  - pattern-not: new System.Runtime.Serialization.DataContractSerializer("...")
  - pattern-not: new System.Runtime.Serialization.Json.DataContractJsonSerializer("...")
  - pattern-not: new System.Xml.Serialization.XmlSerializer("...")
  - pattern-not: new System.Resources.ResourceReader("...")
  - pattern-not: (System.Messaging.XmlMessageFormatter $E).Read("...")
  - pattern-not: (System.Messaging.BinaryMessageFormatter $E).Read("...")
  - pattern-either:
    - pattern: $OBJ.Deserialize(...)
    - pattern: $OBJ.UnsafeDeserialize(...)
    - pattern: $OBJ.UnsafeDeserializeMethodResponse(...)
    - pattern: $OBJ.ReadObject(...)
    - pattern: $OBJ.DeserializeFromString(...)
    - pattern: $OBJ.DeserializeFromReader(...)
    - pattern: $OBJ.DeserializeFromStream(...)
    - pattern: $OBJ.DeserializeRequest(...)
    - pattern: $OBJ.ToObject(...)
    - pattern: $OBJ.DeserializeResponse(...)
    - pattern: new System.Runtime.Serialization.DataContractSerializer(...)
    - pattern: new System.Runtime.Serialization.Json.DataContractJsonSerializer(...)
    - pattern: new System.Xml.Serialization.XmlSerializer(...)
    - pattern: new System.Resources.ResourceReader(...)
    - pattern: (System.Messaging.XmlMessageFormatter $E).Read(...)
    - pattern: (System.Messaging.BinaryMessageFormatter $E).Read(...)
  languages:
  - csharp
  message: |
    The application deserializes untrusted data without sufficiently verifying that
    the resulting data will be valid.
  metadata:
    category: security
    cwe: 'CWE-502'
    shortDescription: 'Deserialization of Untrusted Data'
    primary_identifier: security_code_scan.SCS0028-1
    secondary_identifiers:
    - name: SCS0028
      type: security_code_scan_rule_id
      value: SCS0028
    license: MIT
    source: https://semgrep.dev/r/gitlab.security_code_scan.SCS0028-1
    shortlink: https://sg.run/BqeA
    semgrep.dev:
      rule:
        rule_id: gxUrkX
        version_id: 6xT374
        url: https://semgrep.dev/playground/r/6xT374/gitlab.security_code_scan.SCS0028-1
        origin: custom
  severity: WARNING
- id: gitlab.security_code_scan.SCS0027-1
  mode: taint
  pattern-sources:
  - patterns:
    - pattern: $SRC
    - pattern-inside: |
        public $RET $FUNC(...,$SRC,...){...}
  pattern-sanitizers:
  - pattern-either:
    - pattern: TryCreate(...)
    - pattern: Action(...)
    - pattern: HttpRouteUrl(...)
    - pattern: RouteUrl(...)
  pattern-sinks:
  - patterns:
    - pattern-not-inside: |
        if (IsLocalUrl(...)) {
            ...
            Redirect(...);
            ...
        }
    - pattern-not-inside: |
        if ($URL.IsLocalUrl(...)) {
            ...
            Redirect(...);
            ...
        }
    - pattern-either:
      - pattern: Redirect(...)
      - pattern: RedirectPermanent(...)
      - pattern: RedirectToRoute(...)
      - pattern: RedirectToRoutePermanent(...)
      - pattern: new RedirectResult(...)
  languages:
  - csharp
  message: |
    Unvalidated redirects occur when an application redirects a user to a
    destination URL specified by a user supplied parameter that is not validated.
    Such vulnerabilities can be used to facilitate phishing attacks.
  metadata:
    category: security
    cwe: 'CWE-601'
    shortDescription: 'URL Redirection to Untrusted Site (''Open Redirect'')'
    primary_identifier: security_code_scan.SCS0027-1
    secondary_identifiers:
    - name: SCS0027
      type: security_code_scan_rule_id
      value: SCS0027
    license: MIT
    source: https://semgrep.dev/r/gitlab.security_code_scan.SCS0027-1
    shortlink: https://sg.run/DYeP
    semgrep.dev:
      rule:
        rule_id: QrUE1q
        version_id: o5TvQQ
        url: https://semgrep.dev/playground/r/o5TvQQ/gitlab.security_code_scan.SCS0027-1
        origin: custom
  severity: WARNING
- id: gitlab.security_code_scan.SCS0001-1
  patterns:
  - pattern-inside: |
      using System.Diagnostics;
      ...
  - pattern-either:
    - patterns:
      - pattern: Process.Start($ARG)
      - pattern-not: Process.Start("...")
    - pattern: (Process $PROC).StartInfo.FileName = <...$ARG...>;
    - pattern: (Process $PROC).StartInfo.Arguments = <...$ARG...>;
    - patterns:
      - pattern-inside: |
          $PSINFO = new ProcessStartInfo(...)
          ...
          Process.Start($PSINFO)
      - pattern-either:
        - pattern: $PSINFO.Arguments = <...$ARG...>;
        - pattern: $PSINFO.FileName = <...$ARG...>;
  message: |
    The highlighted API is used to execute a system command. If unfiltered input is passed to this
    API, it can lead to arbitrary command execution.
  languages:
  - csharp
  severity: ERROR
  metadata:
    category: security
    cwe: 'CWE-78'
    shortDescription: 'Improper Neutralization of Special Elements used in an OS Command
      (''OS Command Injection'')'
    primary_identifier: security_code_scan.SCS0001-1
    secondary_identifiers:
    - name: SCS0001
      type: security_code_scan_rule_id
      value: SCS0001
    license: MIT
    source: https://semgrep.dev/r/gitlab.security_code_scan.SCS0001-1
    shortlink: https://sg.run/WbD2
    semgrep.dev:
      rule:
        rule_id: 3qU2L1
        version_id: zyTdgv
        url: https://semgrep.dev/playground/r/zyTdgv/gitlab.security_code_scan.SCS0001-1
        origin: custom
- id: gitlab.security_code_scan.SCS0026-1.SCS0031-1
  patterns:
  - pattern-either:
    - patterns:
      - pattern: (DirectorySearcher $SOURCE).Filter = ...
      - pattern-not: (DirectorySearcher $SOURCE).Filter = "..."
    - patterns:
      - pattern: (DirectorySearcher $SOURCE).Path = ...
      - pattern-not: (DirectorySearcher $SOURCE).Path = "..."
  message: |
    The software constructs all or part of an LDAP query using
    externally-influenced input from an upstream component, but it does not
    neutralize or incorrectly neutralizes special elements that could modify
    the intended LDAP query when it is sent to a downstream component.
  languages:
  - csharp
  severity: WARNING
  metadata:
    category: security
    cwe: "CWE-90: Improper Neutralization of Special Elements used in an LDAP Query
      (\u2018LDAP Injection\u2019)"
    primary_identifier: security_code_scan.SCS0026-1.SCS0031-1
    secondary_identifiers:
    - name: SCS0026
      type: security_code_scan_rule_id
      value: SCS0026
    - name: SCS0031
      type: security_code_scan_rule_id
      value: SCS0031
    license: MIT
    source: https://semgrep.dev/r/gitlab.security_code_scan.SCS0026-1.SCS0031-1
    shortlink: https://sg.run/0ZWj
    semgrep.dev:
      rule:
        rule_id: 4bUbeO
        version_id: pZTog4
        url: https://semgrep.dev/playground/r/pZTog4/gitlab.security_code_scan.SCS0026-1.SCS0031-1
        origin: custom
- id: gitlab.security_code_scan.SCS0002-1
  patterns:
  - pattern-either:
    - patterns:
      - metavariable-regex:
          metavariable: $FUNC
          regex: ^(SqlQuery|ExecuteSqlCommand|ExecuteSqlCommandAsync|ExecuteSqlRaw|ExecuteSqlRawAsync|FromSqlRaw|FromSql|GetSqlStringCommand|ExecuteDataSet|ExecuteReader|ExecuteNonQuery|ExecuteScalar|CreateSQLQuery)$
      - pattern: $DB.$FUNC($ARG, ...);
      - pattern-not: $DB.$FUNC("...", ...);
    - patterns:
      - metavariable-regex:
          metavariable: $FUNC
          regex: ^(ExecuteQuery|ExecuteCommand)$
      - pattern-inside: |
          using System.Data.Linq;
          ...
      - pattern: (DataContext $CTX).$FUNC($ARG, ...)
    - patterns:
      - metavariable-regex:
          metavariable: $IMPL
          regex: ^(SqlCommand|OracleCommand|NpgsqlCommand|MySqlCommand|EntityCommand|OdbcCommand|OleDbCommand|SqliteCommand)$
      - pattern-either:
        - patterns:
          - pattern: new $IMPL($ARG, ...);
          - pattern-not: new $IMPL("...", ...);
        - patterns:
          - pattern: ($IMPL $CMD).CommandText = <...$ARG...>;
          - pattern-not: ($IMPL $CMD).CommandText = "...";
    - patterns:
      - metavariable-regex:
          metavariable: $FUNC
          regex: ^(ExecuteDataRow|ExecuteDataRowAsync|ExecuteDataset|ExecuteDatasetAsync|ExecuteNonQuery|ExecuteNonQueryAsync|ExecuteReader|ExecuteReaderAsync|ExecuteScalar|ExecuteScalarAsync|UpdateDataSet|UpdateDataSetAsync)$
      - pattern-inside: |
          using MySql.Data.MySqlClient;
          ...
      - pattern: MySqlHelper.$FUNC("...", $ARG, ...);
    - patterns:
      - pattern-inside: |
          using Cassandra;
          ...
      - pattern: (Session $SESS).Execute($ARG, ...);
      - pattern-not: (Session $SESS).Execute("...", ...);
  message: |
    The method identified is susceptible to injection. The input should be validated and properly
    escaped.
  languages:
  - csharp
  severity: ERROR
  metadata:
    category: security
    cwe: "CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (\u2018SQL Injection\u2019)"
    primary_identifier: security_code_scan.SCS0002-1
    secondary_identifiers:
    - name: SCS0002
      type: security_code_scan_rule_id
      value: SCS0002
    license: MIT
    source: https://semgrep.dev/r/gitlab.security_code_scan.SCS0002-1
    shortlink: https://sg.run/K1y5
    semgrep.dev:
      rule:
        rule_id: PeUejg
        version_id: 2KTeNk
        url: https://semgrep.dev/playground/r/2KTeNk/gitlab.security_code_scan.SCS0002-1
        origin: custom
- id: gitlab.security_code_scan.SCS0003-1
  patterns:
  - pattern-inside: |
      using System.Xml;
      ...
  - pattern-either:
    - patterns:
      - metavariable-regex:
          metavariable: $FUNC
          regex: ^(SelectNodes|SelectSingleNode|Compile|Evaluate|Matches|Select|SelectAncestors|SelectChildren|SelectDescendants)$
      - metavariable-regex:
          metavariable: $TY
          regex: ^(XPathNavigator|XmlDocument|XmlNode|XmlDocumentXPathExtensions)$
      - pattern: ($TY $VAR).$FUNC(<...$ARG...>, ...)
      - pattern-not: ($TY $VAR).$FUNC("...", ...)
    - patterns:
      - pattern-inside: |
          using System.Xml.Linq;
          ...
      - metavariable-regex:
          metavariable: $FUNC
          regex: ^(XPathEvaluate|XPathSelectElement|XPathSelectElements)$
      - pattern: $VAR.$FUNC(<...$ARG...>, ...)
      - pattern-not: $VAR.$FUNC("...", ...)
    - patterns:
      - pattern-inside: |
          using System.Xml.Schema;
          ...
      - pattern-either:
        - patterns:
          - pattern: $VAR.XPath = <...$ARG...>;
          - pattern-not: $VAR.XPath = "..."
        - patterns:
          - pattern: new XmlSchemaXPath { XPath = <...$ARG...> };
          - focus-metavariable: $ARG
  message: |
    The method identified is susceptible to injection. The input should be validated and properly
    escaped.
  languages:
  - csharp
  severity: INFO
  metadata:
    category: security
    cwe: "CWE-643: Improper Neutralization of Data within XPath Expressions (\u2018XPath
      Injection\u2019)"
    primary_identifier: security_code_scan.SCS0003-1
    secondary_identifiers:
    - name: SCS0003
      type: security_code_scan_rule_id
      value: SCS0003
    license: MIT
    source: https://semgrep.dev/r/gitlab.security_code_scan.SCS0003-1
    shortlink: https://sg.run/qeZ7
    semgrep.dev:
      rule:
        rule_id: JDUnoJ
        version_id: X0TEe1
        url: https://semgrep.dev/playground/r/X0TEe1/gitlab.security_code_scan.SCS0003-1
        origin: custom
- id: gitlab.security_code_scan.SCS0007-1
  mode: taint
  pattern-sanitizers:
  - pattern: (XmlReaderSettings $SETTINGS).ProhibitDtd = true;
  - pattern: (XmlReaderSettings $SETTINGS).DtdProcessing = DtdProcessing.Prohibit;
  - pattern: (XmlDocument $DOC).XmlResolver = null;
  - pattern: var $DOC = new XmlDocument { ..., XmlResolver = null, ... };
  pattern-sinks:
  - pattern: XmlReader.Create(..., $SETTINGS);
  - pattern: (XmlDocument $DOC).Load(...);
  pattern-sources:
  - pattern: var $SETTINGS = new XmlReaderSettings();
  - pattern: var $DOC = new XmlDocument(...);
  - pattern: var $DOC = new XmlDocument {...};
  message: |
    The method identified is susceptible to injection. The input should be validated and properly
    escaped.
  languages:
  - csharp
  severity: WARNING
  metadata:
    category: security
    cwe: "CWE-611: Improper Restriction of XML External Entity Reference (\u2018XXE\u2019)"
    primary_identifier: security_code_scan.SCS0007-1
    secondary_identifiers:
    - name: SCS0007
      type: security_code_scan_rule_id
      value: SCS0007
    license: MIT
    source: https://semgrep.dev/r/gitlab.security_code_scan.SCS0007-1
    shortlink: https://sg.run/lbWE
    semgrep.dev:
      rule:
        rule_id: 5rU7N6
        version_id: jQTWeW
        url: https://semgrep.dev/playground/r/jQTWeW/gitlab.security_code_scan.SCS0007-1
        origin: custom
- id: gitlab.security_code_scan.SCS0012-1
  patterns:
  - pattern-inside: |
      using System.Web.Mvc;
      ...
  - pattern-either:
    - pattern: |
        [$ANNO]
        class $CLASS : Controller{ ... }
    - pattern: |
        class $CLASS : Controller{ ... }
  - pattern-not: |
      [AllowAnonymous]
      class $CLASS : Controller{ ... }
  - pattern-not: |
      [Authorize]
      class $CLASS : Controller{ ... }
  message: |
    The endpoint is potentially accessible to not authorized users. If it contains sensitive
    information, like log files for example, it may lead to privilege escalation.
  languages:
  - csharp
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-284'
    shortDescription: 'Improper Access Control'
    primary_identifier: security_code_scan.SCS0012-1
    secondary_identifiers:
    - name: SCS0012
      type: security_code_scan_rule_id
      value: SCS0012
    license: MIT
    source: https://semgrep.dev/r/gitlab.security_code_scan.SCS0012-1
    shortlink: https://sg.run/YZ4y
    semgrep.dev:
      rule:
        rule_id: GdUlow
        version_id: 1QTBW6
        url: https://semgrep.dev/playground/r/1QTBW6/gitlab.security_code_scan.SCS0012-1
        origin: custom
- id: gitlab.security_code_scan.SCS0011-1
  patterns:
  - pattern-either:
    - pattern: new XsltSettings() {EnableScript = true};
    - pattern: |
        var $SETTINGS = new XsltSettings();
        ...
        $SETTINGS.EnableScript = true;
  message: |
    The method identified is susceptible to injection. The input should be validated and properly
    escaped.
  languages:
  - csharp
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-611'
    shortDescription: 'Improper Restriction of XML External Entity Reference'
    primary_identifier: security_code_scan.SCS0011-1
    secondary_identifiers:
    - name: SCS0011
      type: security_code_scan_rule_id
      value: SCS0011
    license: MIT
    source: https://semgrep.dev/r/gitlab.security_code_scan.SCS0011-1
    shortlink: https://sg.run/64k1
    semgrep.dev:
      rule:
        rule_id: ReUE21
        version_id: 9lT2Np
        url: https://semgrep.dev/playground/r/9lT2Np/gitlab.security_code_scan.SCS0011-1
        origin: custom
- id: gitlab.security_code_scan.SCS0032-1.SCS0033-1.SCS0034-1
  patterns:
  - pattern: |
      new PasswordValidator
      {
        ...,
      };
  - pattern: |
      new PasswordValidator
      {
        ...,
        RequiredLength = $LEN,
        ...,
      };
  - pattern-not: |
      new PasswordValidator
      {
        ...,
        RequireNonLetterOrDigit = true,
        ...,
      };
  - pattern-not: |
      new PasswordValidator
      {
        ...,
        RequireDigit = true,
        ...,
      };
  - pattern-not: |
      new PasswordValidator
      {
        ...,
        RequireLowercase = true,
        ...,
      };
  - pattern-not: |
      new PasswordValidator
      {
        ...,
        RequireUppercase = true,
        ...,
      };
  - metavariable-comparison:
      metavariable: $LEN
      comparison: $LEN < 8
  message: |
    The product does not require that users should have strong passwords, which
    makes it easier for attackers to compromise user accounts.
  languages:
  - csharp
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-521'
    shortDescription: 'Weak Password Requirements'
    primary_identifier: security_code_scan.SCS0032-1.SCS0033-1.SCS0034-1
    secondary_identifiers:
    - name: SCS0032
      type: security_code_scan_rule_id
      value: SCS0032
    - name: SCS0033
      type: security_code_scan_rule_id
      value: SCS0033
    - name: SCS0034
      type: security_code_scan_rule_id
      value: SCS0034
    license: MIT
    source: https://semgrep.dev/r/gitlab.security_code_scan.SCS0032-1.SCS0033-1.SCS0034-1
    shortlink: https://sg.run/o1e0
    semgrep.dev:
      rule:
        rule_id: AbUEJj
        version_id: yeT8bK
        url: https://semgrep.dev/playground/r/yeT8bK/gitlab.security_code_scan.SCS0032-1.SCS0033-1.SCS0034-1
        origin: custom
- id: gitlab.security_code_scan.SCS0018-1
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-inside: |
        public class $CLASS : Controller {
          ...
        }
    - pattern: $PARAM
    - pattern-either:
      - patterns:
        - metavariable-regex:
            metavariable: $HTTP_ANNO
            regex: ^(Http)
        - pattern-inside: |
            [$HTTP_ANNO]
            public string $METHOD(...,$PARAM,...){...}
      - pattern-inside: |
          public IActionResult $METHOD(...,$PARAM,...){...}
  pattern-sanitizers:
  - pattern-either:
    - pattern: (Microsoft.Extensions.FileProviders.PhysicalFileProvider $E).GetFileInfo(...)
    - pattern: (System.Web.HttpServerUtility $E).MapPath(...)
    - pattern: (System.Web.HttpServerUtilityBase $E).MapPath(...)
    - pattern: (System.Web.HttpRequest $E).MapPath(...)
  pattern-sinks:
  - pattern-either:
    - pattern: System.IO.Directory.Delete(...)
    - pattern: System.IO.Directory.GetFiles(...)
    - pattern: System.IO.Directory.Move(...)
    - pattern: System.IO.File.AppendAllLines(...)
    - pattern: System.IO.File.AppendAllLinesAsync(...)
    - pattern: System.IO.File.AppendAllText(...)
    - pattern: System.IO.File.AppendAllTextAsync(...)
    - pattern: System.IO.File.AppendText(...)
    - pattern: System.IO.File.Copy(...)
    - pattern: System.IO.File.Create(...)
    - pattern: System.IO.File.CreateText(...)
    - pattern: System.IO.File.Delete(...)
    - pattern: System.IO.File.Move(...)
    - pattern: System.IO.File.Open(...)
    - pattern: System.IO.File.OpenRead(...)
    - pattern: System.IO.File.OpenText(...)
    - pattern: System.IO.File.OpenWrite(...)
    - pattern: System.IO.File.ReadAllBytes(...)
    - pattern: System.IO.File.ReadAllBytesAsync(...)
    - pattern: System.IO.File.ReadAllLines(...)
    - pattern: System.IO.File.ReadAllLinesAsync(...)
    - pattern: System.IO.File.ReadAllText(...)
    - pattern: System.IO.File.ReadAllTextAsync(...)
    - pattern: System.IO.File.ReadLines(...)
    - pattern: System.IO.File.Replace(...)
    - pattern: System.IO.File.SetAccessControl(...)
    - pattern: System.IO.File.WriteAllBytes(...)
    - pattern: System.IO.File.WriteAllBytesAsync(...)
    - pattern: System.IO.File.WriteAllLines(...)
    - pattern: System.IO.File.WriteAllLinesAsync(...)
    - pattern: System.IO.File.WriteAllText(...)
    - pattern: System.IO.File.WriteAllTextAsync(...)
    - pattern: new System.IO.FileInfo(...)
    - pattern: (System.IO.FileInfo $E).CopyTo(...)
    - pattern: (System.IO.FileInfo $E).MoveTo(...)
    - pattern: (System.IO.FileInfo $E).Replace(...)
    - pattern: System.Reflection.Assembly.LoadFile(...)
    - pattern: System.Reflection.Assembly.LoadFrom(...)
    - pattern: System.Reflection.Assembly.ReflectionOnlyLoadFrom(...)
    - pattern: System.Reflection.Assembly.UnsafeLoadFrom(...)
    - pattern: System.AppDomain.AppendPrivatePath(...)
    - pattern: System.Xml.XmlReader.Create(...)
    - pattern: new System.IO.StreamReader.ctor(...)
    - pattern: new System.IO.StreamWriter.ctor(...)
    - pattern: new System.IO.FileStream.ctor(...)
    - pattern: new System.Web.Mvc.FilePathResult(...)
    - pattern: new Microsoft.AspNetCore.Mvc.PhysicalFileResult(...)
    - pattern: (Microsoft.AspNetCore.Mvc.RazorPages.PageModel $E).PhysicalFile(...)
    - pattern: (System.Web.UI.WebControls.FileUpload $E).SaveAs(...)
    - pattern: (System.Web.HttpResponse $E).TransmitFile(...)
    - pattern: (System.Web.HttpResponse $E).WriteFile(...)
    - pattern: (System.Web.HttpResponseBase $E).TransmitFile(...)
    - pattern: (System.Web.HttpResponseBase $E).WriteFile(...)
    - pattern: (System.IO.Compression.ZipFileExtensions $E).CreateEntryFromFile(...)
    - pattern: (System.IO.Compression.ZipFileExtensions $E).ExtractToFile(...)
    - pattern: (System.IO.Compression.ZipFileExtensions $E).ExtractToDirectory(...)
    - pattern: (System.Net.WebClient $E).DownloadFile(...)
    - pattern: (System.Net.WebClient $E).DownloadFileAsync(...)
    - pattern: (System.Net.WebClient $E).DownloadFileTaskAsync(...)
  message: |
    The software uses external input to construct a pathname that is intended
    to identify a file or directory that is located underneath a restricted
    parent directory, but the software does not properly neutralize special
    elements within the pathname that can cause the pathname to resolve to a
    location that is outside of the restricted directory..
  metadata:
    cwe: 'CWE-22'
    shortDescription: 'Improper Limitation of a Pathname to a Restricted Directory (''Path
      Traversal'')'
    primary_identifier: security_code_scan.SCS0018-1
    secondary_identifiers:
    - name: SCS0018
      type: security_code_scan_rule_id
      value: SCS0018
    license: MIT
    source: https://semgrep.dev/r/gitlab.security_code_scan.SCS0018-1
    shortlink: https://sg.run/zrpd
    semgrep.dev:
      rule:
        rule_id: BYUy1X
        version_id: rxTqg7
        url: https://semgrep.dev/playground/r/rxTqg7/gitlab.security_code_scan.SCS0018-1
        origin: custom
  severity: WARNING
  languages:
  - csharp
- id: gitlab.security_code_scan.SCS0017-1
  patterns:
  - pattern: |
      [ValidateInput(false)]
      public $RET $FOO(...)
      {
        ...
      }
  message: |
    Input validation is a first line of defence for a variety of different
    attacks and should be enabled per default. Please do not forget to use
    @Html.AntiForgeryToken() in your view.
  languages:
  - csharp
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-554'
    shortDescription: 'ASP.NET Misconfiguration: Not Using Input Validation Framework'
    primary_identifier: security_code_scan.SCS0017-1
    secondary_identifiers:
    - name: SCS0017
      type: security_code_scan_rule_id
      value: SCS0017
    license: MIT
    source: https://semgrep.dev/r/gitlab.security_code_scan.SCS0017-1
    shortlink: https://sg.run/p16Z
    semgrep.dev:
      rule:
        rule_id: DbUwNq
        version_id: bZTrWe
        url: https://semgrep.dev/playground/r/bZTrWe/gitlab.security_code_scan.SCS0017-1
        origin: custom
- id: gitlab.security_code_scan.SCS0029-1
  mode: taint
  pattern-sources:
  - patterns:
    - pattern: $PARAM
    - metavariable-regex:
        metavariable: $HTTP_ANNO
        regex: ^(Http)
    - pattern-inside: |
        public class $CLASS : Controller {
          ...
        }
    - pattern-inside: |
        [$HTTP_ANNO]
        public string $METHOD(...,$PARAM,...){...}
  pattern-sanitizers:
  - patterns:
    - metavariable-regex:
        metavariable: $FUNC
        regex: (SerializeObject|HtmlAttributeEncode|HtmlEncode|HtmlFormUrlEncode|UrlEncode|UrlPathEncode|XmlAttributeEncode|XmlEncode|Encode)
    - pattern: $CLASS.$FUNC(...)
  pattern-sinks:
  - pattern: (System.Web.Mvc.HtmlHelper $E).Raw(...)
  - pattern: (Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper $E).Raw(...)
  - pattern: (System.Web.HttpResponse $E).AddHeader(...)
  - pattern: (System.Web.HttpResponse $E).AppendHeader(...)
  - pattern: (System.Web.HttpResponse $E).Write(...)
  - pattern: (System.Web.HttpResponse $E).BinaryWrite(...)
  - pattern: (System.Web.HttpResponse $E).TransmitFile(...)
  - pattern: (System.Web.HttpResponse $E).WriteFile(...)
  - pattern: (System.Web.HttpResponseBase $E).AddHeader(...)
  - pattern: (System.Web.HttpResponseBase $E).AppendHeader(...)
  - pattern: (System.Web.HttpResponseBase $E).Write(...)
  - pattern: (System.Web.HttpResponseBase $E).BinaryWrite(...)
  - pattern: (System.Web.HttpResponseBase $E).WriteFile(...)
  - pattern: (System.Web.UI.HtmlTextWriter $E).AddAttribute(...)
  - pattern: (System.Web.UI.HtmlTextWriter $E).AddStyleAttribute(...)
  - pattern: (System.Web.UI.HtmlTextWriter $E).RenderBeginTag(...)
  - pattern: (System.Web.UI.HtmlTextWriter $E).Write(...)
  - pattern: (System.Web.UI.HtmlTextWriter $E).WriteAttribute(...)
  - pattern: (System.Web.UI.HtmlTextWriter $E).WriteBeginTag(...)
  - pattern: (System.Web.UI.HtmlTextWriter $E).WriteEndTag(...)
  - pattern: (System.Web.UI.HtmlTextWriter $E).WriteFullBeginTag(...)
  - pattern: (System.Web.UI.HtmlTextWriter $E).WriteStyleAttribute(...)
  - pattern: (System.Web.UI.ClientScriptManager $E).RegisterStartupScript(...)
  - pattern: (System.Web.UI.ClientScriptManager $E).RegisterClientScriptBlock(...)
  - pattern: (System.Web.UI.Page $E).RegisterStartupScript(...)
  - pattern: (System.Web.UI.Page $E).RegisterClientScriptBlock(...)
  - pattern: return ...;
  languages:
  - csharp
  message: |
    A potential XSS was found. The endpoint returns a variable from the client
    input that has not been encoded. To protect against stored XSS attacks, make
    sure any dynamic content coming from user or data store cannot be used to
    inject JavaScript on a page. Most modern frameworks will escape dynamic content
    by default automatically (Razor for example)
  metadata:
    category: security
    cwe: "CWE-79: Improper Neutralization of Input During Web Page Generation (\u2018Cross-site
      Scripting\u2019)"
    primary_identifier: security_code_scan.SCS0029-1
    secondary_identifiers:
    - name: SCS0029
      type: security_code_scan_rule_id
      value: SCS0029
    license: MIT
    source: https://semgrep.dev/r/gitlab.security_code_scan.SCS0029-1
    shortlink: https://sg.run/2e5L
    semgrep.dev:
      rule:
        rule_id: WAU7El
        version_id: NdTLWR
        url: https://semgrep.dev/playground/r/NdTLWR/gitlab.security_code_scan.SCS0029-1
        origin: custom
  severity: WARNING
- id: gitlab.gosec.G104-1.G107-1
  patterns:
  - pattern-either:
    - patterns:
      - pattern: http.Get($URL)
      - pattern-not: http.Get("...")
    - patterns:
      - pattern: http.Head($URL)
      - pattern-not: http.Head("...")
    - patterns:
      - pattern: http.Post($URL, ...)
      - pattern-not: http.Post("...", ...)
    - patterns:
      - pattern: http.PostForm($URL, ...)
      - pattern-not: http.PostForm("...", ...)
    - patterns:
      - pattern-inside: |
          $REQ, ... := http.NewRequest(..., url, ...)
          ...
          $CLIENT := &http.Client{...}
          ...
      - pattern: $CLIENT.Do($REQ)
    - patterns:
      - pattern-not-inside: |
          const $X = "..."
          ...
      - pattern-not-inside: |
          var $Y string = "..."
          ...
          $X = $Y
          ...
      - pattern-not-inside: |
          $Y := "..."
          ...
          $X = $Y
          ...
      - pattern: http.Get($X)
  message: |
    Url provided to HTTP request as taint input
  metadata:
    cwe: 'CWE-88'
    shortDescription: 'Improper Neutralization of Argument Delimiters in a Command'
    license: MIT
    source: https://semgrep.dev/r/gitlab.gosec.G104-1.G107-1
    shortlink: https://sg.run/Y8vd
    semgrep.dev:
      rule:
        rule_id: 9AUR1r
        version_id: GxTzZZ
        url: https://semgrep.dev/playground/r/GxTzZZ/gitlab.gosec.G104-1.G107-1
        origin: custom
  severity: WARNING
  languages:
  - go
- id: gitlab.gosec.G504-1
  patterns:
  - pattern: |
      import "net/http/cgi"
  message: |
    Go versions < 1.6.3 are vulnerable to Httpoxy attack: (CVE-2016-5386)
  metadata:
    cwe: 'CWE-327'
    shortDescription: 'Use of a Broken or Risky Cryptographic Algorithm'
    owasp: A9:2017-Using Components with Known Vulnerabilities
    primary_identifier: gosec.G504-1
    secondary_identifiers:
    - name: Gosec Rule ID G504
      type: gosec_rule_id
      value: G504
    license: MIT
    source: https://semgrep.dev/r/gitlab.gosec.G504-1
    shortlink: https://sg.run/gYL5
    semgrep.dev:
      rule:
        rule_id: AbUQzX
        version_id: gET7xk
        url: https://semgrep.dev/playground/r/gET7xk/gitlab.gosec.G504-1
        origin: custom
  severity: WARNING
  languages:
  - go
- id: gitlab.gosec.G502-1
  patterns:
  - pattern: |
      import "crypto/des"
  message: "Usage of a cryptographically broken primitive has been detected. It is
    recommended that \nChaCha20 or Advanced Encryption Standard (AES) be used instead.\n"
  metadata:
    cwe: 'CWE-327'
    shortDescription: 'Use of a Broken or Risky Cryptographic Algorithm'
    owasp: A9:2017-Using Components with Known Vulnerabilities
    primary_identifier: gosec.G502-1
    secondary_identifiers:
    - name: Gosec Rule ID G502
      type: gosec_rule_id
      value: G502
    license: MIT
    source: https://semgrep.dev/r/gitlab.gosec.G502-1
    shortlink: https://sg.run/Q95q
    semgrep.dev:
      rule:
        rule_id: BYUdNk
        version_id: QkTq0Z
        url: https://semgrep.dev/playground/r/QkTq0Z/gitlab.gosec.G502-1
        origin: custom
  severity: WARNING
  languages:
  - go
- id: gitlab.gosec.G501-1
  patterns:
  - pattern: |
      import "crypto/md5"
  message: |
    The MD5 message-digest algorithm has been cryptographically broken and is unsuitable for
    further use. It is recommended that the SHA-3, or BLAKE2 family of algorithms be used for
    non-password based cryptographic hashes instead. For password based cryptographic hashes,
    consider using the bcrypt or Argon2 family of cryptographic hashes.
  metadata:
    cwe: 'CWE-327'
    shortDescription: 'Use of a Broken or Risky Cryptographic Algorithm'
    owasp: A9:2017-Using Components with Known Vulnerabilities
    primary_identifier: gosec.G501-1
    secondary_identifiers:
    - name: Gosec Rule ID G501
      type: gosec_rule_id
      value: G501
    license: MIT
    source: https://semgrep.dev/r/gitlab.gosec.G501-1
    shortlink: https://sg.run/3rxW
    semgrep.dev:
      rule:
        rule_id: DbU1pk
        version_id: 3ZTXQQ
        url: https://semgrep.dev/playground/r/3ZTXQQ/gitlab.gosec.G501-1
        origin: custom
  severity: WARNING
  languages:
  - go
- id: gitlab.gosec.G503-1
  patterns:
  - pattern: |
      import "crypto/rc4"
  message: |
    The RC4 stream-cipher has been cryptographically broken and is unsuitable
    for use in production. It is recommended that ChaCha20 or Advanced Encryption
    Standard (AES) be used instead.
  metadata:
    cwe: 'CWE-327'
    shortDescription: 'Use of a Broken or Risky Cryptographic Algorithm'
    owasp: A9:2017-Using Components with Known Vulnerabilities
    primary_identifier: gosec.G503-1
    secondary_identifiers:
    - name: Gosec Rule ID G503
      type: gosec_rule_id
      value: G503
    license: MIT
    source: https://semgrep.dev/r/gitlab.gosec.G503-1
    shortlink: https://sg.run/4ex9
    semgrep.dev:
      rule:
        rule_id: WAUyo7
        version_id: 44Tjl6
        url: https://semgrep.dev/playground/r/44Tjl6/gitlab.gosec.G503-1
        origin: custom
  severity: WARNING
  languages:
  - go
- id: gitlab.gosec.G505-1
  patterns:
  - pattern: |
      import "crypto/sha1"
  message: |
    The SHA-1 message-digest algorithm has been cryptographically broken and
    is unsuitable for further use. It is recommended that the SHA-3, or BLAKE2 family
    of algorithms be used for non-password based cryptographic hashes instead. For
    password based cryptographic hashes, consider using the bcrypt or Argon2 family
    of cryptographic hashes.
  metadata:
    cwe: 'CWE-327'
    shortDescription: 'Use of a Broken or Risky Cryptographic Algorithm'
    owasp: A9:2017-Using Components with Known Vulnerabilities
    primary_identifier: gosec.G505-1
    secondary_identifiers:
    - name: Gosec Rule ID G505
      type: gosec_rule_id
      value: G505
    license: MIT
    source: https://semgrep.dev/r/gitlab.gosec.G505-1
    shortlink: https://sg.run/PbJv
    semgrep.dev:
      rule:
        rule_id: 0oU25g
        version_id: PkT31R
        url: https://semgrep.dev/playground/r/PkT31R/gitlab.gosec.G505-1
        origin: custom
  severity: WARNING
  languages:
  - go
- id: gitlab.gosec.G402-1
  patterns:
  - pattern-either:
    - pattern: |
        tls.Config{..., CipherSuites: []$SLICE{..., $CIPHERS, ...}, ...}
    - pattern: |
        tls.CipherSuite{..., ID: $CIPHERS, ...}
  - metavariable-regex:
      metavariable: $CIPHERS
      regex: ((?!tls.TLS_AES_128_GCM_SHA256)|(?!tls.TLS_AES_256_GCM_SHA384)|(?!tls.TLS_CHACHA20_POLY1305_SHA256)|
        (?!tls.TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256)|(?!tls.TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256)|
        (?!tls.TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384)|(?!tls.TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384)|
        (?!tls.TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305)|(?!tls.TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256)|
        (?!tls.TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305)|(?!tls.TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256)|
        (?!tls.TLS_DHE_RSA_WITH_AES_128_GCM_SHA256)|(?!tls.TLS_DHE_RSA_WITH_AES_256_GCM_SHA384))
  message: "Usage of a cryptographically insecure cipher suite has been detected.
    It is recommended that \nalternative ciphers be used instead.\n"
  metadata:
    cwe: 'CWE-327'
    shortDescription: 'Use of a Broken or Risky Cryptographic Algorithm'
    owasp: A9:2017-Using Components with Known Vulnerabilities
    primary_identifier: gosec.G402-1
    secondary_identifiers:
    - name: Gosec Rule ID G402
      type: gosec_rule_id
      value: G402
    license: MIT
    source: https://semgrep.dev/r/gitlab.gosec.G402-1
    shortlink: https://sg.run/Jx9P
    semgrep.dev:
      rule:
        rule_id: KxU7b3
        version_id: JdTxpk
        url: https://semgrep.dev/playground/r/JdTxpk/gitlab.gosec.G402-1
        origin: custom
  severity: WARNING
  languages:
  - go
- id: gitlab.gosec.G106-1
  patterns:
  - pattern: ssh.InsecureIgnoreHostKey(...)
  message: |
    Audit the use of ssh.InsecureIgnoreHostKey
  metadata:
    cwe: 'CWE-322'
    shortDescription: 'Key Exchange without Entity Authentication'
    primary_identifier: gosec.G106-1
    secondary_identifiers:
    - name: Gosec Rule ID G106
      type: gosec_rule_id
      value: G106
    license: MIT
    source: https://semgrep.dev/r/gitlab.gosec.G106-1
    shortlink: https://sg.run/5DQj
    semgrep.dev:
      rule:
        rule_id: qNUXje
        version_id: NdTLvR
        url: https://semgrep.dev/playground/r/NdTLvR/gitlab.gosec.G106-1
        origin: custom
  severity: WARNING
  languages:
  - go
- id: gitlab.gosec.G401-1
  patterns:
  - pattern-either:
    - pattern: |
        des.NewCipher(...)
    - pattern: |
        des.NewTripleDESCipher(...)
    - pattern: |
        md5.New()
    - pattern: |
        md5.Sum(...)
    - pattern: |
        rc4.NewCipher(...)
    - pattern: |
        sha1.New()
    - pattern: |
        sha1.Sum(...)
  message: |
    Usage of a cryptographically insecure algorithm has been detected. It
    is recommended that alternative algorithms be used instead.
  metadata:
    cwe: 'CWE-327'
    shortDescription: 'Use of a Broken or Risky Cryptographic Algorithm'
    owasp: A9:2017-Using Components with Known Vulnerabilities
    primary_identifier: gosec.G401-1
    secondary_identifiers:
    - name: Gosec Rule ID G401
      type: gosec_rule_id
      value: G401
    license: MIT
    source: https://semgrep.dev/r/gitlab.gosec.G401-1
    shortlink: https://sg.run/GOe6
    semgrep.dev:
      rule:
        rule_id: lBU89N
        version_id: GxTe6Y
        url: https://semgrep.dev/playground/r/GxTe6Y/gitlab.gosec.G401-1
        origin: custom
  severity: WARNING
  languages:
  - go
- id: gitlab.gosec.G403-1
  patterns:
  - pattern-either:
    - pattern: |
        rsa.GenerateKey(..., $ARG)
  - metavariable-comparison:
      metavariable: $ARG
      comparison: $ARG < 2048
  message: |
    It is recommended that generated RSA keys are at least 2048 bits in length.
  metadata:
    cwe: 'CWE-326'
    shortDescription: 'Inadequate Encryption Strength'
    owasp: A3:2017-Sensitive Data Exposure
    primary_identifier: gosec.G403-1
    secondary_identifiers:
    - name: Gosec Rule ID G403
      type: gosec_rule_id
      value: G403
    license: MIT
    source: https://semgrep.dev/r/gitlab.gosec.G403-1
    shortlink: https://sg.run/RXoN
    semgrep.dev:
      rule:
        rule_id: YGUDRz
        version_id: RGTLk9
        url: https://semgrep.dev/playground/r/RGTLk9/gitlab.gosec.G403-1
        origin: custom
  severity: WARNING
  languages:
  - go
- id: gitlab.gosec.G404-1
  patterns:
  - patterns:
    - pattern-inside: |
        import $IMPORT "math/rand"
        ...
    - pattern-not-inside: |
        import "crypto/rand"
    - pattern-either:
      - pattern: $IMPORT.$METHOD(...)
      - pattern: rand.$METHOD(...)
  - metavariable-regex:
      metavariable: $METHOD
      regex: (Float32|Float64|Int31|Int31n|Int63|Int63n|NormalFloat64|Uint32|Uint64)
  message: |
    Use of weak random number generator (math/rand instead of crypto/rand)
  metadata:
    cwe: 'CWE-338'
    shortDescription: 'Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG)'
    owasp: A3:2017-Sensitive Data Exposure
    primary_identifier: gosec.G404-1
    secondary_identifiers:
    - name: Gosec Rule ID G404
      type: gosec_rule_id
      value: G404
    license: MIT
    source: https://semgrep.dev/r/gitlab.gosec.G404-1
    shortlink: https://sg.run/AXvB
    semgrep.dev:
      rule:
        rule_id: 6JU1jk
        version_id: A8Td5L
        url: https://semgrep.dev/playground/r/A8Td5L/gitlab.gosec.G404-1
        origin: custom
  severity: WARNING
  languages:
  - go
- id: gitlab.gosec.G302-1
  patterns:
  - pattern-either:
    - pattern: os.Chmod(...,$MASK)
    - pattern: os.OpenFile(...,$MASK)
  - metavariable-comparison:
      metavariable: $MASK
      comparison: $MASK > 0o600
      base: 8
  message: |
    Poor file permissions used when creation file or using chmod
  metadata:
    cwe: 'CWE-732'
    shortDescription: 'Incorrect Permission Assignment for Critical Resource'
    owasp: A6:2017-Security Misconfiguration
    primary_identifier: gosec.G302-1
    secondary_identifiers:
    - name: Gosec Rule ID G302
      type: gosec_rule_id
      value: G302
    license: MIT
    source: https://semgrep.dev/r/gitlab.gosec.G302-1
    shortlink: https://sg.run/B6kR
    semgrep.dev:
      rule:
        rule_id: oqU4eG
        version_id: BjTZrG
        url: https://semgrep.dev/playground/r/BjTZrG/gitlab.gosec.G302-1
        origin: custom
  severity: WARNING
  languages:
  - go
- id: gitlab.gosec.G301-1
  patterns:
  - pattern-either:
    - pattern: os.Mkdir(...,$MASK)
    - pattern: os.MkdirAll(...,$MASK)
  - metavariable-comparison:
      metavariable: $MASK
      comparison: $MASK > 0o750
      base: 8
  message: |
    Poor file permissions used when creating a directory
  metadata:
    cwe: 'CWE-732'
    shortDescription: 'Incorrect Permission Assignment for Critical Resource'
    owasp: A6:2017-Security Misconfiguration
    primary_identifier: gosec.G301-1
    secondary_identifiers:
    - name: Gosec Rule ID G301
      type: gosec_rule_id
      value: G301
    license: MIT
    source: https://semgrep.dev/r/gitlab.gosec.G301-1
    shortlink: https://sg.run/DzoG
    semgrep.dev:
      rule:
        rule_id: zdUYkg
        version_id: DkTbn3
        url: https://semgrep.dev/playground/r/DkTbn3/gitlab.gosec.G301-1
        origin: custom
  severity: WARNING
  languages:
  - go
- id: gitlab.gosec.G110-1
  mode: taint
  pattern-sinks:
  - pattern: io.Copy(...)
  - pattern: io.CopyBuffer(...)
  pattern-sources:
  - pattern: gzip.NewReader(...)
  - pattern: zlib.NewReader(...)
  - pattern: bzip2.NewReader(...)
  - pattern: flate.NewReader(...)
  - pattern: lzw.NewReader(...)
  - pattern: tar.NewReader(...)
  - pattern: zip.NewReader(...)
  - pattern: zlib.NewReaderDict(...)
  - pattern: flate.NewReaderDict(...)
  - pattern: zip.OpenReader(...)
  message: |
    Potential DoS vulnerability via decompression bomb
  metadata:
    cwe: 'CWE-409'
    shortDescription: 'Improper Handling of Highly Compressed Data'
    primary_identifier: gosec.G110-1
    secondary_identifiers:
    - name: Gosec Rule ID G110
      type: gosec_rule_id
      value: G110
    license: MIT
    source: https://semgrep.dev/r/gitlab.gosec.G110-1
    shortlink: https://sg.run/Wp8E
    semgrep.dev:
      rule:
        rule_id: pKUpOv
        version_id: d6T1OR
        url: https://semgrep.dev/playground/r/d6T1OR/gitlab.gosec.G110-1
        origin: custom
  severity: WARNING
  languages:
  - go
- id: gitlab.gosec.G304-1
  patterns:
  - pattern-not-inside: |
      os.OpenFile(filepath.Clean(...), ...)
  - pattern-not-inside: |
      os.Open(filepath.Clean(...))
  - pattern-not-inside: |
      ioutil.ReadFile(filepath.Clean(...), ...)
  - pattern-not-inside: |
      os.OpenFile(filepath.Rel(...), ...)
  - pattern-not-inside: |
      os.Open(filepath.Rel(...))
  - pattern-not-inside: |
      ioutil.ReadFile(filepath.Rel(...), ...)
  - pattern-not-inside: |
      const $ARG = "..."
      ...
  - pattern-not-inside: |
      var $Y string = "..."
      ...
      $ARG = $Y
      ...
  - pattern-not-inside: |
      $ARG = filepath.Clean($X)
      ...
  - pattern-not-inside: |
      $ARG = filepath.Rel($X)
      ...
  - pattern-not-inside: |
      $ARG, ... := filepath.Rel("...", "...")
      ...
  - pattern-not: os.OpenFile("..." + strconv.Itoa($I), ...)
  - pattern-not: os.OpenFile("...", ...)
  - pattern-not: os.Open("...")
  - pattern-not: os.Open("..." + strconv.Itoa($I))
  - pattern-not: ioutil.ReadFile("...", ...)
  - pattern-not: ioutil.ReadFile("..." + strconv.Itoa($I), ...)
  - pattern-either:
    - pattern: os.OpenFile($ARG, ...)
    - pattern: os.Open($ARG)
    - pattern: ioutil.ReadFile($ARG, ...)
  message: |
    File open from tainted variable
  metadata:
    cwe: 'CWE-22'
    shortDescription: 'Improper Limitation of a Pathname to a Restricted Directory (''Path
      Traversal'')'
    primary_identifier: gosec.G304-1
    secondary_identifiers:
    - name: Gosec Rule ID G304
      type: gosec_rule_id
      value: G304
    license: MIT
    source: https://semgrep.dev/r/gitlab.gosec.G304-1
    shortlink: https://sg.run/0yQw
    semgrep.dev:
      rule:
        rule_id: 2ZUPbo
        version_id: ZRTnkj
        url: https://semgrep.dev/playground/r/ZRTnkj/gitlab.gosec.G304-1
        origin: custom
  severity: WARNING
  languages:
  - go
- id: gitlab.gosec.G306-1
  patterns:
  - pattern-either:
    - pattern: |
        ioutil.WriteFile(..., ..., $ARG)
  - metavariable-comparison:
      metavariable: $ARG
      comparison: $ARG > 0o600
      base: 8
  message: |
    Expect WriteFile permissions to be 600 or less
  metadata:
    cwe: 'CWE-276'
    shortDescription: 'Incorrect Default Permissions'
    primary_identifier: gosec.G306-1
    secondary_identifiers:
    - name: Gosec Rule ID G306
      type: gosec_rule_id
      value: G306
    license: MIT
    source: https://semgrep.dev/r/gitlab.gosec.G306-1
    shortlink: https://sg.run/KXln
    semgrep.dev:
      rule:
        rule_id: X5Ud8j
        version_id: nWTjDW
        url: https://semgrep.dev/playground/r/nWTjDW/gitlab.gosec.G306-1
        origin: custom
  severity: WARNING
  languages:
  - go
- id: gitlab.gosec.G303-1
  patterns:
  - pattern-either:
    - pattern: |
        ioutil.WriteFile("$ARG", ...)
    - pattern: |
        os.Create("$ARG")
  - metavariable-regex:
      metavariable: $ARG
      regex: (/tmp/.*|/var/tmp/.*)
  message: |
    File creation in shared tmp directory without using ioutil.Tempfile
  metadata:
    cwe: 'CWE-378'
    shortDescription: 'Creation of Temporary File With Insecure Permissions'
    primary_identifier: gosec.G303-1
    secondary_identifiers:
    - name: Gosec Rule ID G303
      type: gosec_rule_id
      value: G303
    license: MIT
    source: https://semgrep.dev/r/gitlab.gosec.G303-1
    shortlink: https://sg.run/qYxO
    semgrep.dev:
      rule:
        rule_id: j2U3v8
        version_id: ExTO5j
        url: https://semgrep.dev/playground/r/ExTO5j/gitlab.gosec.G303-1
        origin: custom
  severity: WARNING
  languages:
  - go
- id: gitlab.gosec.G305-1
  mode: taint
  pattern-sources:
  - pattern: zip.OpenReader(...)
  pattern-sinks:
  - pattern: filepath.Join(...)
  message: |
    File traversal when extracting zip/tar archive
  metadata:
    cwe: 'CWE-22'
    shortDescription: 'Improper Limitation of a Pathname to a Restricted Directory (''Path
      Traversal'')'
    primary_identifier: gosec.G305-1
    secondary_identifiers:
    - name: Gosec Rule ID G305
      type: gosec_rule_id
      value: G305
    license: MIT
    source: https://semgrep.dev/r/gitlab.gosec.G305-1
    shortlink: https://sg.run/lZ2o
    semgrep.dev:
      rule:
        rule_id: 10UdKB
        version_id: 7ZTd6D
        url: https://semgrep.dev/playground/r/7ZTd6D/gitlab.gosec.G305-1
        origin: custom
  severity: WARNING
  languages:
  - go
- id: gitlab.gosec.G203-1
  patterns:
  - pattern-either:
    - patterns:
      - pattern: template.HTML($IN)
      - pattern-not: template.HTML("...")
    - patterns:
      - pattern: template.JS($IN)
      - pattern-not: template.JS("...")
    - patterns:
      - pattern: template.URL($IN)
      - pattern-not: template.URL("...")
    - patterns:
      - pattern: template.HTMLAttr($IN)
      - pattern-not: template.HTMLAttr("...")
  message: |
    Use of unescaped data in HTML templates
  metadata:
    cwe: 'CWE-79'
    shortDescription: 'Improper Neutralization of Input During Web Page Generation'
    primary_identifier: gosec.G203-1
    secondary_identifiers:
    - name: Gosec Rule ID G203
      type: gosec_rule_id
      value: G203
    license: MIT
    source: https://semgrep.dev/r/gitlab.gosec.G203-1
    shortlink: https://sg.run/66nK
    semgrep.dev:
      rule:
        rule_id: yyUPno
        version_id: 8KTXoj
        url: https://semgrep.dev/playground/r/8KTXoj/gitlab.gosec.G203-1
        origin: custom
  severity: WARNING
  languages:
  - go
- id: gitlab.gosec.G108-1
  patterns:
  - pattern: |
      import _ "net/http/pprof"
  message: |
    Profiling endpoint automatically exposed on /debug/pprof
  metadata:
    cwe: 'CWE-200'
    shortDescription: 'Exposure of Sensitive Information to an Unauthorized Actor'
    primary_identifier: gosec.G108-1
    secondary_identifiers:
    - name: Gosec Rule ID G108
      type: gosec_rule_id
      value: G108
    license: MIT
    source: https://semgrep.dev/r/gitlab.gosec.G108-1
    shortlink: https://sg.run/oYxX
    semgrep.dev:
      rule:
        rule_id: r6UwrQ
        version_id: gETj8W
        url: https://semgrep.dev/playground/r/gETj8W/gitlab.gosec.G108-1
        origin: custom
  severity: ERROR
  languages:
  - go
- id: gitlab.gosec.G109-1
  patterns:
  - pattern-either:
    - patterns:
      - pattern-inside: |
          $X, ... := strconv.Atoi(...)
          ...
      - pattern-either:
        - pattern: int32($X)
        - pattern: int16($X)
  message: |
    Potential Integer overflow made by strconv.Atoi result conversion to int16/32
  metadata:
    cwe: 'CWE-190'
    shortDescription: 'Integer Overflow or Wraparound'
    primary_identifier: gosec.G109-1
    secondary_identifiers:
    - name: Gosec Rule ID G109
      type: gosec_rule_id
      value: G109
    license: MIT
    source: https://semgrep.dev/r/gitlab.gosec.G109-1
    shortlink: https://sg.run/zxvn
    semgrep.dev:
      rule:
        rule_id: bwU8wj
        version_id: QkTD3p
        url: https://semgrep.dev/playground/r/QkTD3p/gitlab.gosec.G109-1
        origin: custom
  severity: ERROR
  languages:
  - go
- id: gitlab.gosec.G601-1
  patterns:
  - pattern-either:
    - pattern: |
        for _, $ARG := range $SLICE {
          <... &($ARG) ...>
        }
    - pattern: |
        for _, $ARG := range $SLICE {
          <... func() { <... &$ARG ...> } ...>
        }
    - pattern: |
        for _, $ARG := range $SLICE {
          <... $X(..., <... &$ARG ...>, ...) ...>
        }
  - pattern-not: |
      for _, $ARG := range $SLICE {
        <... *$ARG ...>
      }
  - pattern-not-inside: for _, $ARG := range $SLICE { return ... }
  message: |
    Implicit memory aliasing in for loop.
  metadata:
    cwe: 'CWE-118'
    shortDescription: 'Incorrect Access of Indexable Resource (''Range Error'')'
    primary_identifier: gosec.G601-1
    secondary_identifiers:
    - name: Gosec Rule ID G601
      type: gosec_rule_id
      value: G601
    license: MIT
    source: https://semgrep.dev/r/gitlab.gosec.G601-1
    shortlink: https://sg.run/pYxe
    semgrep.dev:
      rule:
        rule_id: NbUNk2
        version_id: 3ZTnKj
        url: https://semgrep.dev/playground/r/3ZTnKj/gitlab.gosec.G601-1
        origin: custom
  severity: WARNING
  languages:
  - go
- id: gitlab.gosec.G102-1
  patterns:
  - pattern-either:
    - pattern: net.Listen(..., "$ADDR")
    - pattern: tls.Listen(..., "$ADDR", ...)
  - metavariable-regex:
      metavariable: $ADDR
      regex: 0.0.0.0:[0-9]+
  message: "Binding to all network interfaces can potentially open up a service to\ntraffic
    on unintended interfaces, that may not be properly documented or\nsecured. This
    plugin test looks for a string pattern \u201C0.0.0.0\u201D that may\nindicate
    a hardcoded binding to all network interfaces.\n"
  metadata:
    cwe: 'CWE-200'
    shortDescription: 'Exposure of Sensitive Information to an Unauthorized Actor'
    owasp: A6:2017-Security Misconfiguration
    primary_identifier: gosec.G102-1
    secondary_identifiers:
    - name: Gosec Rule ID G102
      type: gosec_rule_id
      value: G102
    license: MIT
    source: https://semgrep.dev/r/gitlab.gosec.G102-1
    shortlink: https://sg.run/28xr
    semgrep.dev:
      rule:
        rule_id: kxUwkP
        version_id: WrTKQg
        url: https://semgrep.dev/playground/r/WrTKQg/gitlab.gosec.G102-1
        origin: custom
  severity: WARNING
  languages:
  - go
- id: gitlab.gosec.G101-1
  patterns:
  - pattern-either:
    - pattern: $MASK = "..."
  - metavariable-regex:
      metavariable: $MASK
      regex: (password|pass|passwd|pwd|secret|token)
  message: |
    The use of hard-coded passwords increases the possibility of password guessing tremendously.
  metadata:
    cwe: 'CWE-259'
    shortDescription: 'Use of Hard-coded Password'
    owasp: A2:2017-Broken Authentication
    primary_identifier: gosec.G101-1
    secondary_identifiers:
    - name: Gosec Rule ID G101
      type: gosec_rule_id
      value: G101
    license: MIT
    source: https://semgrep.dev/r/gitlab.gosec.G101-1
    shortlink: https://sg.run/XOBj
    semgrep.dev:
      rule:
        rule_id: wdUjJo
        version_id: 0bTzl0
        url: https://semgrep.dev/playground/r/0bTzl0/gitlab.gosec.G101-1
        origin: custom
  severity: ERROR
  languages:
  - go
- id: gitlab.gosec.G202-1
  patterns:
  - pattern-inside: |
      import "database/sql"
      ...
  - pattern-either:
    - pattern: $DB.Query($Q + $IN)
    - pattern: $DB.QueryContext(..., $Q + $IN)
  - pattern-not: $DB.QueryContext(..., "..." + "...")
  - pattern-not: $DB.Query("..." + "...")
  message: |
    SQL query construction using string concatenation
  metadata:
    cwe: 'CWE-89'
    shortDescription: 'Improper Neutralization of Special Elements used in an SQL Command'
    primary_identifier: gosec.G202-1
    secondary_identifiers:
    - name: Gosec Rule ID G202
      type: gosec_rule_id
      value: G202
    license: MIT
    source: https://semgrep.dev/r/gitlab.gosec.G202-1
    shortlink: https://sg.run/jwRP
    semgrep.dev:
      rule:
        rule_id: x8Uxn5
        version_id: JdTbwo
        url: https://semgrep.dev/playground/r/JdTbwo/gitlab.gosec.G202-1
        origin: custom
  severity: WARNING
  languages:
  - go
- id: gitlab.gosec.G201-1
  patterns:
  - pattern-inside: |
      $Q := fmt.Sprintf("$QUERY", ...)
      ...
  - pattern-not-inside: |
      $Q := fmt.Sprintf("$QUERY", "...")
      ...
  - pattern-not-inside: |
      pq.QuoteIdentifier(...)
      ...
  - metavariable-regex:
      metavariable: $QUERY
      regex: (?i)(SELECT|DELETE|INSERT|UPDATE|INTO|FROM|WHERE).*%[^bdoxXfFp].*
  - pattern-either:
    - pattern: $DB.QueryContext(..., $Q)
    - pattern: $DB.Query($Q)
  message: |
    SQL query construction using format string
  metadata:
    cwe: 'CWE-89'
    shortDescription: 'Improper Neutralization of Special Elements used in an SQL Command'
    primary_identifier: gosec.G201-1
    secondary_identifiers:
    - name: Gosec Rule ID G201
      type: gosec_rule_id
      value: G201
    license: MIT
    source: https://semgrep.dev/r/gitlab.gosec.G201-1
    shortlink: https://sg.run/18Z1
    semgrep.dev:
      rule:
        rule_id: OrU63Y
        version_id: 5PTjl9
        url: https://semgrep.dev/playground/r/5PTjl9/gitlab.gosec.G201-1
        origin: custom
  severity: WARNING
  languages:
  - go
- id: gitlab.gosec.G204-1
  patterns:
  - pattern-either:
    - patterns:
      - pattern: exec.CommandContext($CTX, $EXE, ...)
      - pattern-not: exec.CommandContext($CTX, "...", ...)
    - patterns:
      - pattern: exec.Command($EXE, ...)
      - pattern-not: exec.Command("...", ...)
    - patterns:
      - pattern: syscall.ForkExec($EXE, ...)
      - pattern-not: syscall.ForkExec("...", ...)
    - patterns:
      - pattern: syscall.StartProcess($EXE, ...)
      - pattern-not: syscall.StartProcess("...", ...)
  message: |
    Audit use of command execution
  metadata:
    cwe: 'CWE-95'
    shortDescription: 'Improper Neutralization of Directives in Dynamically Evaluated Code
      (''Eval Injection'')'
    owasp: A1:2017-Injection
    primary_identifier: gosec.G204-1
    secondary_identifiers:
    - name: Gosec Rule ID G204
      type: gosec_rule_id
      value: G204
    license: MIT
    source: https://semgrep.dev/r/gitlab.gosec.G204-1
    shortlink: https://sg.run/9roy
    semgrep.dev:
      rule:
        rule_id: eqUz8W
        version_id: K3Tkj9
        url: https://semgrep.dev/playground/r/K3Tkj9/gitlab.gosec.G204-1
        origin: custom
  severity: WARNING
  languages:
  - go
- id: gitlab.gosec.G103-1
  patterns:
  - pattern-either:
    - pattern: unsafe.Alignof(...)
    - pattern: unsafe.Offsetof(...)
    - pattern: unsafe.Sizeof(...)
    - pattern: unsafe.Pointer(...)
  message: |
    Using the unsafe package in Go gives you low-level memory management and many
    of the strength of the C language but also gives flexibility to the attacker of
    your application. The pointer arithmetic is one of the examples from the unsafe
    package which can be used for data leak, memory corruption or even execution of
    attackers own script.
  metadata:
    cwe: 'CWE-242'
    shortDescription: 'Audit the use of unsafe block'
    primary_identifier: gosec.G103-1
    secondary_identifiers:
    - name: Gosec Rule ID G103
      type: gosec_rule_id
      value: G103
    license: MIT
    source: https://semgrep.dev/r/gitlab.gosec.G103-1
    shortlink: https://sg.run/y1dA
    semgrep.dev:
      rule:
        rule_id: v8U9nZ
        version_id: RGT7WR
        url: https://semgrep.dev/playground/r/RGT7WR/gitlab.gosec.G103-1
        origin: custom
  severity: INFO
  languages:
  - go
- id: gitlab.bandit.B112
  pattern-either:
  - pattern: |
      try: ...
      except $EXCEPTION: continue
  - pattern: |
      try: ...
      except $EXCEPTION as $X: continue
  - pattern: |
      try: ...
      except ... : ...
      except $EXCEPTION: continue
  - pattern: |
      try: ...
      except $EXCEPTION: continue
      except ... : ...
  - pattern: |
      try: ...
      except ... : ...
      except $EXCEPTION as $X: continue
  - pattern: |
      try: ...
      except $EXCEPTION as $X: continue
      except ... : ...
  - pattern: |
      try: ...
      except ... : ...
      except ... : ...
      except $EXCEPTION: continue
  - pattern: |
      try: ...
      except $EXCEPTION: continue
      except ... : ...
      except ... : ...
  - pattern: |
      try: ...
      except ... : ...
      except $EXCEPTION: continue
      except ... : ...
  - pattern: |
      try: ...
      except ... : ...
      except ... : ...
      except $EXCEPTION as $X: continue
  - pattern: |
      try: ...
      except $EXCEPTION as $X: continue
      except ... : ...
      except ... : ...
  - pattern: |
      try: ...
      except ... : ...
      except $EXCEPTION as $X: continue
      except ... : ...
  - pattern: |
      try: ...
      except ... : ...
      except ... : ...
      except ... : ...
      except $EXCEPTION: continue
  - pattern: |
      try: ...
      except $EXCEPTION: continue
      except ... : ...
      except ... : ...
      except ... : ...
  - pattern: |
      try: ...
      except ... : ...
      except $EXCEPTION: continue
      except ... : ...
      except ... : ...
  - pattern: |
      try: ...
      except ... : ...
      except ... : ...
      except $EXCEPTION: continue
      except ... : ...
  - pattern: |
      try: ...
      except ... : ...
      except ... : ...
      except ... : ...
      except $EXCEPTION: continue
  - pattern: |
      try: ...
      except ... : ...
      except ... : ...
      except ... : ...
      except $EXCEPTION as $X: continue
  - pattern: |
      try: ...
      except $EXCEPTION as $X: continue
      except ... : ...
      except ... : ...
      except ... : ...
  - pattern: |
      try: ...
      except ... : ...
      except $EXCEPTION as $X: continue
      except ... : ...
      except ... : ...
  - pattern: |
      try: ...
      except ... : ...
      except ... : ...
      except $EXCEPTION as $X: continue
      except ... : ...
  - pattern: |
      try: ...
      except ... : ...
      except ... : ...
      except ... : ...
      except $EXCEPTION as $X: continue
  message: |
    Try, Except, Continue
  metadata:
    cwe: 'CWE-703'
    shortDescription: Improper Check or Handling of Exceptional Conditions
    primary_identifier: bandit.B112
    secondary_identifiers:
    - name: Bandit Test ID B112
      type: bandit_test_id
      value: B112
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B112
    shortlink: https://sg.run/v0K0
    semgrep.dev:
      rule:
        rule_id: X5UZ3Z
        version_id: 3ZT10K
        url: https://semgrep.dev/playground/r/3ZT10K/gitlab.bandit.B112
        origin: custom
  severity: INFO
  languages:
  - python
- id: gitlab.bandit.B301-3
  pattern-either:
  - pattern: dill.$FUNC(...)
  message: |
    Avoid using `dill`, which uses `pickle`, which is known to lead to code execution vulnerabilities.
    When unpickling, the serialized data could be manipulated to run arbitrary code.
    Instead, consider serializing the relevant data as JSON or a similar text-based
    serialization format.
  metadata:
    cwe: 'CWE-502'
    shortDescription: Deserialization of Untrusted Data
    owasp: A8:2017-Insecure Deserialization
    primary_identifier: bandit.B301-3
    secondary_identifiers:
    - name: Bandit Test ID B301
      type: bandit_test_id
      value: B301
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B301-3
    shortlink: https://sg.run/dgZ0
    semgrep.dev:
      rule:
        rule_id: j2UqZR
        version_id: GxTRdy
        url: https://semgrep.dev/playground/r/GxTRdy/gitlab.bandit.B301-3
        origin: custom
  languages:
  - python
  severity: WARNING
- id: gitlab.eslint.detect-non-literal-regexp
  patterns:
  - pattern: |
      new RegExp($ARG, ...)
  - pattern-not: |
      new RegExp("...", ...)
  message: |
    RegExp() called with a variable, this might allow an attacker to DOS your application with a long-running regular expression.
  languages:
  - javascript
  - typescript
  severity: WARNING
  metadata:
    cwe: 'CWE-185'
    shortDescription: 'Incorrect Regular Expression'
    primary_identifier: eslint.detect-non-literal-regexp
    secondary_identifiers:
    - name: ESLint rule ID security/detect-non-literal-regexp
      type: eslint_rule_id
      value: security/detect-non-literal-regexp
    license: MIT
    source: https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp
    shortlink: https://sg.run/70yQ
    semgrep.dev:
      rule:
        rule_id: r6UkPj
        version_id: 9lT2oe
        url: https://semgrep.dev/playground/r/9lT2oe/gitlab.eslint.detect-non-literal-regexp
        origin: custom
- id: gitlab.find_sec_bugs.SQL_INJECTION_SPRING_JDBC-1.SQL_INJECTION_JPA-1.SQL_INJECTION_JDO-1.SQL_INJECTION_JDBC-1.SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE-1
  patterns:
  - pattern-not-inside: |
      final String $ARG = ...;
      ...
  - pattern-not-inside: |
      class $CLAZZ {
        ...
        final String $ARG = ...;
        ...
      }
  - pattern-either:
    - patterns:
      - pattern: (javax.jdo.PersistenceManager $PM).newQuery($ARG)
      - pattern-not: (javax.jdo.PersistenceManager $PM).newQuery("...")
    - patterns:
      - pattern: (javax.jdo.PersistenceManager $PM).newQuery(..., $ARG)
      - pattern-not: (javax.jdo.PersistenceManager $PM).newQuery(..., "...")
    - patterns:
      - pattern: (javax.jdo.Query $Q).setFilter($ARG)
      - pattern-not: (javax.jdo.Query $Q).setFilter("...")
    - patterns:
      - pattern: (javax.jdo.Query $Q).setGrouping($ARG)
      - pattern-not: (javax.jdo.Query $Q).setGrouping("...")
    - patterns:
      - pattern: (javax.jdo.Query $Q).setGrouping($ARG)
      - pattern-not: (javax.jdo.Query $Q).setGrouping("...")
    - patterns:
      - pattern: (org.hibernate.criterion.Restrictions $H).sqlRestriction($ARG, ...)
      - pattern-not: (org.hibernate.criterion.Restrictions $H).sqlRestriction("...",
          ...)
    - patterns:
      - pattern: (org.hibernate.Session $S).createQuery((String $ARG), ...)
      - pattern-not: (org.hibernate.Session $S).createQuery("...", ...)
    - patterns:
      - pattern: (org.hibernate.Session $S).createSQLQuery($ARG, ...)
      - pattern-not: (org.hibernate.Session $S).createSQLQuery("...", ...)
    - patterns:
      - pattern: (java.sql.Statement $S).executeQuery($ARG, ...)
      - pattern-not: (java.sql.Statement $S).createSQLQuery("...", ...)
    - patterns:
      - pattern: (java.sql.Statement $S).execute($ARG, ...)
      - pattern-not: (java.sql.Statement $S).execute("...", ...)
    - patterns:
      - pattern: (java.sql.Statement $S).executeUpdate($ARG, ...)
      - pattern-not: (java.sql.Statement $S).executeUpdate("...", ...)
    - patterns:
      - pattern: (java.sql.Statement $S).executeLargeUpdate($ARG, ...)
      - pattern-not: (java.sql.Statement $S).executeLargeUpdate("...", ...)
    - patterns:
      - pattern: (java.sql.Statement $S).addBatch($ARG, ...)
      - pattern-not: (java.sql.Statement $S).addBatch("...", ...)
    - patterns:
      - pattern: (java.sql.PreparedStatement $S).executeQuery($ARG, ...)
      - pattern-not: (java.sql.PreparedStatement $S).executeQuery("...", ...)
    - patterns:
      - pattern: (java.sql.PreparedStatement $S).execute($ARG, ...)
      - pattern-not: (java.sql.PreparedStatement $S).execute("...", ...)
    - patterns:
      - pattern: (java.sql.PreparedStatement $S).executeUpdate($ARG, ...)
      - pattern-not: (java.sql.PreparedStatement $S).executeUpdate("...", ...)
    - patterns:
      - pattern: (java.sql.PreparedStatement $S).executeLargeUpdate($ARG, ...)
      - pattern-not: (java.sql.PreparedStatement $S).executeLargeUpdate("...", ...)
    - patterns:
      - pattern: (java.sql.PreparedStatement $S).addBatch($ARG, ...)
      - pattern-not: (java.sql.PreparedStatement $S).addBatch("...", ...)
    - patterns:
      - pattern: (java.sql.Connection $S).prepareCall($ARG, ...)
      - pattern-not: (java.sql.Connection $S).prepareCall("...", ...)
    - patterns:
      - pattern: (java.sql.Connection $S).prepareStatement($ARG, ...)
      - pattern-not: (java.sql.Connection $S).prepareStatement("...", ...)
    - patterns:
      - pattern: (java.sql.Connection $S).nativeSQL($ARG, ...)
      - pattern-not: (java.sql.Connection $S).nativeSQL("...", ...)
    - patterns:
      - pattern: new org.springframework.jdbc.core.PreparedStatementCreatorFactory($ARG,
          ...)
      - pattern-not: new org.springframework.jdbc.core.PreparedStatementCreatorFactory("...",
          ...)
    - patterns:
      - pattern: (org.springframework.jdbc.core.PreparedStatementCreatorFactory $F).newPreparedStatementCreator($ARG,
          ...)
      - pattern-not: (org.springframework.jdbc.core.PreparedStatementCreatorFactory
          $F).newPreparedStatementCreator("...", ...)
    - patterns:
      - pattern: (org.springframework.jdbc.core.JdbcOperations $O).batchUpdate($ARG,
          ...)
      - pattern-not: (org.springframework.jdbc.core.JdbcOperations $O).batchUpdate("...",
          ...)
    - patterns:
      - pattern: (org.springframework.jdbc.core.JdbcOperations $O).execute($ARG, ...)
      - pattern-not: (org.springframework.jdbc.core.JdbcOperations $O).execute("...",
          ...)
    - patterns:
      - pattern: (org.springframework.jdbc.core.JdbcOperations $O).query($ARG, ...)
      - pattern-not: (org.springframework.jdbc.core.JdbcOperations $O).query("...",
          ...)
    - patterns:
      - pattern: (org.springframework.jdbc.core.JdbcOperations $O).queryForList($ARG,
          ...)
      - pattern-not: (org.springframework.jdbc.core.JdbcOperations $O).queryForList("...",
          ...)
    - patterns:
      - pattern: (org.springframework.jdbc.core.JdbcOperations $O).queryForMap($ARG,
          ...)
      - pattern-not: (org.springframework.jdbc.core.JdbcOperations $O).queryForMap("...",
          ...)
    - patterns:
      - pattern: (org.springframework.jdbc.core.JdbcOperations $O).queryForObject($ARG,
          ...)
      - pattern-not: (org.springframework.jdbc.core.JdbcOperations $O).queryForObject("...",
          ...)
    - patterns:
      - pattern: (org.springframework.jdbc.core.JdbcOperations $O).queryForObject($ARG,
          ...)
      - pattern-not: (org.springframework.jdbc.core.JdbcOperations $O).queryForObject("...",
          ...)
    - patterns:
      - pattern: (org.springframework.jdbc.core.JdbcOperations $O).queryForRowSet($ARG,
          ...)
      - pattern-not: (org.springframework.jdbc.core.JdbcOperations $O).queryForRowSet("...",
          ...)
    - patterns:
      - pattern: (org.springframework.jdbc.core.JdbcOperations $O).queryForInt($ARG,
          ...)
      - pattern-not: (org.springframework.jdbc.core.JdbcOperations $O).queryForInt("...",
          ...)
    - patterns:
      - pattern: (org.springframework.jdbc.core.JdbcOperations $O).queryForLong($ARG,
          ...)
      - pattern-not: (org.springframework.jdbc.core.JdbcOperations $O).queryForLong("...",
          ...)
    - patterns:
      - pattern: (org.springframework.jdbc.core.JdbcOperations $O).udpate($ARG, ...)
      - pattern-not: (org.springframework.jdbc.core.JdbcOperations $O).udpate("...",
          ...)
    - patterns:
      - pattern: (org.springframework.jdbc.core.JdbcTemplate $O).batchUpdate($ARG,
          ...)
      - pattern-not: (org.springframework.jdbc.core.JdbcTemplate $O).batchUpdate("...",
          ...)
    - patterns:
      - pattern: (org.springframework.jdbc.core.JdbcTemplate $O).execute($ARG, ...)
      - pattern-not: (org.springframework.jdbc.core.JdbcTemplate $O).execute("...",
          ...)
    - patterns:
      - pattern: (org.springframework.jdbc.core.JdbcTemplate $O).query($ARG, ...)
      - pattern-not: (org.springframework.jdbc.core.JdbcTemplate $O).query("...",
          ...)
    - patterns:
      - pattern: (org.springframework.jdbc.core.JdbcTemplate $O).queryForList($ARG,
          ...)
      - pattern-not: (org.springframework.jdbc.core.JdbcTemplate $O).queryForList("...",
          ...)
    - patterns:
      - pattern: (org.springframework.jdbc.core.JdbcTemplate $O).queryForMap($ARG,
          ...)
      - pattern-not: (org.springframework.jdbc.core.JdbcTemplate $O).queryForMap("...",
          ...)
    - patterns:
      - pattern: (org.springframework.jdbc.core.JdbcTemplate $O).queryForObject($ARG,
          ...)
      - pattern-not: (org.springframework.jdbc.core.JdbcTemplate $O).queryForObject("...",
          ...)
    - patterns:
      - pattern: (org.springframework.jdbc.core.JdbcTemplate $O).queryForRowSet($ARG,
          ...)
      - pattern-not: (org.springframework.jdbc.core.JdbcTemplate $O).queryForRowSet("...",
          ...)
    - patterns:
      - pattern: (org.springframework.jdbc.core.JdbcTemplate $O).queryForInt($ARG,
          ...)
      - pattern-not: (org.springframework.jdbc.core.JdbcTemplate $O).queryForInt("...",
          ...)
    - patterns:
      - pattern: (org.springframework.jdbc.core.JdbcTemplate $O).queryForLong($ARG,
          ...)
      - pattern-not: (org.springframework.jdbc.core.JdbcTemplate $O).queryForLong("...",
          ...)
    - patterns:
      - pattern: (org.springframework.jdbc.core.JdbcTemplate $O).update($ARG, ...)
      - pattern-not: (org.springframework.jdbc.core.JdbcTemplate $O).update("...",
          ...)
    - patterns:
      - pattern: (io.vertx.sqlclient.SqlClient $O).query($ARG, ...)
      - pattern-not: (io.vertx.sqlclient.SqlClient $O).query("...", ...)
    - patterns:
      - pattern: (io.vertx.sqlclient.SqlClient $O).preparedQuery($ARG, ...)
      - pattern-not: (io.vertx.sqlclient.SqlClient $O).preparedQuery("...", ...)
    - patterns:
      - pattern: (io.vertx.sqlclient.SqlConnection $O).prepare($ARG, ...)
      - pattern-not: (io.vertx.sqlclient.SqlConnection $O).prepare("...", ...)
    - patterns:
      - pattern: (org.apache.turbine.om.peer.BasePeer $O).executeQuery($ARG, ...)
      - pattern-not: (org.apache.turbine.om.peer.BasePeer $O).executeQuery("...",
          ...)
    - patterns:
      - pattern: (org.apache.torque.util.BasePeer $O).executeQuery($ARG, ...)
      - pattern-not: (org.apache.torque.util.BasePeer $O).executeQuery("...", ...)
    - patterns:
      - pattern: (javax.persistence.EntityManager $O).createQuery($ARG, ...)
      - pattern-not: (javax.persistence.EntityManager $O).createQuery("...", ...)
    - patterns:
      - pattern: (javax.persistence.EntityManager $O).createNativeQuery($ARG, ...)
      - pattern-not: (javax.persistence.EntityManager $O).createNativeQuery("...",
          ...)
  languages:
  - java
  message: |
    The input values included in SQL queries need to be passed in safely. Bind
    variables in prepared statements can be used to easily mitigate the risk of
    SQL injection.
  metadata:
    category: security
    cwe: 'CWE-89'
    shortDescription: 'Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    primary_identifier: find_sec_bugs.SQL_INJECTION_SPRING_JDBC-1.SQL_INJECTION_JPA-1.SQL_INJECTION_JDO-1.SQL_INJECTION_JDBC-1.SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE-1
    secondary_identifiers:
    - name: Find Security Bugs-SQL_INJECTION_SPRING_JDBC
      type: find_sec_bugs_type
      value: SQL_INJECTION_SPRING_JDBC
    - name: Find Security Bugs-SQL_INJECTION_JPA
      type: find_sec_bugs_type
      value: SQL_INJECTION_JPA
    - name: Find Security Bugs-SQL_INJECTION_JDO
      type: find_sec_bugs_type
      value: SQL_INJECTION_JDO
    - name: Find Security Bugs-SQL_INJECTION_JDBC
      type: find_sec_bugs_type
      value: SQL_INJECTION_JDBC
    - name: Find Security Bugs-SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE
      type: find_sec_bugs_type
      value: SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE
    license: MIT
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.SQL_INJECTION_SPRING_JDBC-1.SQL_INJECTION_JPA-1.SQL_INJECTION_JDO-1.SQL_INJECTION_JDBC-1.SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE-1
    shortlink: https://sg.run/WD1A
    semgrep.dev:
      rule:
        rule_id: lBUXP4
        version_id: YDT5zl
        url: https://semgrep.dev/playground/r/YDT5zl/gitlab.find_sec_bugs.SQL_INJECTION_SPRING_JDBC-1.SQL_INJECTION_JPA-1.SQL_INJECTION_JDO-1.SQL_INJECTION_JDBC-1.SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE-1
        origin: custom
  severity: ERROR
- id: gitlab.find_sec_bugs.PATH_TRAVERSAL_OUT-1.PATH_TRAVERSAL_OUT-1
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-inside: |
        $FUNC(String[] $ARGS) {
          ...
        }
    - pattern: $ARGS[$IDX]
  - patterns:
    - pattern-inside: |
        $FUNC(..., String $VAR, ...) {
          ...
        }
    - pattern: $VAR
  pattern-sanitizers:
  - pattern: org.apache.commons.io.FilenameUtils.getName(...)
  pattern-sinks:
  - patterns:
    - pattern-inside: new java.io.FileWriter($PATH, ...)
    - pattern: $PATH
  - patterns:
    - pattern-inside: new java.io.FileOutputStream($PATH, ...)
    - pattern: $PATH
  message: |
    A file is opened to write to its contents. The filename comes from an input parameter. If an
    unfiltered parameter is passed to this file API, files at an arbitrary filesystem location
    could be modified. This rule identifies potential path traversal vulnerabilities. In many
    cases, the constructed file path cannot be controlled by the user.
  languages:
  - java
  severity: ERROR
  metadata:
    category: security
    cwe: 'CWE-22'
    shortDescription: 'Improper Limitation of a Pathname to a Restricted Directory (''Path
      Traversal'')'
    technology:
    - java
    primary_identifier: find_sec_bugs.PATH_TRAVERSAL_OUT-1.PATH_TRAVERSAL_OUT-1
    secondary_identifiers:
    - name: Find Security Bugs-PATH_TRAVERSAL_OUT
      type: find_sec_bugs_type
      value: PATH_TRAVERSAL_OUT
    license: MIT
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.PATH_TRAVERSAL_OUT-1.PATH_TRAVERSAL_OUT-1
    shortlink: https://sg.run/ALZ4
    semgrep.dev:
      rule:
        rule_id: 0oUpvO
        version_id: K3TePY
        url: https://semgrep.dev/playground/r/K3TePY/gitlab.find_sec_bugs.PATH_TRAVERSAL_OUT-1.PATH_TRAVERSAL_OUT-1
        origin: custom
- id: gitlab.find_sec_bugs.HARD_CODE_KEY-1
  pattern-either:
  - patterns:
    - pattern-not-inside: |
        $FUNC(...,byte[] $KEY_BYTES, ...) {
            ...
        }
    - pattern-either:
      - pattern: new DESKeySpec((byte[] $KEY_BYTES));
      - pattern: new DESedeKeySpec((byte[] $KEY_BYTES));
      - pattern: new KerberosKey(..., (byte[] $KEY_BYTES), ..., ...);
      - pattern: new SecretKeySpec((byte[] $KEY_BYTES), ...);
      - pattern: new X509EncodedKeySpec((byte[] $KEY_BYTES));
      - pattern: new PKCS8EncodedKeySpec((byte[] $KEY_BYTES));
      - pattern: new KeyRep(...,(byte[] $KEY_BYTES));
      - pattern: new KerberosTicket(...,(byte[] $KEY_BYTES),...);
    - metavariable-pattern:
        metavariable: $KEY_BYTES
        patterns:
        - pattern-not-regex: (null)
  - patterns:
    - pattern-not-inside: |
        $FUNC(..., BigInteger $PRIVATE_KEY, ...) {
            ...
        }
    - pattern-either:
      - pattern: new DSAPrivateKeySpec((BigInteger $PRIVATE_KEY), ...);
      - pattern: new DSAPublicKeySpec((BigInteger $PRIVATE_KEY), ...);
      - pattern: new DHPrivateKeySpec((BigInteger $PRIVATE_KEY), ...);
      - pattern: new DHPublicKeySpec((BigInteger $PRIVATE_KEY), ...);
      - pattern: new ECPrivateKeySpec((BigInteger $PRIVATE_KEY), ...);
      - pattern: new RSAPrivateKeySpec((BigInteger $PRIVATE_KEY), ...);
      - pattern: new RSAMultiPrimePrivateCrtKeySpec((BigInteger $PRIVATE_KEY), ...);
      - pattern: new RSAPrivateCrtKeySpec((BigInteger $PRIVATE_KEY), ...);
      - pattern: new RSAPublicKeySpec((BigInteger $PRIVATE_KEY), ...);
    - metavariable-pattern:
        metavariable: $PRIVATE_KEY
        patterns:
        - pattern-not-regex: (null)
  message: |
    Cryptographic keys should not be kept in the source code. The source code can be widely shared
    in an enterprise environment, and is certainly shared in open source. To be managed safely,
    passwords and secret keys should be stored in separate configuration files or keystores.
  languages:
  - java
  severity: ERROR
  metadata:
    category: security
    cwe: 'CWE-321'
    shortDescription: 'Use of Hard-coded Cryptographic Key'
    technology:
    - java
    license: MIT
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.HARD_CODE_KEY-1
    shortlink: https://sg.run/Y4yX
    semgrep.dev:
      rule:
        rule_id: ReU2vo
        version_id: rxT4Zk
        url: https://semgrep.dev/playground/r/rxT4Zk/gitlab.find_sec_bugs.HARD_CODE_KEY-1
        origin: custom
- id: gitlab.find_sec_bugs.HARD_CODE_KEY-4
  patterns:
  - pattern-not-inside: |
      $FUNC(..., $VAR_NAME, ...) {
          ...
      }
  - pattern-either:
    - pattern: (String $VAR_NAME).equals(...)
    - pattern: (String $OTHER).equals((String $VAR_NAME))
    - pattern: java.util.Arrays.equals(...,(String $VAR_NAME),...)
    - pattern: (byte[] $VAR_NAME).equals(...)
    - pattern: (byte[] $OTHER).equals((byte[] $VAR_NAME))
    - pattern: java.util.Arrays.equals(...,(byte[] $VAR_NAME),...)
    - pattern: java.lang.Byte.comapre(...,(byte[] $VAR_NAME),...)
    - pattern: (char[] $VAR_NAME).equals(...)
    - pattern: (char[] $OTHER).equals((char[] $VAR_NAME))
    - pattern: java.util.Arrays.equals(...,(char[] $VAR_NAME),...)
  - metavariable-regex:
      metavariable: $VAR_NAME
      regex: (?i).*(pass|pwd|psw|secret|key|cipher|crypt|des|aes|mac|private|sign|cert).*
  message: |
    Cryptographic keys should not be kept in the source code. The source code can be widely shared
    in an enterprise environment, and is certainly shared in open source. To be managed safely,
    passwords and secret keys should be stored in separate configuration files or keystores.
  languages:
  - java
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-321'
    shortDescription: 'Use of Hard-coded Cryptographic Key'
    technology:
    - java
    license: MIT
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.HARD_CODE_KEY-4
    shortlink: https://sg.run/6kO6
    semgrep.dev:
      rule:
        rule_id: AbUNYQ
        version_id: bZT9qN
        url: https://semgrep.dev/playground/r/bZT9qN/gitlab.find_sec_bugs.HARD_CODE_KEY-4
        origin: custom
- id: gitlab.find_sec_bugs.HARD_CODE_KEY-2
  patterns:
  - pattern-either:
    - pattern: String $VAR = "...";
    - pattern: byte[] $VAR = {...};
    - pattern: byte[] $VAR = new byte[]{...};
    - pattern: char[] $VAR = {...};
    - pattern: char[] $VAR = new char[]{...};
  - metavariable-regex:
      metavariable: $VAR
      regex: (?i).*(pass|pwd|psw|secret|key|cipher|crypt|des|aes|mac|private|sign|cert).*
  message: |
    Cryptographic keys should not be kept in the source code. The source code can be widely shared
    in an enterprise environment, and is certainly shared in open source. To be managed safely,
    passwords and secret keys should be stored in separate configuration files or keystores.
  languages:
  - java
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-321'
    shortDescription: 'Use of Hard-coded Cryptographic Key'
    technology:
    - java
    license: MIT
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.HARD_CODE_KEY-2
    shortlink: https://sg.run/obGN
    semgrep.dev:
      rule:
        rule_id: BYUKYz
        version_id: NdTo8N
        url: https://semgrep.dev/playground/r/NdTo8N/gitlab.find_sec_bugs.HARD_CODE_KEY-2
        origin: custom
- id: gitlab.find_sec_bugs.HARD_CODE_KEY-3
  patterns:
  - pattern: String $VAR = "$VAL";
  - metavariable-regex:
      metavariable: $VAL
      regex: (?i).*(password|motdepasse|heslo|adgangskode|wachtwoord|salasana|passwort|passord|senha|geslo|clave|losenord|clave|parola|secret|pwd).*
  message: |
    Cryptographic keys should not be kept in the source code. The source code can be widely shared
    in an enterprise environment, and is certainly shared in open source. To be managed safely,
    passwords and secret keys should be stored in separate configuration files or keystores.
  languages:
  - java
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-321'
    shortDescription: 'Use of Hard-coded Cryptographic Key'
    technology:
    - java
    license: MIT
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.HARD_CODE_KEY-3
    shortlink: https://sg.run/z561
    semgrep.dev:
      rule:
        rule_id: DbU28G
        version_id: kbTLq6
        url: https://semgrep.dev/playground/r/kbTLq6/gitlab.find_sec_bugs.HARD_CODE_KEY-3
        origin: custom
- id: gitlab.find_sec_bugs.PT_ABSOLUTE_PATH_TRAVERSAL-1
  mode: taint
  pattern-sources:
  - pattern: (HttpServletRequest $REQ).getParameter(...)
  pattern-sanitizers:
  - pattern: org.apache.commons.io.FilenameUtils.getName(...)
  pattern-sinks:
  - patterns:
    - pattern-inside: |
        $U = new java.net.URI($VAR)
    - pattern-either:
      - pattern-inside: new java.io.File($U)
      - pattern-inside: java.nio.file.Paths.get($U)
    - pattern: $VAR
  - patterns:
    - pattern-inside: new java.io.RandomAccessFile($INPUT,...)
    - pattern: $INPUT
  - pattern: new java.io.FileReader(...)
  - pattern: new javax.activation.FileDataSource(...)
  - pattern: new java.io.FileInputStream(...)
  - pattern: new java.io.File(...)
  - pattern: java.nio.file.Paths.get(...)
  - pattern: java.io.File.createTempFile(...)
  - pattern: java.io.File.createTempDirectory(...)
  - pattern: java.nio.file.Files.createTempFile(...)
  - pattern: java.nio.file.Files.createTempDirectory(...)
  - patterns:
    - pattern-inside: new java.io.FileWriter($PATH, ...)
    - pattern: $PATH
  - patterns:
    - pattern-inside: new java.io.FileOutputStream($PATH, ...)
    - pattern: $PATH
  message: |
    "The software uses an HTTP request parameter to construct a pathname that should be within a
    restricted directory, but it does not properly neutralize absolute path sequences such as
    "/abs/path" that can resolve to a location that is outside of that directory. See
    http://cwe.mitre.org/data/definitions/36.html for more information."
  languages:
  - java
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-22'
    shortDescription: 'Improper Limitation of a Pathname to a Restricted Directory (''Path
      Traversal'')'
    technology:
    - java
    primary_identifier: find_sec_bugs.PT_ABSOLUTE_PATH_TRAVERSAL-1
    secondary_identifiers:
    - name: Find Security Bugs-PT_ABSOLUTE_PATH_TRAVERSAL
      type: find_sec_bugs_type
      value: PT_ABSOLUTE_PATH_TRAVERSAL
    license: MIT
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.PT_ABSOLUTE_PATH_TRAVERSAL-1
    shortlink: https://sg.run/Ben5
    semgrep.dev:
      rule:
        rule_id: KxUwlN
        version_id: qkTG9X
        url: https://semgrep.dev/playground/r/qkTG9X/gitlab.find_sec_bugs.PT_ABSOLUTE_PATH_TRAVERSAL-1
        origin: custom
- id: gitlab.find_sec_bugs.FORMAT_STRING_MANIPULATION-1
  patterns:
  - pattern-either:
    - patterns:
      - pattern-inside: |
          String $INPUT = (HttpServletRequest $REQ).getParameter(...);
          ...
      - pattern-inside: |
          String $FORMAT_STR = ... + $INPUT;
          ...
    - patterns:
      - pattern-inside: |
          String $INPUT = (HttpServletRequest $REQ).getParameter(...);
          ...
      - pattern-inside: |
          String $FORMAT_STR = ... + $INPUT + ...;
          ...
    - pattern-inside: |
        String $FORMAT_STR = ... + (HttpServletRequest $REQ).getParameter(...) + ...;
        ...
    - pattern-inside: |
        String $FORMAT_STR = ... + (HttpServletRequest $REQ).getParameter(...);
        ...
  - pattern-either:
    - pattern: String.format($FORMAT_STR, ...);
    - pattern: String.format(java.util.Locale.$LOCALE, $FORMAT_STR, ...);
    - pattern: (java.util.Formatter $F).format($FORMAT_STR, ...);
    - pattern: (java.util.Formatter $F).format(java.util.Locale.$LOCALE, $FORMAT_STR,
        ...);
    - pattern: (java.io.PrintStream $F).printf($FORMAT_STR, ...);
    - pattern: (java.io.PrintStream $F).printf(java.util.Locale.$LOCALE, $FORMAT_STR,
        ...);
    - pattern: (java.io.PrintStream $F).format($FORMAT_STR, ...);
    - pattern: (java.io.PrintStream $F).format(java.util.Locale.$LOCALE, $FORMAT_STR,
        ...);
    - pattern: System.out.printf($FORMAT_STR, ...);
    - pattern: System.out.printf(java.util.Locale.$LOCALE, $FORMAT_STR, ...);
    - pattern: System.out.format($FORMAT_STR, ...);
    - pattern: System.out.format(java.util.Locale.$LOCALE, $FORMAT_STR, ...);
  languages:
  - java
  message: |
    Allowing user input to control format parameters could enable an attacker to cause exceptions
    to be thrown or leak information.Attackers may be able to modify the format string argument,
    such that an exception is thrown. If this exception is left uncaught, it may crash the
    application. Alternatively, if sensitive information is used within the unused arguments,
    attackers may change the format string to reveal this information.
  metadata:
    cwe: 'CWE-134'
    shortDescription: 'Use of Externally-Controlled Format String'
    category: security
    confidence: HIGH
    primary_identifier: find_sec_bugs.FORMAT_STRING_MANIPULATION-1
    secondary_identifiers:
    - name: Find Security Bugs-FORMAT_STRING_MANIPULATION
      type: find_sec_bugs_type
      value: FORMAT_STRING_MANIPULATION
    license: MIT
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.FORMAT_STRING_MANIPULATION-1
    shortlink: https://sg.run/w4q0
    semgrep.dev:
      rule:
        rule_id: X5UA3o
        version_id: xyTO9y
        url: https://semgrep.dev/playground/r/xyTO9y/gitlab.find_sec_bugs.FORMAT_STRING_MANIPULATION-1
        origin: custom
  severity: ERROR
- id: gitlab.find_sec_bugs.IMPROPER_UNICODE-1
  pattern-either:
  - patterns:
    - pattern-either:
      - pattern: |
          $S = (String $INPUT).$TRANSFORM(...);
          ...
          $S.$METHOD(...);
      - pattern: (String $INPUT).$TRANSFORM().$METHOD(...);
    - metavariable-regex:
        metavariable: $METHOD
        regex: (equals|equalsIgnoreCase|indexOf)
    - metavariable-regex:
        metavariable: $TRANSFORM
        regex: (toLowerCase|toUpperCase)
  - pattern: java.text.Normalizer.normalize(...);
  - pattern: java.net.IDN.toASCII(...);
  - pattern: (URI $U).toASCIIString();
  languages:
  - java
  message: |
    Improper Handling of Unicode Encoding
  metadata:
    cwe: 'CWE-176'
    shortDescription: 'Improper Handling of Unicode Encoding'
    category: security
    confidence: HIGH
    primary_identifier: find_sec_bugs.IMPROPER_UNICODE-1
    secondary_identifiers:
    - name: Find Security Bugs-IMPROPER_UNICODE
      type: find_sec_bugs_type
      value: IMPROPER_UNICODE
    license: MIT
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.IMPROPER_UNICODE-1
    shortlink: https://sg.run/xPlp
    semgrep.dev:
      rule:
        rule_id: j2UwZp
        version_id: O9Tz42
        url: https://semgrep.dev/playground/r/O9Tz42/gitlab.find_sec_bugs.IMPROPER_UNICODE-1
        origin: custom
  severity: ERROR
- id: gitlab.find_sec_bugs.MODIFICATION_AFTER_VALIDATION-1
  patterns:
  - pattern: |
      (java.util.regex.Pattern $Y).matcher($VAR);
      ...
      $VAR.$METHOD(...);
  - metavariable-regex:
      metavariable: $METHOD
      regex: (replace)
  languages:
  - java
  message: |
    CERT: IDS11-J. Perform any string modifications before validation
  metadata:
    category: security
    confidence: HIGH
    primary_identifier: find_sec_bugs.MODIFICATION_AFTER_VALIDATION-1
    secondary_identifiers:
    - name: Find Security Bugs-MODIFICATION_AFTER_VALIDATION
      type: find_sec_bugs_type
      value: MODIFICATION_AFTER_VALIDATION
    license: MIT
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.MODIFICATION_AFTER_VALIDATION-1
    shortlink: https://sg.run/O4Yp
    semgrep.dev:
      rule:
        rule_id: 10U4xJ
        version_id: e1T5Eo
        url: https://semgrep.dev/playground/r/e1T5Eo/gitlab.find_sec_bugs.MODIFICATION_AFTER_VALIDATION-1
        origin: custom
  severity: WARNING
- id: gitlab.find_sec_bugs.NORMALIZATION_AFTER_VALIDATION-1
  patterns:
  - pattern: |
      $Y = java.util.regex.Pattern.compile("[<>]");
      ...
      $Y.matcher($VAR);
      ...
      java.text.Normalizer.normalize($VAR, ...);
  languages:
  - java
  message: |
    IDS01-J. Normalize strings before validating them
  metadata:
    category: security
    confidence: HIGH
    primary_identifier: find_sec_bugs.NORMALIZATION_AFTER_VALIDATION-1
    secondary_identifiers:
    - name: Find Security Bugs-NORMALIZATION_AFTER_VALIDATION
      type: find_sec_bugs_type
      value: NORMALIZATION_AFTER_VALIDATION
    license: MIT
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.NORMALIZATION_AFTER_VALIDATION-1
    shortlink: https://sg.run/eJnl
    semgrep.dev:
      rule:
        rule_id: 9AUAKN
        version_id: vdTgDE
        url: https://semgrep.dev/playground/r/vdTgDE/gitlab.find_sec_bugs.NORMALIZATION_AFTER_VALIDATION-1
        origin: custom
  severity: WARNING
- id: gitlab.find_sec_bugs.TEMPLATE_INJECTION_PEBBLE-1.TEMPLATE_INJECTION_FREEMARKER-1.TEMPLATE_INJECTION_VELOCITY-1
  pattern-either:
  - patterns:
    - pattern: org.apache.velocity.app.Velocity.evaluate(..., $VAR)
    - pattern-not: org.apache.velocity.app.Velocity.evaluate(..., "...")
  - patterns:
    - pattern-not-inside: |
        $C = (freemarker.template.Configuration $CFG).getTemplate("...");
        ...
    - pattern-inside: |
        $C = (freemarker.template.Configuration $CFG).getTemplate($IN);
        ...
    - pattern: $C.process(...)
  - patterns:
    - pattern-inside: |
        import com.mitchellbosecke.pebble.PebbleEngine;
        ...
    - pattern-inside: |
        $C = $T.getTemplate($IN);
        ...
    - pattern-not-inside: |
        $C = $T.getTemplate("...");
        ...
    - pattern: $C.evaluate(...)
  languages:
  - java
  message: |
    A malicious user in control of a template can run malicious code on the
    server-side. Velocity templates should be seen as scripts.
  metadata:
    category: security
    cwe: 'CWE-94'
    shortDescription: 'Improper Control of Generation of Code (''Code Injection'')'
    primary_identifier: find_sec_bugs.TEMPLATE_INJECTION_PEBBLE-1.TEMPLATE_INJECTION_FREEMARKER-1.TEMPLATE_INJECTION_VELOCITY-1
    secondary_identifiers:
    - name: Find Security Bugs-TEMPLATE_INJECTION_PEBBLE
      type: find_sec_bugs_type
      value: TEMPLATE_INJECTION_PEBBLE
    - name: Find Security Bugs-TEMPLATE_INJECTION_FREEMARKER
      type: find_sec_bugs_type
      value: TEMPLATE_INJECTION_FREEMARKER
    - name: Find Security Bugs-TEMPLATE_INJECTION_VELOCITY
      type: find_sec_bugs_type
      value: TEMPLATE_INJECTION_VELOCITY
    license: MIT
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.TEMPLATE_INJECTION_PEBBLE-1.TEMPLATE_INJECTION_FREEMARKER-1.TEMPLATE_INJECTION_VELOCITY-1
    shortlink: https://sg.run/vpK4
    semgrep.dev:
      rule:
        rule_id: yyUDL9
        version_id: d6T1n1
        url: https://semgrep.dev/playground/r/d6T1n1/gitlab.find_sec_bugs.TEMPLATE_INJECTION_PEBBLE-1.TEMPLATE_INJECTION_FREEMARKER-1.TEMPLATE_INJECTION_VELOCITY-1
        origin: custom
  severity: ERROR
- id: gitlab.find_sec_bugs.EXTERNAL_CONFIG_CONTROL-1
  patterns:
  - pattern: |
      $TAINTED = (HttpServletRequest $REQ).getParameter(...);
      ...
      (java.sql.Connection $CONN).setCatalog($TAINTED);
  message: |
    Allowing external control of system settings can disrupt service or cause an application to
    behave in unexpected, and potentially malicious ways. An attacker could cause an error by
    providing a nonexistent catalog name or connect to an unauthorized portion of the database.
  languages:
  - java
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-15'
    shortDescription: 'External Control of System or Configuration Setting'
    technology:
    - java
    primary_identifier: find_sec_bugs.EXTERNAL_CONFIG_CONTROL-1
    secondary_identifiers:
    - name: Find Security Bugs-EXTERNAL_CONFIG_CONTROL
      type: find_sec_bugs_type
      value: EXTERNAL_CONFIG_CONTROL
    license: MIT
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.EXTERNAL_CONFIG_CONTROL-1
    shortlink: https://sg.run/dPZY
    semgrep.dev:
      rule:
        rule_id: r6UjYJ
        version_id: ZRTnB0
        url: https://semgrep.dev/playground/r/ZRTnB0/gitlab.find_sec_bugs.EXTERNAL_CONFIG_CONTROL-1
        origin: custom
- id: gitlab.find_sec_bugs.INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE-1
  pattern-either:
  - pattern: |
      catch(Throwable $E) {
        ...
        $E.printStackTrace();
        ...
      }
  - pattern: |
      catch(Exception $E) {
        ...
        $E.printStackTrace();
        ...
      }
  - pattern: |
      catch(Error $E) {
        ...
        $E.printStackTrace();
        ...
      }
  - pattern: |
      catch(java.io.FileNotFoundException $E) {
        ...
        $E.printStackTrace();
        ...
      }
  - pattern: |
      catch(java.sql.SQLException $E) {
        ...
        $E.printStackTrace();
        ...
      }
  - pattern: |
      catch(java.net.BindException $E) {
        ...
        $E.printStackTrace();
        ...
      }
  - pattern: |
      catch(java.util.ConcurrentModificationException $E) {
        ...
        $E.printStackTrace();
        ...
      }
  - pattern: |
      catch(javax.naming.InsufficientResourcesException $E) {
        ...
        $E.printStackTrace();
        ...
      }
  - pattern: |
      catch(java.util.MissingResourceException $E) {
        ...
        $E.printStackTrace();
        ...
      }
  - pattern: |
      catch(java.util.jar.JarException $E) {
        ...
        $E.printStackTrace();
        ...
      }
  - pattern: |
      catch(java.security.acl.NotOwnerException $E) {
        ...
        $E.printStackTrace();
        ...
      }
  - pattern: |
      catch(OutOfMemoryError $E) {
        ...
        $E.printStackTrace();
        ...
      }
  - pattern: |
      catch(StackOverflowError $E) {
        ...
        $E.printStackTrace();
        ...
      }
  message: |
    The sensitive information may be valuable information on its own (such as a password), or it
    may be useful for launching other, more deadly attacks. If an attack fails, an attacker may use
    error information provided by the server to launch another more focused attack. For example, an
    attempt to exploit a path traversal weakness (CWE-22) might yield the full pathname of the
    installed application.
  languages:
  - java
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-209'
    shortDescription: 'Information Exposure Through an Error Message'
    technology:
    - java
    primary_identifier: find_sec_bugs.INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE-1
    secondary_identifiers:
    - name: Find Security Bugs-INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE
      type: find_sec_bugs_type
      value: INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE
    license: MIT
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE-1
    shortlink: https://sg.run/ZPrn
    semgrep.dev:
      rule:
        rule_id: bwULk7
        version_id: nWTjd3
        url: https://semgrep.dev/playground/r/nWTjd3/gitlab.find_sec_bugs.INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE-1
        origin: custom
- id: gitlab.find_sec_bugs.RPC_ENABLED_EXTENSIONS-1
  patterns:
  - pattern-either:
    - patterns:
      - pattern-inside: |
          XmlRpcServerConfigImpl $VAR = new org.apache.xmlrpc.server.XmlRpcServerConfigImpl();
          ...
      - pattern: $VAR.setEnabledForExtensions(true);
    - patterns:
      - pattern-inside: |
          XmlRpcClientConfigImpl $VAR = new org.apache.xmlrpc.client.XmlRpcClientConfigImpl();
          ...
      - pattern: $VAR.setEnabledForExtensions(true);
  languages:
  - java
  message: |
    Enabling extensions in Apache XML RPC server or client can lead to deserialization
    vulnerability which would allow an attacker to execute arbitrary code.
  metadata:
    category: security
    cwe: 'CWE-502'
    shortDescription: 'Deserialization of Untrusted Data'
    primary_identifier: find_sec_bugs.RPC_ENABLED_EXTENSIONS-1
    secondary_identifiers:
    - name: Find Security Bugs-RPC_ENABLED_EXTENSIONS
      type: find_sec_bugs_type
      value: RPC_ENABLED_EXTENSIONS
    license: MIT
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.RPC_ENABLED_EXTENSIONS-1
    shortlink: https://sg.run/nw5O
    semgrep.dev:
      rule:
        rule_id: NbUeOb
        version_id: ExTOdz
        url: https://semgrep.dev/playground/r/ExTOdz/gitlab.find_sec_bugs.RPC_ENABLED_EXTENSIONS-1
        origin: custom
  severity: WARNING
- id: gitlab.find_sec_bugs.SAML_IGNORE_COMMENTS-1
  pattern: (BasicParserPool $POOL).setIgnoreComments(false);
  languages:
  - java
  message: |
    Ignoring XML comments in SAML may lead to authentication bypass
  metadata:
    cwe: 'CWE-287'
    shortDescription: 'Improper Authentication'
    category: security
    primary_identifier: find_sec_bugs.SAML_IGNORE_COMMENTS-1
    secondary_identifiers:
    - name: Find Security Bugs-SAML_IGNORE_COMMENTS
      type: find_sec_bugs_type
      value: SAML_IGNORE_COMMENTS
    license: MIT
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.SAML_IGNORE_COMMENTS-1
    shortlink: https://sg.run/EzGA
    semgrep.dev:
      rule:
        rule_id: kxUOAp
        version_id: 7ZTd54
        url: https://semgrep.dev/playground/r/7ZTd54/gitlab.find_sec_bugs.SAML_IGNORE_COMMENTS-1
        origin: custom
  severity: WARNING
- id: gitlab.find_sec_bugs.XML_DECODER-1
  patterns:
  - pattern-either:
    - patterns:
      - pattern-inside: |
          $D = new XMLDecoder($IN);
          ...
      - pattern-not-inside: |
          $D = new XMLDecoder("...");
          ...
      - pattern: $D.readObject()
  languages:
  - java
  message: |
    Avoid using XMLDecoder to parse content from an untrusted source.
  metadata:
    category: security
    cwe: 'CWE-502'
    shortDescription: 'Deserialization of Untrusted Data'
    primary_identifier: find_sec_bugs.XML_DECODER-1
    secondary_identifiers:
    - name: Find Security Bugs-XML_DECODER
      type: find_sec_bugs_type
      value: XML_DECODER
    license: MIT
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.XML_DECODER-1
    shortlink: https://sg.run/7QeR
    semgrep.dev:
      rule:
        rule_id: wdUk2X
        version_id: LjTOxb
        url: https://semgrep.dev/playground/r/LjTOxb/gitlab.find_sec_bugs.XML_DECODER-1
        origin: custom
  severity: WARNING
- id: gitlab.find_sec_bugs.MALICIOUS_XSLT-1
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - patterns:
        - pattern-inside: |
            $FUNC(...,String $VAR, ...) {
              ...
            }
        - pattern-either:
          - pattern: new FileInputStream(<... $VAR ...>);
          - pattern: getClass().getResourceAsStream(<... $VAR ...>)
      - patterns:
        - pattern-inside: |
            class $CLZ {
              String $X = "...";
              ...
            }
        - pattern-inside: |
            $FUNC(...,String $Y, ...) {
              ...
            }
        - pattern-either:
          - pattern: new FileInputStream($X + $Y);
          - pattern: getClass().getResourceAsStream($X + $Y)
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern-inside: (javax.xml.transform.TransformerFactory $T).newTransformer($SRC,
          ...)
      - pattern-inside: (javax.xml.transform.Transformer $T).transform($SRC, ...)
    - pattern: $SRC
  languages:
  - java
  message: |
    It is possible to attach malicious behavior to those style sheets. Therefore, if an attacker
    can control the content or the source of the style sheet, he might be able to trigger remote
    code execution.
  metadata:
    cwe": 'CWE-22: Improper Limitation of a Pathname to a Restricted Directory (''Path
      Traversal'')'
    category: security
    primary_identifier: find_sec_bugs.MALICIOUS_XSLT-1
    secondary_identifiers:
    - name: Find Security Bugs-MALICIOUS_XSLT
      type: find_sec_bugs_type
      value: MALICIOUS_XSLT
    license: MIT
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.MALICIOUS_XSLT-1
    shortlink: https://sg.run/L2KJ
    semgrep.dev:
      rule:
        rule_id: x8UdB6
        version_id: 8KTXWl
        url: https://semgrep.dev/playground/r/8KTXWl/gitlab.find_sec_bugs.MALICIOUS_XSLT-1
        origin: custom
  severity: WARNING
- id: gitlab.find_sec_bugs.XPATH_INJECTION-1
  patterns:
  - pattern-either:
    - pattern-inside: import javax.xml.xpath.*; ...
    - pattern-inside: import javax.xml.xpath.Xpath; ...
  - pattern-either:
    - patterns:
      - pattern: (XPath $X).compile($ARG)
      - pattern-not: (XPath $X).compile("...")
    - patterns:
      - pattern: (XPath $X).evaluate($ARG)
      - pattern-not: (XPath $X).evaluate("...")
  languages:
  - java
  message: |
    The input values included in SQL queries need to be passed in safely. Bind
    variables in prepared statements can be used to easily mitigate the risk of
    SQL injection.
  metadata:
    category: security
    cwe: 'CWE-611'
    shortDescription: 'Improper Restriction of XML External Entity Reference (''XXE'')'
    primary_identifier: find_sec_bugs.XPATH_INJECTION-1
    secondary_identifiers:
    - name: Find Security Bugs-XPATH_INJECTION
      type: find_sec_bugs_type
      value: XPATH_INJECTION
    license: MIT
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.XPATH_INJECTION-1
    shortlink: https://sg.run/8kv7
    semgrep.dev:
      rule:
        rule_id: OrUv05
        version_id: gETjL7
        url: https://semgrep.dev/playground/r/gETjL7/gitlab.find_sec_bugs.XPATH_INJECTION-1
        origin: custom
  severity: ERROR
- id: gitlab.bandit.B101
  patterns:
  - pattern: assert(...)
  - pattern-not-inside: |
      import pytest
      ...
  - pattern-not-inside: |
      import unittest
      ...
  message: |
    Use of assert detected. The enclosed code will be removed when
    compiling to optimised byte code.
  metadata:
    shortDescription: Improper Check for Unusual or Exceptional Conditions
    cwe: 'CWE-754'
    primary_identifier: bandit.B101
    secondary_identifiers:
    - name: Bandit Test ID B101
      type: bandit_test_id
      value: B101
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B101
    shortlink: https://sg.run/yzWA
    semgrep.dev:
      rule:
        rule_id: KxU4lp
        version_id: O9TbgO
        url: https://semgrep.dev/playground/r/O9TbgO/gitlab.bandit.B101
        origin: custom
  severity: INFO
  languages:
  - python
- id: gitlab.bandit.B301-4
  pattern-either:
  - pattern: shelve.$FUNC(...)
  message: |
    Avoid using `shelve`, which uses `pickle`, which is known to lead to code execution vulnerabilities.
    When unpickling, the serialized data could be manipulated to run arbitrary code.
    Instead, consider serializing the relevant data as JSON or a similar text-based
    serialization format.
  metadata:
    cwe: 'CWE-502'
    shortDescription: Deserialization of Untrusted Data
    owasp: A8:2017-Insecure Deserialization
    primary_identifier: bandit.B301-4
    secondary_identifiers:
    - name: Bandit Test ID B301
      type: bandit_test_id
      value: B301
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B301-4
    shortlink: https://sg.run/Zer4
    semgrep.dev:
      rule:
        rule_id: 10UZxd
        version_id: RGTl4J
        url: https://semgrep.dev/playground/r/RGTl4J/gitlab.bandit.B301-4
        origin: custom
  severity: WARNING
  languages:
  - python
- id: gitlab.bandit.B102
  pattern-either:
  - pattern: exec(...)
  - pattern: exec("...")
  message: |
    The use of `exec` is risky.
  metadata:
    shortDescription: Improper Neutralization of Special Elements used in an OS Command
      ('OS Command Injection')
    cwe: 'CWE-78'
    owasp: A1:2017-Injection
    primary_identifier: bandit.B102
    secondary_identifiers:
    - name: Bandit Test ID B102
      type: bandit_test_id
      value: B102
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B102
    shortlink: https://sg.run/rAJJ
    semgrep.dev:
      rule:
        rule_id: qNUoNN
        version_id: e1TON3
        url: https://semgrep.dev/playground/r/e1TON3/gitlab.bandit.B102
        origin: custom
  severity: WARNING
  languages:
  - python
- id: gitlab.bandit.B303-3
  patterns:
  - pattern-either:
    - pattern: Crypto.Hash.MD2.new(...)
    - pattern: Cryptodome.Hash.MD2.new (...)
  message: |
    Detected MD2 hash algorithm which is considered insecure. This algorithm
    has many known vulnerabilities and has been deprecated. Use SHA256 or SHA3 instead.
  metadata:
    cwe: 'CWE-327'
    shortDescription: Use of a Broken or Risky Cryptographic Algorithm
    owasp: A3:2017-Sensitive Data Exposure
    primary_identifier: bandit.B303-3
    secondary_identifiers:
    - name: Bandit Test ID B303
      type: bandit_test_id
      value: B303
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B303-3
    shortlink: https://sg.run/nq5r
    semgrep.dev:
      rule:
        rule_id: 9AUOKZ
        version_id: WrTw4p
        url: https://semgrep.dev/playground/r/WrTw4p/gitlab.bandit.B303-3
        origin: custom
  severity: WARNING
  languages:
  - python
- id: gitlab.bandit.B303-4
  patterns:
  - pattern-either:
    - pattern: Crypto.Hash.MD4.new(...)
    - pattern: Cryptodome.Hash.MD4.new (...)
  message: |
    Detected MD4 hash algorithm which is considered insecure. This algorithm
    has many known vulnerabilities and has been deprecated. Use SHA256 or SHA3 instead.
  metadata:
    cwe: 'CWE-327'
    shortDescription: Use of a Broken or Risky Cryptographic Algorithm
    owasp: A3:2017-Sensitive Data Exposure
    primary_identifier: bandit.B303-4
    secondary_identifiers:
    - name: Bandit Test ID B303
      type: bandit_test_id
      value: B303
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B303-4
    shortlink: https://sg.run/E5GB
    semgrep.dev:
      rule:
        rule_id: yyUvLN
        version_id: 0bTXP3
        url: https://semgrep.dev/playground/r/0bTXP3/gitlab.bandit.B303-4
        origin: custom
  severity: WARNING
  languages:
  - python
- id: gitlab.bandit.B303-5
  patterns:
  - pattern-either:
    - pattern: Crypto.Hash.MD5.new(...)
    - pattern: Cryptodome.Hash.MD5.new (...)
  message: |
    Detected MD5 hash algorithm which is considered insecure. MD5 is not
    collision resistant and is therefore not suitable as a cryptographic
    signature. Use SHA256 or SHA3 instead.
  metadata:
    cwe: 'CWE-327'
    shortDescription: Use of a Broken or Risky Cryptographic Algorithm
    owasp: A3:2017-Sensitive Data Exposure
    primary_identifier: bandit.B303-5
    secondary_identifiers:
    - name: Bandit Test ID B303
      type: bandit_test_id
      value: B303
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B303-5
    shortlink: https://sg.run/70eQ
    semgrep.dev:
      rule:
        rule_id: r6UkYj
        version_id: K3TXWk
        url: https://semgrep.dev/playground/r/K3TXWk/gitlab.bandit.B303-5
        origin: custom
  severity: WARNING
  languages:
  - python
- id: gitlab.bandit.B306
  pattern: tempfile.mktemp(...)
  message: |
    Use tempfile.NamedTemporaryFile instead. From the official Python documentation: THIS FUNCTION IS UNSAFE AND SHOULD
    NOT BE USED. The file name may refer to a file that did not exist at some point, but by the time you get around to creating
    it, someone else may have beaten you to the punch.
  metadata:
    cwe: 'CWE-377'
    shortDescription: Insecure Temporary File
    owasp: A3:2017-Sensitive Data Exposure
    primary_identifier: bandit.B306
    secondary_identifiers:
    - name: Bandit Test ID B306
      type: bandit_test_id
      value: B306
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B306
    shortlink: https://sg.run/Pp6v
    semgrep.dev:
      rule:
        rule_id: eqUvdb
        version_id: 6xTogD
        url: https://semgrep.dev/playground/r/6xTogD/gitlab.bandit.B306
        origin: custom
  languages:
  - python
  severity: ERROR
- id: gitlab.bandit.B103
  patterns:
  - pattern: os.chmod(...,$MASK)
  - metavariable-regex:
      metavariable: $MASK
      regex: (0x..f|0o..[2,3,7]|stat.S_IXGRP|stat.S_IWOTH)
  message: Chmod setting a permissive mask on file.
  metadata:
    shortDescription: Incorrect Permission Assignment for Critical Resource
    cwe: 'CWE-732'
    owasp: A6:2017-Security Misconfiguration
    primary_identifier: bandit.B103
    secondary_identifiers:
    - name: Bandit Test ID B103
      type: bandit_test_id
      value: B103
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B103
    shortlink: https://sg.run/bDNv
    semgrep.dev:
      rule:
        rule_id: lBUd5P
        version_id: vdTR70
        url: https://semgrep.dev/playground/r/vdTR70/gitlab.bandit.B103
        origin: custom
  severity: WARNING
  languages:
  - python
- id: gitlab.bandit.B324
  patterns:
  - pattern-either:
    - pattern: hashlib.new("=~/[M|m][D|d][4|5]/", ...)
    - pattern: hashlib.new(..., name="=~/[M|m][D|d][4|5]/", ...)
    - pattern: hashlib.new('sha1')
    - pattern: hashlib.new(..., name='SHA1')
    - pattern: hashlib.new('sha', string='test')
    - pattern: hashlib.new(name='SHA', string='test')
  message: |
    Detected use of an insecure MD4 or MD5 hash function.
    These functions have known vulnerabilities and are considered deprecated.
    Consider using 'SHA256' or a similar function instead.
  metadata:
    cwe: 'CWE-327'
    shortDescription: Use of a Broken or Risky Cryptographic Algorithm
    owasp: A3:2017-Sensitive Data Exposure
    primary_identifier: bandit.B324
    secondary_identifiers:
    - name: Bandit Test ID B324
      type: bandit_test_id
      value: B324
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B324
    shortlink: https://sg.run/Wg1E
    semgrep.dev:
      rule:
        rule_id: 8GUE2O
        version_id: 8KTZkk
        url: https://semgrep.dev/playground/r/8KTZkk/gitlab.bandit.B324
        origin: custom
  severity: WARNING
  languages:
  - python
- id: gitlab.bandit.B401
  patterns:
  - pattern: import telnetlib
  message: |
    Telnet-related functions are being called. Telnet is considered insecure. Use SSH or some other encrypted protocol.
  metadata:
    cwe: 'CWE-319'
    shortDescription: Cleartext Transmission of Sensitive Information
    owasp: A3:2017-Sensitive Data Exposure
    primary_identifier: bandit.B401
    secondary_identifiers:
    - name: Bandit Test ID B401
      type: bandit_test_id
      value: B401
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B401
    shortlink: https://sg.run/0nrw
    semgrep.dev:
      rule:
        rule_id: gxUW4o
        version_id: QkTOrq
        url: https://semgrep.dev/playground/r/QkTOrq/gitlab.bandit.B401
        origin: custom
  severity: ERROR
  languages:
  - python
- id: gitlab.bandit.B104
  patterns:
  - pattern-either:
    - pattern: |
        $S = socket.socket(...)
        ...
        $S.bind(("0.0.0.0", ...))
    - pattern: |
        $S = socket.socket(...)
        ...
        $S.bind(("::", ...))
    - pattern: |
        $S = socket.socket(...)
        ...
        $S.bind(("", ...))
  message: |
    Running `socket.bind` to 0.0.0.0, ::, or empty string could unexpectedly
    expose the server publicly as it binds to all available interfaces. Consider
    instead getting correct address from an environment variable or
    configuration file.
  metadata:
    shortDescription: Exposure of Sensitive Information to an Unauthorized Actor
    cwe: 'CWE-200'
    owasp: A6:2017-Security Misconfiguration
    primary_identifier: bandit.B104
    secondary_identifiers:
    - name: Bandit Test ID B104
      type: bandit_test_id
      value: B104
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B104
    shortlink: https://sg.run/NrBN
    semgrep.dev:
      rule:
        rule_id: YGUroX
        version_id: d6TWd3
        url: https://semgrep.dev/playground/r/d6TWd3/gitlab.bandit.B104
        origin: custom
  severity: INFO
  languages:
  - python
- id: gitlab.bandit.B703
  patterns:
  - pattern-not-inside: django.utils.html.format_html(...)
  - pattern-either:
    - patterns:
      - pattern: django.utils.safestring.mark_safe(...)
      - pattern-not: django.utils.safestring.mark_safe("...")
  message: |
    'mark_safe()' is used to mark a string as "safe" for HTML output.
    This disables escaping and could therefore subject the content to
    XSS attacks. Use 'django.utils.html.format_html()' to build HTML
    for rendering instead.
  metadata:
    cwe: 'CWE-79'
    shortDescription: Improper Neutralization of Input During Web Page Generation
      ('Cross-site Scripting')
    owasp: A7:2017-Cross-Site Scripting (XSS)
    primary_identifier: bandit.B703
    secondary_identifiers:
    - name: Bandit Test ID B703
      type: bandit_test_id
      value: B703
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B703
    shortlink: https://sg.run/dgk0
    semgrep.dev:
      rule:
        rule_id: j2UqOR
        version_id: zyTZJl
        url: https://semgrep.dev/playground/r/zyTZJl/gitlab.bandit.B703
        origin: custom
  severity: WARNING
  languages:
  - python
- id: gitlab.bandit.B701
  patterns:
  - pattern-not: jinja2.Environment(..., autoescape=True, ...)
  - pattern-not: jinja2.Environment(..., autoescape=jinja2.select_autoescape(...),
      ...)
  - pattern: jinja2.Environment(...)
  message: Detected a Jinja2 environment without autoescaping. Jinja2 does not autoescape
    by default. This is dangerous if you are rendering to a browser because this allows
    for cross-site scripting (XSS) attacks. If you are in a web context, enable autoescaping
    by setting 'autoescape=True.' You may also consider using 'jinja2.select_autoescape()'
    to only enable automatic escaping for certain file extensions.
  metadata:
    cwe: 'CWE-116'
    shortDescription: Improper Encoding or Escaping of Output
    owasp: A7:2017-Cross-Site Scripting (XSS)
    primary_identifier: bandit.B701
    secondary_identifiers:
    - name: Bandit Test ID B701
      type: bandit_test_id
      value: B701
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B701
    shortlink: https://sg.run/v0j0
    semgrep.dev:
      rule:
        rule_id: X5UZBZ
        version_id: rxTevG
        url: https://semgrep.dev/playground/r/rxTevG/gitlab.bandit.B701
        origin: custom
  severity: WARNING
  languages:
  - python
- id: gitlab.eslint.detect-eval-with-expression
  metadata:
    cwe: 'CWE-95'
    shortDescription: 'Improper Neutralization of Directives in Dynamically Evaluated Code
      (''Eval Injection'')'
    owasp: 'A1: Injection'
    source-rule-url: https://github.com/nodesecurity/eslint-plugin-security/blob/master/rules/detect-eval-with-expression.js
    primary_identifier: eslint.detect-eval-with-expression
    secondary_identifiers:
    - name: ESLint rule ID security/detect-eval-with-expression
      type: eslint_rule_id
      value: security/detect-eval-with-expression
    license: MIT
    source: https://semgrep.dev/r/gitlab.eslint.detect-eval-with-expression
    shortlink: https://sg.run/ZeD4
    semgrep.dev:
      rule:
        rule_id: 10UZgd
        version_id: o5Tvk0
        url: https://semgrep.dev/playground/r/o5Tvk0/gitlab.eslint.detect-eval-with-expression
        origin: custom
  message: |
    Detected eval(variable), which could allow a malicious actor to run arbitrary code.
  patterns:
  - pattern: eval($OBJ)
  - pattern-not: eval("...")
  severity: WARNING
  languages:
  - javascript
  - typescript
- id: gitlab.eslint.detect-child-process
  metadata:
    cwe: 'CWE-95'
    shortDescription: 'Improper Neutralization of Directives in Dynamically Evaluated Code
      (''Eval Injection'')'
    owasp: 'A1: Injection'
    source-rule-url: https://github.com/nodesecurity/eslint-plugin-security/blob/master/rules/detect-child-process.js
    primary_identifier: eslint.detect-child-process
    secondary_identifiers:
    - name: ESLint rule ID security/detect-child-process
      type: eslint_rule_id
      value: security/detect-child-process
    license: MIT
    source: https://semgrep.dev/r/gitlab.eslint.detect-child-process
    shortlink: https://sg.run/nqRr
    semgrep.dev:
      rule:
        rule_id: 9AUODZ
        version_id: zyTdjx
        url: https://semgrep.dev/playground/r/zyTdjx/gitlab.eslint.detect-child-process
        origin: custom
  message: |
    Detected non-literal calls to child_process.exec(). This could lead to a command
    injection vulnerability.
  patterns:
  - pattern: child_process.exec(...)
  - pattern-not: child_process.exec('...')
  severity: WARNING
  languages:
  - javascript
  - typescript
- id: gitlab.eslint.detect-buffer-noassert
  metadata:
    cwe: 'CWE-119'
    shortDescription: 'Improper Restriction of Operations within the Bounds of a Memory
      Buffer'
    source-rule-url: https://github.com/nodesecurity/eslint-plugin-security/blob/master/rules/detect-buffer-noassert.js
    primary_identifier: eslint.detect-buffer-noassert
    secondary_identifiers:
    - name: ESLint rule ID security/detect-buffer-noassert
      type: eslint_rule_id
      value: security/detect-buffer-noassert
    license: MIT
    source: https://semgrep.dev/r/gitlab.eslint.detect-buffer-noassert
    shortlink: https://sg.run/E5WB
    semgrep.dev:
      rule:
        rule_id: yyUvwN
        version_id: jQTW6k
        url: https://semgrep.dev/playground/r/jQTW6k/gitlab.eslint.detect-buffer-noassert
        origin: custom
  message: |
    Detected usage of noassert in Buffer API, which allows the offset the be beyond the
    end of the buffer. This could result in writing or reading beyond the end of the buffer.
  pattern-either:
  - pattern: $OBJ.readUInt8(..., true)
  - pattern: $OBJ.readUInt16LE(..., true)
  - pattern: $OBJ.readUInt16BE(..., true)
  - pattern: $OBJ.readUInt32LE(..., true)
  - pattern: $OBJ.readUInt32BE(..., true)
  - pattern: $OBJ.readInt8(..., true)
  - pattern: $OBJ.readInt16LE(..., true)
  - pattern: $OBJ.readInt16BE(..., true)
  - pattern: $OBJ.readInt32LE(..., true)
  - pattern: $OBJ.readInt32BE(..., true)
  - pattern: $OBJ.readFloatLE(..., true)
  - pattern: $OBJ.readFloatBE(..., true)
  - pattern: $OBJ.readDoubleLE(..., true)
  - pattern: $OBJ.readDoubleBE(..., true)
  - pattern: $OBJ.writeUInt8(..., true)
  - pattern: $OBJ.writeUInt16LE(..., true)
  - pattern: $OBJ.writeUInt16BE(..., true)
  - pattern: $OBJ.writeUInt32LE(..., true)
  - pattern: $OBJ.writeUInt32BE(..., true)
  - pattern: $OBJ.writeInt8(..., true)
  - pattern: $OBJ.writeInt16LE(..., true)
  - pattern: $OBJ.writeInt16BE(..., true)
  - pattern: $OBJ.writeInt32LE(..., true)
  - pattern: $OBJ.writeInt32BE(..., true)
  - pattern: $OBJ.writeFloatLE(..., true)
  - pattern: $OBJ.writeFloatBE(..., true)
  - pattern: $OBJ.writeDoubleLE(..., true)
  - pattern: $OBJ.writeDoubleBE(..., true)
  severity: WARNING
  languages:
  - javascript
  - typescript
- id: gitlab.eslint.detect-non-literal-fs-filename
  patterns:
  - pattern-not: $MOD.appendFile("...", ...)
  - pattern-not: $MOD.appendFileSync("...", ...)
  - pattern-not: $MOD.chmod("...", ...)
  - pattern-not: $MOD.chmodSync("...", ...)
  - pattern-not: $MOD.chown("...", ...)
  - pattern-not: $MOD.chownSync("...", ...)
  - pattern-not: $MOD.createReadStream("...", ...)
  - pattern-not: $MOD.createWriteStream("...", ...)
  - pattern-not: $MOD.exists("...", ...)
  - pattern-not: $MOD.existsSync("...", ...)
  - pattern-not: $MOD.lchmod("...", ...)
  - pattern-not: $MOD.lchmodSync("...", ...)
  - pattern-not: $MOD.lchown("...", ...)
  - pattern-not: $MOD.lchownSync("...", ...)
  - pattern-not: $MOD.link("...", "...", ...)
  - pattern-not: $MOD.linkSync("...", "...", ...)
  - pattern-not: $MOD.lstat("...", ...)
  - pattern-not: $MOD.lstatSync("...", ...)
  - pattern-not: $MOD.mkdir("...", ...)
  - pattern-not: $MOD.mkdirSync("...", ...)
  - pattern-not: $MOD.open("...", ...)
  - pattern-not: $MOD.openSync("...", ...)
  - pattern-not: $MOD.readdir("...", ...)
  - pattern-not: $MOD.readdirSync("...", ...)
  - pattern-not: $MOD.readFile("...", ...)
  - pattern-not: $MOD.readFileSync("...", ...)
  - pattern-not: $MOD.readlink("...", ...)
  - pattern-not: $MOD.readlinkSync("...", ...)
  - pattern-not: $MOD.realpath("...", ...)
  - pattern-not: $MOD.realpathSync("...", ...)
  - pattern-not: $MOD.rename("...", "...", ...)
  - pattern-not: $MOD.renameSync("...", "...", ...)
  - pattern-not: $MOD.rmdir("...", ...)
  - pattern-not: $MOD.rmdirSync("...", ...)
  - pattern-not: $MOD.stat("...", ...)
  - pattern-not: $MOD.statSync("...", ...)
  - pattern-not: $MOD.symlink("...", "...", ...)
  - pattern-not: $MOD.symlinkSync("...", "...", ...)
  - pattern-not: $MOD.truncate("...", ...)
  - pattern-not: $MOD.truncateSync("...", ...)
  - pattern-not: $MOD.unlink("...", ...)
  - pattern-not: $MOD.unlinkSync("...", ...)
  - pattern-not: $MOD.unwatchFile("...", ...)
  - pattern-not: $MOD.utimes("...", ...)
  - pattern-not: $MOD.utimesSync("...", ...)
  - pattern-not: $MOD.watch("...", ...)
  - pattern-not: $MOD.watchFile("...", ...)
  - pattern-not: $MOD.writeFile("...", ...)
  - pattern-not: $MOD.writeFileSync("...", ...)
  - pattern-either:
    - pattern: $MOD.appendFile(...)
    - pattern: $MOD.appendFileSync(...)
    - pattern: $MOD.chmod(...)
    - pattern: $MOD.chmodSync(...)
    - pattern: $MOD.chown(...)
    - pattern: $MOD.chownSync(...)
    - pattern: $MOD.createReadStream(...)
    - pattern: $MOD.createWriteStream(...)
    - pattern: $MOD.exists(...)
    - pattern: $MOD.existsSync(...)
    - pattern: $MOD.lchmod(...)
    - pattern: $MOD.lchmodSync(...)
    - pattern: $MOD.lchown(...)
    - pattern: $MOD.lchownSync(...)
    - pattern: $MOD.link(...)
    - pattern: $MOD.linkSync(...)
    - pattern: $MOD.lstat(...)
    - pattern: $MOD.lstatSync(...)
    - pattern: $MOD.mkdir(...)
    - pattern: $MOD.mkdirSync(...)
    - pattern: $MOD.open(...)
    - pattern: $MOD.openSync(...)
    - pattern: $MOD.readdir(...)
    - pattern: $MOD.readdirSync(...)
    - pattern: $MOD.readFile(...)
    - pattern: $MOD.readFileSync(...)
    - pattern: $MOD.readlink(...)
    - pattern: $MOD.readlinkSync(...)
    - pattern: $MOD.realpath(...)
    - pattern: $MOD.realpathSync(...)
    - pattern: $MOD.rename(...)
    - pattern: $MOD.renameSync(...)
    - pattern: $MOD.rmdir(...)
    - pattern: $MOD.rmdirSync(...)
    - pattern: $MOD.stat(...)
    - pattern: $MOD.statSync(...)
    - pattern: $MOD.symlink(...)
    - pattern: $MOD.symlinkSync(...)
    - pattern: $MOD.truncate(...)
    - pattern: $MOD.truncateSync(...)
    - pattern: $MOD.unlink(...)
    - pattern: $MOD.unlinkSync(...)
    - pattern: $MOD.unwatchFile(...)
    - pattern: $MOD.utimes(...)
    - pattern: $MOD.utimesSync(...)
    - pattern: $MOD.watch(...)
    - pattern: $MOD.watchFile(...)
    - pattern: $MOD.writeFile(...)
    - pattern: $MOD.writeFileSync(...)
  message: |
    A variable is present in the filename argument of fs calls, this might allow an attacker to access anything on your system.
  languages:
  - typescript
  - javascript
  severity: WARNING
  metadata:
    cwe: 'CWE-22'
    shortDescription: 'Improper Limitation of a Pathname to a Restricted Directory (''Path
      Traversal'')'
    primary_identifier: eslint.detect-non-literal-fs-filename
    secondary_identifiers:
    - name: ESLint rule ID security/detect-non-literal-fs-filename
      type: eslint_rule_id
      value: security/detect-non-literal-fs-filename
    license: MIT
    source: https://semgrep.dev/r/gitlab.eslint.detect-non-literal-fs-filename
    shortlink: https://sg.run/L09Y
    semgrep.dev:
      rule:
        rule_id: bwUO0X
        version_id: yeT8BB
        url: https://semgrep.dev/playground/r/yeT8BB/gitlab.eslint.detect-non-literal-fs-filename
        origin: custom
- id: gitlab.bandit.B313.B314.B315.B316.B318.B319.B320.B405.B406.B407.B408.B409.B410
  pattern-either:
  - pattern: import xml
  - pattern: import lxml
  - pattern: xml.etree.cElementTree.fromstring(...)
  - pattern: xml.etree.cElementTree.parse(...)
  - pattern: xml.etree.cElementTree.iterparse(...)
  - pattern: xml.etree.cElementTree.XMLParser(...)
  - pattern: xml.etree.ElementTree.fromstring(...)
  - pattern: xml.etree.ElementTree.parse(...)
  - pattern: xml.etree.ElementTree.iterparse(...)
  - pattern: xml.etree.ElementTree.XMLParser(...)
  - pattern: xml.sax.expatreader.create_parser(...)
  - pattern: xml.dom.expatbuilder.parse(...)
  - pattern: xml.dom.expatbuilder.parseString(...)
  - pattern: xml.dom.minidom.parseString(...)
  - pattern: xml.dom.minidom.parse(...)
  - pattern: xml.dom.pulldom.parseString(...)
  - pattern: xml.dom.pulldom.parse(...)
  - pattern: lxml.etree.fromstring(...)
  - pattern: lxml.etree.RestrictedElement(...)
  - pattern: lxml.etree.GlobalParserTLS(...)
  - pattern: lxml.etree.getDefaultParser(...)
  - pattern: lxml.etree.check_docinfo(...)
  metadata:
    cwe: 'CWE-611'
    shortDescription: 'Improper Restriction of XML External Entity Reference'
    owasp: 'A4: XML External Entities (XXE)'
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B313.B314.B315.B316.B318.B319.B320.B405.B406.B407.B408.B409.B410
    shortlink: https://sg.run/DJ5G
    semgrep.dev:
      rule:
        rule_id: L1U4Yd
        version_id: DkTKjj
        url: https://semgrep.dev/playground/r/DkTKjj/gitlab.bandit.B313.B314.B315.B316.B318.B319.B320.B405.B406.B407.B408.B409.B410
        origin: custom
  message: |
    Found use of the native Python XML libraries, which is vulnerable to XML external entity (XXE)
    attacks. The Python documentation recommends the 'defusedxml' library instead. Use 'defusedxml'.
    See https://github.com/tiran/defusedxml for more information.
  severity: ERROR
  languages:
  - python
- id: gitlab.bandit.B501
  patterns:
  - pattern-either:
    - pattern: requests.put(..., verify=False, ...)
    - pattern: requests.patch(..., verify=False, ...)
    - pattern: requests.delete(..., verify=False, ...)
    - pattern: requests.head(..., verify=False, ...)
    - pattern: requests.options(..., verify=False, ...)
    - pattern: requests.request(..., verify=False, ...)
    - pattern: requests.get(..., verify=False, ...)
    - pattern: requests.post(..., verify=False, ...)
  message: |
    Certificate verification has been explicitly disabled. This
    permits insecure connections to insecure servers. Re-enable
    certification validation.
  metadata:
    cwe: 'CWE-295'
    shortDescription: Improper Certificate Validation
    owasp: A3:2017-Sensitive Data Exposure
    primary_identifier: bandit.B501
    secondary_identifiers:
    - name: Bandit Test ID B501
      type: bandit_test_id
      value: B501
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B501
    shortlink: https://sg.run/zk6n
    semgrep.dev:
      rule:
        rule_id: GdU0wd
        version_id: RGTlG1
        url: https://semgrep.dev/playground/r/RGTlG1/gitlab.bandit.B501
        origin: custom
  severity: ERROR
  languages:
  - python
- id: gitlab.bandit.B502.B503
  patterns:
  - pattern-either:
    - pattern: ssl.PROTOCOL_SSLv2
    - pattern: ssl.PROTOCOL_SSLv3
    - pattern: ssl.PROTOCOL_TLSv1
    - pattern: ssl.PROTOCOL_TLSv1_1
    - pattern: pyOpenSSL.SSL.SSLv2_METHOD
    - pattern: pyOpenSSL.SSL.SSLv23_METHOD
    - pattern: pyOpenSSL.SSL.SSLv3_METHOD
    - pattern: pyOpenSSL.SSL.TLSv1_METHOD
    - pattern: pyOpenSSL.SSL.TLSv1_1_METHOD
  message: |
    An insecure SSL version was detected. TLS versions 1.0, 1.1, and all SSL versions
    are considered weak encryption and are deprecated.
    Use 'ssl.PROTOCOL_TLSv1_2' or higher.
  metadata:
    cwe: 'CWE-326'
    shortDescription: 'Inadequate Encryption Strength'
    owasp: 'A3: Sensitive Data Exposure'
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B502.B503
    shortlink: https://sg.run/plRe
    semgrep.dev:
      rule:
        rule_id: ReUPvG
        version_id: 1QTeld
        url: https://semgrep.dev/playground/r/1QTeld/gitlab.bandit.B502.B503
        origin: custom
  severity: WARNING
  languages:
  - python
- id: gitlab.bandit.B504
  patterns:
  - pattern: ssl.wrap_socket()
  message: |
    ssl.wrap_socket call with no SSL/TLS protocol version specified, the default SSLv23 could be insecure, possible security issue.
  metadata:
    cwe: 'CWE-326'
    shortDescription: Inadequate Encryption Strength
    owasp: A3:2017-Sensitive Data Exposure
    primary_identifier: bandit.B504
    secondary_identifiers:
    - name: Bandit Test ID B504
      type: bandit_test_id
      value: B504
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B504
    shortlink: https://sg.run/2bNr
    semgrep.dev:
      rule:
        rule_id: AbUWYl
        version_id: BjTALX
        url: https://semgrep.dev/playground/r/BjTALX/gitlab.bandit.B504
        origin: custom
  severity: INFO
  languages:
  - python
- id: gitlab.bandit.B303-2
  pattern: hashlib.sha1(...)
  message: |
    Detected SHA1 hash algorithm which is considered insecure. SHA1 is not
    collision resistant and is therefore not suitable as a cryptographic
    signature. Use SHA256 or SHA3 instead.
  metadata:
    cwe: 'CWE-327'
    shortDescription: Use of a Broken or Risky Cryptographic Algorithm
    owasp: A3:2017-Sensitive Data Exposure
    primary_identifier: bandit.B303-2
    secondary_identifiers:
    - name: Bandit Test ID B303
      type: bandit_test_id
      value: B303
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B303-2
    shortlink: https://sg.run/EOOw
    semgrep.dev:
      rule:
        rule_id: j2URRg
        version_id: DkTjrr
        url: https://semgrep.dev/playground/r/DkTjrr/gitlab.bandit.B303-2
        origin: custom
  severity: WARNING
  languages:
  - python
- id: gitlab.bandit.B201
  patterns:
  - pattern-inside: |
      import flask
      ...
  - pattern: $APP.run(..., debug=True, ...)
  message: |
    Detected Flask app with debug=True. Do not deploy to production with this flag enabled
    as it will leak sensitive information. Instead, consider using Flask configuration
    variables or setting 'debug' using system environment variables.
  metadata:
    cwe: 'CWE-489'
    shortDescription: Active Debug Code
    owasp: A6:2017-Security Misconfiguration
    primary_identifier: bandit.B201
    secondary_identifiers:
    - name: Bandit Test ID B201
      type: bandit_test_id
      value: B201
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B201
    shortlink: https://sg.run/eK4b
    semgrep.dev:
      rule:
        rule_id: oqUrz7
        version_id: QkTOeR
        url: https://semgrep.dev/playground/r/QkTOeR/gitlab.bandit.B201
        origin: custom
  severity: WARNING
  languages:
  - python
- id: gitlab.bandit.B301-1
  pattern-either:
  - pattern: pickle.$FUNC(...)
  - pattern: _pickle.$FUNC(...)
  message: |
    Avoid using `pickle`, which is known to lead to code execution vulnerabilities.
    When unpickling, the serialized data could be manipulated to run arbitrary code.
    Instead, consider serializing the relevant data as JSON or a similar text-based
    serialization format.
  metadata:
    cwe: 'CWE-502'
    shortDescription: Deserialization of Untrusted Data
    owasp: A8:2017-Insecure Deserialization
    primary_identifier: bandit.B301-1
    secondary_identifiers:
    - name: Bandit Test ID B301-1
      type: bandit_test_id
      value: B301-1
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B301-1
    shortlink: https://sg.run/v20A
    semgrep.dev:
      rule:
        rule_id: zdU1y5
        version_id: JdTj9B
        url: https://semgrep.dev/playground/r/JdTj9B/gitlab.bandit.B301-1
        origin: custom
  severity: WARNING
  languages:
  - python
- id: gitlab.bandit.B108-1
  pattern: open("=~/^\/tmp.*/", ...)
  message: |
    Detected hardcoded temp directory. Consider using 'tempfile.TemporaryFile' instead.
  metadata:
    cwe: 'CWE-377'
    shortDescription: 'Insecure Temporary File'
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B108-1
    shortlink: https://sg.run/O81B
    semgrep.dev:
      rule:
        rule_id: 6JU6qd
        version_id: l4TzRP
        url: https://semgrep.dev/playground/r/l4TzRP/gitlab.bandit.B108-1
        origin: custom
  severity: WARNING
  languages:
  - python
- id: gitlab.bandit.B303-7
  pattern: cryptography.hazmat.primitives.hashes.MD5(...)
  message: |
    Detected MD5 hash algorithm which is considered insecure. MD5 is not
    collision resistant and is therefore not suitable as a cryptographic
    signature. Use SHA256 or SHA3 instead.
  metadata:
    cwe: 'CWE-327'
    shortDescription: Use of a Broken or Risky Cryptographic Algorithm
    owasp: A3:2017-Sensitive Data Exposure
    primary_identifier: bandit.B303-7
    secondary_identifiers:
    - name: Bandit Test ID B303
      type: bandit_test_id
      value: B303
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B303-7
    shortlink: https://sg.run/7GGZ
    semgrep.dev:
      rule:
        rule_id: 10Ueez
        version_id: l4T0nj
        url: https://semgrep.dev/playground/r/l4T0nj/gitlab.bandit.B303-7
        origin: custom
  severity: WARNING
  languages:
  - python
- id: gitlab.bandit.B303-8
  pattern: cryptography.hazmat.primitives.hashes.SHA1(...)
  message: |
    Detected SHA1 hash algorithm which is considered insecure. SHA1 is not
    collision resistant and is therefore not suitable as a cryptographic
    signature. Use SHA256 or SHA3 instead.
  metadata:
    cwe: 'CWE-327'
    shortDescription: Use of a Broken or Risky Cryptographic Algorithm
    owasp: A3:2017-Sensitive Data Exposure
    primary_identifier: bandit.B303-8
    secondary_identifiers:
    - name: Bandit Test ID B303
      type: bandit_test_id
      value: B303
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B303-8
    shortlink: https://sg.run/L88r
    semgrep.dev:
      rule:
        rule_id: 9AUkko
        version_id: YDT79J
        url: https://semgrep.dev/playground/r/YDT79J/gitlab.bandit.B303-8
        origin: custom
  severity: WARNING
  languages:
  - python
- id: gitlab.eslint.detect-disable-mustache-escape
  metadata:
    cwe: 'CWE-79'
    shortDescription: 'Improper Neutralization of Input During Web Page Generation (XSS)'
    owasp: 'A7: Cross-Site Scripting XSS'
    source-rule-url: https://github.com/nodesecurity/eslint-plugin-security/blob/master/rules/detect-disable-mustache-escape.js
    primary_identifier: eslint.detect-disable-mustache-escape
    secondary_identifiers:
    - name: ESLint rule ID security/detect-disable-mustache-escape
      type: eslint_rule_id
      value: security/detect-disable-mustache-escape
    license: MIT
    source: https://semgrep.dev/r/gitlab.eslint.detect-disable-mustache-escape
    shortlink: https://sg.run/Jjjo
    semgrep.dev:
      rule:
        rule_id: QrUppL
        version_id: 2KTeG0
        url: https://semgrep.dev/playground/r/2KTeG0/gitlab.eslint.detect-disable-mustache-escape
        origin: custom
  message: |
    Markup escaping disabled. This can be used with some template engines to escape
    disabling of HTML entities, which can lead to XSS attacks.
  pattern: $OBJ.escapeMarkup = false
  severity: WARNING
  languages:
  - javascript
  - typescript
- id: gitlab.eslint.detect-non-literal-require
  metadata:
    cwe: 'CWE-95'
    shortDescription: 'Improper Neutralization of Directives in Dynamically Evaluated Code
      (''Eval Injection'')'
    owasp: 'A1: Injection'
    source-rule-url: https://github.com/nodesecurity/eslint-plugin-security/blob/master/rules/detect-non-literal-require.js
    primary_identifier: eslint.detect-non-literal-require
    secondary_identifiers:
    - name: ESLint rule ID security/detect-non-literal-require
      type: eslint_rule_id
      value: security/detect-non-literal-require
    license: MIT
    source: https://semgrep.dev/r/gitlab.eslint.detect-non-literal-require
    shortlink: https://sg.run/5JJ6
    semgrep.dev:
      rule:
        rule_id: 3qUEE5
        version_id: X0TEOB
        url: https://semgrep.dev/playground/r/X0TEOB/gitlab.eslint.detect-non-literal-require
        origin: custom
  message: |
    Detected the use of require(variable). Calling require with a non-literal argument might
    allow an attacker to load an run arbitrary code, or access arbitrary files.
  patterns:
  - pattern: require($OBJ)
  - pattern-not: require('...')
  severity: WARNING
  languages:
  - javascript
  - typescript
- id: gitlab.eslint.detect-possible-timing-attacks
  patterns:
  - pattern-not: if ($Z == null) { ... };
  - pattern-not: if ($Z === null) { ... };
  - pattern-not: if ($Z != null) { ... };
  - pattern-not: if ($Z !== null) { ... };
  - pattern-not: if ($Q != undefined) { ... };
  - pattern-not: if ($Q !== undefined) { ... };
  - pattern-not: if ($Q == undefined) { ... };
  - pattern-not: if ($Q === undefined) { ... };
  - pattern-not: return $Y == null;
  - pattern-not: return $Y === null;
  - pattern-not: return $Y != null;
  - pattern-not: return $Y !== null;
  - pattern-not: return $Y == undefined;
  - pattern-not: return $Y === undefined;
  - pattern-not: return $Y != undefined;
  - pattern-not: return $Y !== undefined;
  - pattern-either:
    - pattern: |
        if (password == $X) {
            ...
        }
    - pattern: |
        if ($X == password) {
            ...
        }
    - pattern: |
        if (password === $X) {
            ...
        }
    - pattern: |
        if ($X === password) {
            ...
        }
    - pattern: |
        if (pass == $X) {
            ...
        }
    - pattern: |
        if ($X == pass) {
            ...
        }
    - pattern: |
        if (pass === $X) {
            ...
        }
    - pattern: |
        if ($X === pass) {
            ...
        }
    - pattern: |
        if (secret == $X) {
            ...
        }
    - pattern: |
        if ($X == secret) {
            ...
        }
    - pattern: |
        if (secret === $X) {
            ...
        }
    - pattern: |
        if ($X === secret) {
            ...
        }
    - pattern: |
        if (api == $X) {
            ...
        }
    - pattern: |
        if ($X == api) {
            ...
        }
    - pattern: |
        if (api === $X) {
            ...
        }
    - pattern: |
        if ($X === api) {
            ...
        }
    - pattern: |
        if (apiKey == $X) {
            ...
        }
    - pattern: |
        if ($X == apiKey) {
            ...
        }
    - pattern: |
        if (apiKey === $X) {
            ...
        }
    - pattern: |
        if ($X === apiKey) {
            ...
        }
    - pattern: |
        if (apiSecret == $X) {
            ...
        }
    - pattern: |
        if ($X == apiSecret) {
            ...
        }
    - pattern: |
        if (apiSecret === $X) {
            ...
        }
    - pattern: |
        if ($X === apiSecret) {
            ...
        }
    - pattern: |
        if (token == $X) {
            ...
        }
    - pattern: |
        if ($X == token) {
            ...
        }
    - pattern: |
        if (token === $X) {
            ...
        }
    - pattern: |
        if ($X === token) {
            ...
        }
    - pattern: |
        if (hash == $X) {
            ...
        }
    - pattern: |
        if ($X == hash) {
            ...
        }
    - pattern: |
        if (hash === $X) {
            ...
        }
    - pattern: |
        if ($X === hash) {
            ...
        }
    - pattern: |
        if (auth_token == $X) {
            ...
        }
    - pattern: |
        if ($X == auth_token) {
            ...
        }
    - pattern: |
        if (auth_token === $X) {
            ...
        }
    - pattern: |
        if ($X === auth_token) {
            ...
        }
    - pattern: |
        if (password != $X) {
            ...
        }
    - pattern: |
        if ($X != password) {
            ...
        }
    - pattern: |
        if (password !== $X) {
            ...
        }
    - pattern: |
        if ($X !== password) {
            ...
        }
    - pattern: |
        if (pass != $X) {
            ...
        }
    - pattern: |
        if ($X != pass) {
            ...
        }
    - pattern: |
        if (pass !== $X) {
            ...
        }
    - pattern: |
        if ($X !== pass) {
            ...
        }
    - pattern: |
        if (secret != $X) {
            ...
        }
    - pattern: |
        if ($X != secret) {
            ...
        }
    - pattern: |
        if (secret !== $X) {
            ...
        }
    - pattern: |
        if ($X !== secret) {
            ...
        }
    - pattern: |
        if (api != $X) {
            ...
        }
    - pattern: |
        if ($X != api) {
            ...
        }
    - pattern: |
        if (api !== $X) {
            ...
        }
    - pattern: |
        if ($X !== api) {
            ...
        }
    - pattern: |
        if (apiKey != $X) {
            ...
        }
    - pattern: |
        if ($X != apiKey) {
            ...
        }
    - pattern: |
        if (apiKey !== $X) {
            ...
        }
    - pattern: |
        if ($X !== apiKey) {
            ...
        }
    - pattern: |
        if (apiSecret != $X) {
            ...
        }
    - pattern: |
        if ($X != apiSecret) {
            ...
        }
    - pattern: |
        if (apiSecret !== $X) {
            ...
        }
    - pattern: |
        if ($X !== apiSecret) {
            ...
        }
    - pattern: |
        if (token != $X) {
            ...
        }
    - pattern: |
        if ($X != token) {
            ...
        }
    - pattern: |
        if (token !== $X) {
            ...
        }
    - pattern: |
        if ($X !== token) {
            ...
        }
    - pattern: |
        if (hash != $X) {
            ...
        }
    - pattern: |
        if ($X != hash) {
            ...
        }
    - pattern: |
        if (hash !== $X) {
            ...
        }
    - pattern: |
        if ($X !== hash) {
            ...
        }
    - pattern: |
        if (auth_token != $X) {
            ...
        }
    - pattern: |
        if ($X != auth_token) {
            ...
        }
    - pattern: |
        if (auth_token !== $X) {
            ...
        }
    - pattern: |
        if ($X !== auth_token) {
            ...
        }
    - pattern: |
        return $X === auth_token;
    - pattern: |
        return auth_token === $X;
    - pattern: |
        return $X === token;
    - pattern: |
        return token === $X;
    - pattern: |
        return $X === hash;
    - pattern: |
        return hash === $X;
    - pattern: |
        return $X === password;
    - pattern: |
        return password === $X;
    - pattern: |
        return $X === pass;
    - pattern: |
        return pass === $X;
    - pattern: |
        return $X === apiKey;
    - pattern: |
        return apiKey === $X;
    - pattern: |
        return $X === apiSecret;
    - pattern: |
        return apiSecret === $X;
    - pattern: |
        return $X === api_key;
    - pattern: |
        return api_key === $X;
    - pattern: |
        return $X === api_secret;
    - pattern: |
        return api_secret === $X;
    - pattern: |
        return $X === secret;
    - pattern: |
        return secret === $X;
    - pattern: |
        return $X === api;
    - pattern: |
        return api === $X;
    - pattern: |
        return $X == auth_token;
    - pattern: |
        return auth_token == $X;
    - pattern: |
        return $X == token;
    - pattern: |
        return token == $X;
    - pattern: |
        return $X == hash;
    - pattern: |
        return hash == $X;
    - pattern: |
        return $X == password;
    - pattern: |
        return password == $X;
    - pattern: |
        return $X == pass;
    - pattern: |
        return pass == $X;
    - pattern: |
        return $X == apiKey;
    - pattern: |
        return apiKey == $X;
    - pattern: |
        return $X == apiSecret;
    - pattern: |
        return apiSecret == $X;
    - pattern: |
        return $X == api_key;
    - pattern: |
        return api_key == $X;
    - pattern: |
        return $X == api_secret;
    - pattern: |
        return api_secret == $X;
    - pattern: |
        return $X == secret;
    - pattern: |
        return secret == $X;
    - pattern: |
        return $X == api;
    - pattern: |
        return api == $X;
    - pattern: |
        return $X !== auth_token;
    - pattern: |
        return auth_token !== $X;
    - pattern: |
        return $X !== token;
    - pattern: |
        return token !== $X;
    - pattern: |
        return $X !== hash;
    - pattern: |
        return hash !== $X;
    - pattern: |
        return $X !== password;
    - pattern: |
        return password !== $X;
    - pattern: |
        return $X !== pass;
    - pattern: |
        return pass !== $X;
    - pattern: |
        return $X !== apiKey;
    - pattern: |
        return apiKey !== $X;
    - pattern: |
        return $X !== apiSecret;
    - pattern: |
        return apiSecret !== $X;
    - pattern: |
        return $X !== api_key;
    - pattern: |
        return api_key !== $X;
    - pattern: |
        return $X !== api_secret;
    - pattern: |
        return api_secret !== $X;
    - pattern: |
        return $X !== secret;
    - pattern: |
        return secret !== $X;
    - pattern: |
        return $X !== api;
    - pattern: |
        return api !== $X;
    - pattern: |
        return $X != auth_token;
    - pattern: |
        return auth_token != $X;
    - pattern: |
        return $X != token;
    - pattern: |
        return token != $X;
    - pattern: |
        return $X != hash;
    - pattern: |
        return hash != $X;
    - pattern: |
        return $X != password;
    - pattern: |
        return password != $X;
    - pattern: |
        return $X != pass;
    - pattern: |
        return pass != $X;
    - pattern: |
        return $X != apiKey;
    - pattern: |
        return apiKey != $X;
    - pattern: |
        return $X != apiSecret;
    - pattern: |
        return apiSecret != $X;
    - pattern: |
        return $X != api_key;
    - pattern: |
        return api_key != $X;
    - pattern: |
        return $X != api_secret;
    - pattern: |
        return api_secret != $X;
    - pattern: |
        return $X != secret;
    - pattern: |
        return secret != $X;
    - pattern: |
        return $X != api;
    - pattern: |
        return api != $X;
  message: 'String comparisons using ''==='', ''!=='', ''!='' and ''=='' is vulnerable
    to timing attacks. More info: https://snyk.io/blog/node-js-timing-attack-ccc-ctf/'
  languages:
  - javascript
  severity: WARNING
  metadata:
    cwe: 'CWE-208'
    shortDescription: 'Observable Timing Discrepancy'
    primary_identifier: eslint.detect-possible-timing-attacks
    secondary_identifiers:
    - name: ESLint rule ID security/detect-possible-timing-attacks
      type: eslint_rule_id
      value: security/detect-possible-timing-attacks
    license: MIT
    source: https://semgrep.dev/r/gitlab.eslint.detect-possible-timing-attacks
    shortlink: https://sg.run/GwwB
    semgrep.dev:
      rule:
        rule_id: 4bU22N
        version_id: 1QTBbO
        url: https://semgrep.dev/playground/r/1QTBbO/gitlab.eslint.detect-possible-timing-attacks
        origin: custom
- id: gitlab.eslint.react-missing-noopener
  pattern-either:
  - patterns:
    - pattern: |
        <$X target="_blank" />
    - pattern-not: |
        <$X target="_blank" rel="..." />
  - patterns:
    - pattern-inside: |
        <$X target="_blank" rel=... />
    - pattern-regex: rel=["']((?!noopener).)*?["']
  - patterns:
    - pattern: |
        React.createElement($A, {target: '_blank'},...)
    - pattern-not: |
        React.createElement($A, {rel: '...'},...)
  - patterns:
    - pattern: |
        React.createElement($A, {target: '_blank', rel: $REL},...)
    - metavariable-regex:
        metavariable: $REL
        regex: '["'']((?!noopener).)*?[''"]'
  - patterns:
    - pattern: |
        $P = {target: '_blank'};
        ...
        React.createElement($A, $P,...);
    - pattern-not: |
        $P = {rel: '...'};
        ...
        React.createElement($A, $P,...);
  - patterns:
    - pattern: |
        $P = {target: '_blank', rel: $REL};
        ...
        React.createElement($A, $P,...);
    - metavariable-regex:
        metavariable: $REL
        regex: '["'']((?!noopener).)*?[''"]'
  message: |
    Missing 'noopener' on an anchor tag where target='_blank'. This could introduce
    a reverse tabnabbing vulnerability. Include 'noopener' when using target='_blank'.
  metadata:
    cwe: 'CWE-200'
    shortDescription: 'Exposure of Sensitive Information to an Unauthorized Actor'
    owasp: 'A3: Sensitive Data Exposure'
    references:
    - https://html.spec.whatwg.org/multipage/links.html#link-type-noreferrer
    - https://web.dev/external-anchors-use-rel-noopener/
    - https://owasp.org/www-community/attacks/Reverse_Tabnabbing
    primary_identifier: eslint.react-missing-noopener
    secondary_identifiers:
    - name: ESLint rule ID security/react-missing-noopener
      type: eslint_rule_id
      value: security/react-missing-noopener
    license: MIT
    source: https://semgrep.dev/r/gitlab.eslint.react-missing-noopener
    shortlink: https://sg.run/RPPE
    semgrep.dev:
      rule:
        rule_id: PeUBBq
        version_id: bZTrKO
        url: https://semgrep.dev/playground/r/bZTrKO/gitlab.eslint.react-missing-noopener
        origin: custom
  languages:
  - typescript
  - javascript
  severity: WARNING
- id: gitlab.eslint.react-dangerouslysetinnerhtml
  pattern-either:
  - pattern: |
      <$X dangerouslySetInnerHTML=... />
  - pattern: |
      {dangerouslySetInnerHTML: ...}
  message: "Setting HTML from code is risky because it\u2019s easy to inadvertently
    expose your users to a\ncross-site scripting (XSS) attack.\n"
  metadata:
    cwe: 'CWE-79'
    shortDescription: 'Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp: 'A7: Cross-site Scripting (XSS)'
    references:
    - https://reactjs.org/docs/dom-elements.html#dangerouslysetinnerhtml
    primary_identifier: eslint.react-dangerouslysetinnerhtml
    secondary_identifiers:
    - name: ESLint rule ID security/react-dangerouslysetinnerhtml
      type: eslint_rule_id
      value: security/react-dangerouslysetinnerhtml
    license: MIT
    source: https://semgrep.dev/r/gitlab.eslint.react-dangerouslysetinnerhtml
    shortlink: https://sg.run/Awwg
    semgrep.dev:
      rule:
        rule_id: JDUQQY
        version_id: NdTL9Y
        url: https://semgrep.dev/playground/r/NdTL9Y/gitlab.eslint.react-dangerouslysetinnerhtml
        origin: custom
  languages:
  - typescript
  - javascript
  severity: WARNING
- id: gitlab.bandit.B113
  patterns:
  - pattern-either:
    - patterns:
      - pattern: requests.$METHOD('...', timeout=$VAL)
      - metavariable-comparison:
          metavariable: $VAL
          comparison: $VAL <= 0
    - patterns:
      - pattern: requests.$METHOD('...', timeout=$VAL)
      - metavariable-regex:
          metavariable: $VAL
          regex: (^None)
    - patterns:
      - pattern-not: requests.$METHOD('...', timeout=$VAL, ...)
      - pattern-either:
        - pattern: requests.$METHOD('...', ...)
        - pattern: requests.$METHOD('...')
  - metavariable-regex:
      metavariable: $METHOD
      regex: (get|put|delete|post|options|head|patch)
  message: |
    Requests call without timeout can cause your program to hang indefinitely.
  metadata:
    cwe: 'CWE-400'
    shortDescription: Uncontrolled Resource Consumption
    primary_identifier: bandit.B113
    secondary_identifiers:
    - name: Bandit Test ID B113
      type: bandit_test_id
      value: B113
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B113
    shortlink: https://sg.run/PoEq
    semgrep.dev:
      rule:
        rule_id: OrULKb
        version_id: ExTw06
        url: https://semgrep.dev/playground/r/ExTw06/gitlab.bandit.B113
        origin: custom
  severity: WARNING
  languages:
  - python
- id: gitlab.bandit.B202
  patterns:
  - pattern-inside: |
      import tarfile
      ...
  - pattern-either:
    - patterns:
      - pattern-inside: |
          $TAR = tarfile.open(...)
          ...
      - pattern-either:
        - pattern: $TAR.extractall(...)
        - pattern: tarfile.extractall(..., members=$TAR)
        - pattern: $TAR.extractall(..., members=[])
    - patterns:
      - pattern: tarfile.extractall(...)
      - pattern: tarfile.extractall(..., members=[])
  message: |
    tarfile.extractall used without any validation. You should check members and discard dangerous
    ones.
  metadata:
    cwe: 'CWE-22'
    shortDescription: Improper Limitation of a Pathname to a Restricted Directory
      ('Path Traversal')
    primary_identifier: bandit.B202
    secondary_identifiers:
    - name: Bandit Test ID B202
      type: bandit_test_id
      value: B202
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B202
    shortlink: https://sg.run/J0EQ
    semgrep.dev:
      rule:
        rule_id: eqUPXn
        version_id: gETDQp
        url: https://semgrep.dev/playground/r/gETDQp/gitlab.bandit.B202
        origin: custom
  severity: ERROR
  languages:
  - python
- id: gitlab.bandit.B415
  pattern-either:
  - pattern: import pyghmi
  message: |
    An IPMI-related module is being imported. IPMI is considered insecure. Use an encrypted
    protocol.
  metadata:
    cwe: 'CWE-310'
    shortDescription: Cryptographic issues
    category: security
    cisa: https://www.cisa.gov/uscert/ncas/alerts/TA13-207A
    primary_identifier: bandit.B415
    secondary_identifiers:
    - name: Bandit Test ID B415
      type: bandit_test_id
      value: B415
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B415
    shortlink: https://sg.run/5NO3
    semgrep.dev:
      rule:
        rule_id: v8Ubxq
        version_id: PkTyPX
        url: https://semgrep.dev/playground/r/PkTyPX/gitlab.bandit.B415
        origin: custom
  severity: ERROR
  languages:
  - python
- id: gitlab.bandit.B612
  patterns:
  - pattern: logging.config.listen(...)
  message: |
    The logging.config.listen function provides the ability to listen for external configuration
    files on a socket server. Because portions of the configuration are passed through eval(), use
    of this function may open its users to a security risk. While the function only binds to a
    socket on localhost, and so does not accept connections from remote machines, there are
    scenarios where untrusted code could be run under the account of the process which calls
    listen(). logging.config.listen provides the ability to verify bytes received across the socket
    with signature verification or encryption/decryption.
  metadata:
    cwe: 'CWE-94'
    shortDescription: Improper Control of Generation of Code ('Code Injection')
    primary_identifier: bandit.B612
    secondary_identifiers:
    - name: Bandit Test ID B612
      type: bandit_test_id
      value: B612
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B612
    shortlink: https://sg.run/GBEn
    semgrep.dev:
      rule:
        rule_id: d8UN2B
        version_id: jQT2XB
        url: https://semgrep.dev/playground/r/jQT2XB/gitlab.bandit.B612
        origin: custom
  severity: WARNING
  languages:
  - python
- id: gitlab.bandit.B508
  pattern-either:
  - pattern: pysnmp.hlapi.CommunityData(..., mpModel=0, ...)
  - pattern: pysnmp.hlapi.CommunityData(..., mpModel=1, ...)
  message: |
    The use of SNMPv1 and SNMPv2 is insecure. You should use SNMPv3 if able.
  metadata:
    cwe: 'CWE-319'
    shortDescription: Cleartext Transmission of Sensitive Information
    primary_identifier: bandit.B508
    secondary_identifiers:
    - name: Bandit Test ID B508
      type: bandit_test_id
      value: B508
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B508
    shortlink: https://sg.run/RpEK
    semgrep.dev:
      rule:
        rule_id: ZqUR1w
        version_id: 2KTjO3
        url: https://semgrep.dev/playground/r/2KTjO3/gitlab.bandit.B508
        origin: custom
  severity: WARNING
  languages:
  - python
- id: gitlab.bandit.B509
  pattern-either:
  - pattern: pysnmp.hlapi.UsmUserData($ARG1, $ARG2)
  - pattern: pysnmp.hlapi.UsmUserData($ARG1)
  - pattern: pysnmp.hlapi.UsmUserData(...,'noAuthNoPriv',...)
  - pattern: pysnmp.hlapi.UsmUserData(...,'authNoPriv',...)
  message: |
    You should not use SNMPv3 without encryption. noAuthNoPriv & authNoPriv is insecure
  metadata:
    cwe: 'CWE-319'
    shortDescription: Cleartext Transmission of Sensitive Information
    primary_identifier: bandit.B509
    secondary_identifiers:
    - name: Bandit Test ID B509
      type: bandit_test_id
      value: B509
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B509
    shortlink: https://sg.run/A3O4
    semgrep.dev:
      rule:
        rule_id: nJUDAe
        version_id: X0TqKz
        url: https://semgrep.dev/playground/r/X0TqKz/gitlab.bandit.B509
        origin: custom
  severity: WARNING
  languages:
  - python
- id: gitlab.eslint.detect-new-buffer
  metadata:
    source-rule-url: https://github.com/eslint-community/eslint-plugin-security/blob/main/rules/detect-new-buffer.js
    primary_identifier: eslint.detect-new-buffer
    secondary_identifiers:
    - name: ESLint rule ID/detect-new-buffer
      type: eslint_rule_id
      value: detect-new-buffer
    license: MIT
    source: https://semgrep.dev/r/gitlab.eslint.detect-new-buffer
    shortlink: https://sg.run/BJ85
    semgrep.dev:
      rule:
        rule_id: EwU5PB
        version_id: e1T5OQ
        url: https://semgrep.dev/playground/r/e1T5OQ/gitlab.eslint.detect-new-buffer
        origin: custom
  patterns:
  - patterns:
    - pattern-not-inside: |-
        require("safe-buffer")
        ...
    - pattern-not-inside: |-
        import { Buffer } from "safe-buffer"
        ...
    - pattern-inside: function $FUNC(..., $X, ...) { ... }
    - pattern: new Buffer($X,...)
  - pattern-not: |
      new Buffer("...",...)
  - pattern-not: |
      new Buffer([...] , ...)
  message: |
    Detects instances of new Buffer(argument) where argument is any non-literal value which could
    cause memory leak. Recommended usage is `Buffer.from()` or `Buffer.alloc()`.
  languages:
  - javascript
  - typescript
  severity: ERROR
- id: gitlab.find_sec_bugs.SPRING_CSRF_PROTECTION_DISABLED-1
  pattern-either:
  - pattern: (org.springframework.security.config.annotation.web.builders.HttpSecurity
      $H). ... .csrf().disable();
  - pattern: (org.springframework.security.config.annotation.web.configurers.CsrfConfigurer<HttpSecurity>
      $C).disable();
  languages:
  - java
  message: |
    Disabling Spring Security's CSRF protection is unsafe for standard web applications.
  metadata:
    category: security
    cwe: 'CWE-352'
    shortDescription: 'Cross-Site Request Forgery (CSRF)'
    primary_identifier: find_sec_bugs.SPRING_CSRF_PROTECTION_DISABLED-1
    secondary_identifiers:
    - name: Find Security Bugs-SPRING_CSRF_PROTECTION_DISABLED
      type: find_sec_bugs_type
      value: SPRING_CSRF_PROTECTION_DISABLED
    license: MIT
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.SPRING_CSRF_PROTECTION_DISABLED-1
    shortlink: https://sg.run/DGLj
    semgrep.dev:
      rule:
        rule_id: 7KU6jz
        version_id: vdTgRl
        url: https://semgrep.dev/playground/r/vdTgRl/gitlab.find_sec_bugs.SPRING_CSRF_PROTECTION_DISABLED-1
        origin: custom
  severity: WARNING
- id: gitlab.find_sec_bugs.SQL_INJECTION_SPRING_JDBC-1.SQL_INJECTION_JPA-1.SQL_INJECTION_JDO-1.SQL_INJECTION_JDBC-1.SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE-1.SQL_INJECTION-1.SQL_INJECTION_HIBERNATE-1.SQL_INJECTION_VERTX-1.SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING-1
  patterns:
  - pattern-not-inside: |
      final String $ARG = ...;
      ...
  - pattern-not-inside: |
      class $CLAZZ {
        ...
        final String $ARG = ...;
        ...
      }
  - pattern-either:
    - patterns:
      - pattern: (javax.jdo.PersistenceManager $PM).newQuery($ARG)
      - pattern-not: (javax.jdo.PersistenceManager $PM).newQuery("...")
    - patterns:
      - pattern: (javax.jdo.PersistenceManager $PM).newQuery(..., $ARG)
      - pattern-not: (javax.jdo.PersistenceManager $PM).newQuery(..., "...")
    - patterns:
      - pattern: (javax.jdo.Query $Q).setFilter($ARG)
      - pattern-not: (javax.jdo.Query $Q).setFilter("...")
    - patterns:
      - pattern: (javax.jdo.Query $Q).setGrouping($ARG)
      - pattern-not: (javax.jdo.Query $Q).setGrouping("...")
    - patterns:
      - pattern: (javax.jdo.Query $Q).setGrouping($ARG)
      - pattern-not: (javax.jdo.Query $Q).setGrouping("...")
    - patterns:
      - pattern: org.hibernate.criterion.Restrictions.sqlRestriction($ARG, ...)
      - pattern-not: org.hibernate.criterion.Restrictions.sqlRestriction("...", ...)
    - patterns:
      - pattern: (org.hibernate.Session $S).createQuery((String $ARG), ...)
      - pattern-not: (org.hibernate.Session $S).createQuery("...", ...)
    - patterns:
      - pattern: (org.hibernate.Session $S).createSQLQuery($ARG, ...)
      - pattern-not: (org.hibernate.Session $S).createSQLQuery("...", ...)
    - patterns:
      - pattern: (java.sql.Statement $S).executeQuery($ARG, ...)
      - pattern-not: (java.sql.Statement $S).createSQLQuery("...", ...)
    - patterns:
      - pattern: (java.sql.Statement $S).execute($ARG, ...)
      - pattern-not: (java.sql.Statement $S).execute("...", ...)
    - patterns:
      - pattern: (java.sql.Statement $S).executeUpdate($ARG, ...)
      - pattern-not: (java.sql.Statement $S).executeUpdate("...", ...)
    - patterns:
      - pattern: (java.sql.Statement $S).executeLargeUpdate($ARG, ...)
      - pattern-not: (java.sql.Statement $S).executeLargeUpdate("...", ...)
    - patterns:
      - pattern: (java.sql.Statement $S).addBatch($ARG, ...)
      - pattern-not: (java.sql.Statement $S).addBatch("...", ...)
    - patterns:
      - pattern: (java.sql.PreparedStatement $S).executeQuery($ARG, ...)
      - pattern-not: (java.sql.PreparedStatement $S).executeQuery("...", ...)
    - patterns:
      - pattern: (java.sql.PreparedStatement $S).execute($ARG, ...)
      - pattern-not: (java.sql.PreparedStatement $S).execute("...", ...)
    - patterns:
      - pattern: (java.sql.PreparedStatement $S).executeUpdate($ARG, ...)
      - pattern-not: (java.sql.PreparedStatement $S).executeUpdate("...", ...)
    - patterns:
      - pattern: (java.sql.PreparedStatement $S).executeLargeUpdate($ARG, ...)
      - pattern-not: (java.sql.PreparedStatement $S).executeLargeUpdate("...", ...)
    - patterns:
      - pattern: (java.sql.PreparedStatement $S).addBatch($ARG, ...)
      - pattern-not: (java.sql.PreparedStatement $S).addBatch("...", ...)
    - patterns:
      - pattern: (java.sql.Connection $S).prepareCall($ARG, ...)
      - pattern-not: (java.sql.Connection $S).prepareCall("...", ...)
    - patterns:
      - pattern: (java.sql.Connection $S).prepareStatement($ARG, ...)
      - pattern-not: (java.sql.Connection $S).prepareStatement("...", ...)
    - patterns:
      - pattern: (java.sql.Connection $S).nativeSQL($ARG, ...)
      - pattern-not: (java.sql.Connection $S).nativeSQL("...", ...)
    - patterns:
      - pattern: new org.springframework.jdbc.core.PreparedStatementCreatorFactory($ARG,
          ...)
      - pattern-not: new org.springframework.jdbc.core.PreparedStatementCreatorFactory("...",
          ...)
    - patterns:
      - pattern: (org.springframework.jdbc.core.PreparedStatementCreatorFactory $F).newPreparedStatementCreator($ARG,
          ...)
      - pattern-not: (org.springframework.jdbc.core.PreparedStatementCreatorFactory
          $F).newPreparedStatementCreator("...", ...)
    - patterns:
      - pattern: (org.springframework.jdbc.core.JdbcOperations $O).batchUpdate($ARG,
          ...)
      - pattern-not: (org.springframework.jdbc.core.JdbcOperations $O).batchUpdate("...",
          ...)
    - patterns:
      - pattern: (org.springframework.jdbc.core.JdbcOperations $O).execute($ARG, ...)
      - pattern-not: (org.springframework.jdbc.core.JdbcOperations $O).execute("...",
          ...)
    - patterns:
      - pattern: (org.springframework.jdbc.core.JdbcOperations $O).query($ARG, ...)
      - pattern-not: (org.springframework.jdbc.core.JdbcOperations $O).query("...",
          ...)
    - patterns:
      - pattern: (org.springframework.jdbc.core.JdbcOperations $O).queryForList($ARG,
          ...)
      - pattern-not: (org.springframework.jdbc.core.JdbcOperations $O).queryForList("...",
          ...)
    - patterns:
      - pattern: (org.springframework.jdbc.core.JdbcOperations $O).queryForMap($ARG,
          ...)
      - pattern-not: (org.springframework.jdbc.core.JdbcOperations $O).queryForMap("...",
          ...)
    - patterns:
      - pattern: (org.springframework.jdbc.core.JdbcOperations $O).queryForObject($ARG,
          ...)
      - pattern-not: (org.springframework.jdbc.core.JdbcOperations $O).queryForObject("...",
          ...)
    - patterns:
      - pattern: (org.springframework.jdbc.core.JdbcOperations $O).queryForObject($ARG,
          ...)
      - pattern-not: (org.springframework.jdbc.core.JdbcOperations $O).queryForObject("...",
          ...)
    - patterns:
      - pattern: (org.springframework.jdbc.core.JdbcOperations $O).queryForRowSet($ARG,
          ...)
      - pattern-not: (org.springframework.jdbc.core.JdbcOperations $O).queryForRowSet("...",
          ...)
    - patterns:
      - pattern: (org.springframework.jdbc.core.JdbcOperations $O).queryForInt($ARG,
          ...)
      - pattern-not: (org.springframework.jdbc.core.JdbcOperations $O).queryForInt("...",
          ...)
    - patterns:
      - pattern: (org.springframework.jdbc.core.JdbcOperations $O).queryForLong($ARG,
          ...)
      - pattern-not: (org.springframework.jdbc.core.JdbcOperations $O).queryForLong("...",
          ...)
    - patterns:
      - pattern: (org.springframework.jdbc.core.JdbcOperations $O).udpate($ARG, ...)
      - pattern-not: (org.springframework.jdbc.core.JdbcOperations $O).udpate("...",
          ...)
    - patterns:
      - pattern: (org.springframework.jdbc.core.JdbcTemplate $O).batchUpdate($ARG,
          ...)
      - pattern-not: (org.springframework.jdbc.core.JdbcTemplate $O).batchUpdate("...",
          ...)
    - patterns:
      - pattern: (org.springframework.jdbc.core.JdbcTemplate $O).execute($ARG, ...)
      - pattern-not: (org.springframework.jdbc.core.JdbcTemplate $O).execute("...",
          ...)
    - patterns:
      - pattern: (org.springframework.jdbc.core.JdbcTemplate $O).query($ARG, ...)
      - pattern-not: (org.springframework.jdbc.core.JdbcTemplate $O).query("...",
          ...)
    - patterns:
      - pattern: (org.springframework.jdbc.core.JdbcTemplate $O).queryForList($ARG,
          ...)
      - pattern-not: (org.springframework.jdbc.core.JdbcTemplate $O).queryForList("...",
          ...)
    - patterns:
      - pattern: (org.springframework.jdbc.core.JdbcTemplate $O).queryForMap($ARG,
          ...)
      - pattern-not: (org.springframework.jdbc.core.JdbcTemplate $O).queryForMap("...",
          ...)
    - patterns:
      - pattern: (org.springframework.jdbc.core.JdbcTemplate $O).queryForObject($ARG,
          ...)
      - pattern-not: (org.springframework.jdbc.core.JdbcTemplate $O).queryForObject("...",
          ...)
    - patterns:
      - pattern: (org.springframework.jdbc.core.JdbcTemplate $O).queryForRowSet($ARG,
          ...)
      - pattern-not: (org.springframework.jdbc.core.JdbcTemplate $O).queryForRowSet("...",
          ...)
    - patterns:
      - pattern: (org.springframework.jdbc.core.JdbcTemplate $O).queryForInt($ARG,
          ...)
      - pattern-not: (org.springframework.jdbc.core.JdbcTemplate $O).queryForInt("...",
          ...)
    - patterns:
      - pattern: (org.springframework.jdbc.core.JdbcTemplate $O).queryForLong($ARG,
          ...)
      - pattern-not: (org.springframework.jdbc.core.JdbcTemplate $O).queryForLong("...",
          ...)
    - patterns:
      - pattern: (org.springframework.jdbc.core.JdbcTemplate $O).update($ARG, ...)
      - pattern-not: (org.springframework.jdbc.core.JdbcTemplate $O).update("...",
          ...)
    - patterns:
      - pattern: (io.vertx.sqlclient.SqlClient $O).query($ARG, ...)
      - pattern-not: (io.vertx.sqlclient.SqlClient $O).query("...", ...)
    - patterns:
      - pattern: (io.vertx.sqlclient.SqlClient $O).preparedQuery($ARG, ...)
      - pattern-not: (io.vertx.sqlclient.SqlClient $O).preparedQuery("...", ...)
    - patterns:
      - pattern: (io.vertx.sqlclient.SqlConnection $O).prepare($ARG, ...)
      - pattern-not: (io.vertx.sqlclient.SqlConnection $O).prepare("...", ...)
    - patterns:
      - pattern: (org.apache.turbine.om.peer.BasePeer $O).executeQuery($ARG, ...)
      - pattern-not: (org.apache.turbine.om.peer.BasePeer $O).executeQuery("...",
          ...)
    - patterns:
      - pattern: (org.apache.torque.util.BasePeer $O).executeQuery($ARG, ...)
      - pattern-not: (org.apache.torque.util.BasePeer $O).executeQuery("...", ...)
    - patterns:
      - pattern: (javax.persistence.EntityManager $O).createQuery($ARG, ...)
      - pattern-not: (javax.persistence.EntityManager $O).createQuery("...", ...)
    - patterns:
      - pattern: (javax.persistence.EntityManager $O).createNativeQuery($ARG, ...)
      - pattern-not: (javax.persistence.EntityManager $O).createNativeQuery("...",
          ...)
  languages:
  - java
  message: |
    The input values included in SQL queries need to be passed in safely. Bind
    variables in prepared statements can be used to easily mitigate the risk of
    SQL injection.
  metadata:
    category: security
    cwe: 'CWE-89'
    shortDescription: 'Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    primary_identifier: find_sec_bugs.SQL_INJECTION_SPRING_JDBC-1.SQL_INJECTION_JPA-1.SQL_INJECTION_JDO-1.SQL_INJECTION_JDBC-1.SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE-1.SQL_INJECTION-1.SQL_INJECTION_HIBERNATE-1.SQL_INJECTION_VERTX-1.SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING-1
    secondary_identifiers:
    - name: Find Security Bugs-SQL_INJECTION_SPRING_JDBC
      type: find_sec_bugs_type
      value: SQL_INJECTION_SPRING_JDBC
    - name: Find Security Bugs-SQL_INJECTION_JPA
      type: find_sec_bugs_type
      value: SQL_INJECTION_JPA
    - name: Find Security Bugs-SQL_INJECTION_JDO
      type: find_sec_bugs_type
      value: SQL_INJECTION_JDO
    - name: Find Security Bugs-SQL_INJECTION_JDBC
      type: find_sec_bugs_type
      value: SQL_INJECTION_JDBC
    - name: Find Security Bugs-SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE
      type: find_sec_bugs_type
      value: SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE
    - name: Find Security Bugs-SQL_INJECTION
      type: find_sec_bugs_type
      value: SQL_INJECTION
    - name: Find Security Bugs-SQL_INJECTION_HIBERNATE
      type: find_sec_bugs_type
      value: SQL_INJECTION_HIBERNATE
    - name: Find Security Bugs-SQL_INJECTION_VERTX
      type: find_sec_bugs_type
      value: SQL_INJECTION_VERTX
    - name: Find Security Bugs-SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING
      type: find_sec_bugs_type
      value: SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING
    license: MIT
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.SQL_INJECTION_SPRING_JDBC-1.SQL_INJECTION_JPA-1.SQL_INJECTION_JDO-1.SQL_INJECTION_JDBC-1.SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE-1.SQL_INJECTION-1.SQL_INJECTION_HIBERNATE-1.SQL_INJECTION_VERTX-1.SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING-1
    shortlink: https://sg.run/W9PA
    semgrep.dev:
      rule:
        rule_id: L1Udoq
        version_id: d6T1WJ
        url: https://semgrep.dev/playground/r/d6T1WJ/gitlab.find_sec_bugs.SQL_INJECTION_SPRING_JDBC-1.SQL_INJECTION_JPA-1.SQL_INJECTION_JDO-1.SQL_INJECTION_JDBC-1.SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE-1.SQL_INJECTION-1.SQL_INJECTION_HIBERNATE-1.SQL_INJECTION_VERTX-1.SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING-1
        origin: custom
  severity: ERROR
- id: gitlab.find_sec_bugs.XSS_REQUEST_PARAMETER_TO_SEND_ERROR-1
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-inside: $FUNC(..., HttpServletRequest $REQ, ...) {...}
    - pattern-either:
      - pattern: $REQ.getParameter(...);
      - pattern: $REQ.getHeader(...);
      - pattern: $REQ.getRequestedSessionId();
      - pattern: $REQ.getQueryString();
  pattern-sanitizers:
  - patterns:
    - pattern-inside: org.owasp.encoder.Encode.forHtml($TAINTED);
    - pattern: $TAINTED
  pattern-sinks:
  - patterns:
    - pattern-inside: $FUNC(..., HttpServletResponse $RES, ...) {...}
    - pattern: $RES.sendError(..., $DATA);
    - pattern: $DATA
  message: |
    Servlet reflected cross site scripting vulnerability in error page. This code directly writes
    an HTTP parameter to a Server error page (using HttpServletResponse.sendError). Echoing this
    untrusted input allows for a reflected cross site scripting vulnerability.
  languages:
  - java
  severity: WARNING
  metadata:
    cwe: 'CWE-79'
    shortDescription: 'Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    category: security
    technology:
    - java
    primary_identifier: find_sec_bugs.XSS_REQUEST_PARAMETER_TO_SEND_ERROR-1
    secondary_identifiers:
    - name: Find Security Bugs-XSS_REQUEST_PARAMETER_TO_SEND_ERROR
      type: find_sec_bugs_type
      value: XSS_REQUEST_PARAMETER_TO_SEND_ERROR
    license: MIT
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.XSS_REQUEST_PARAMETER_TO_SEND_ERROR-1
    shortlink: https://sg.run/0xwb
    semgrep.dev:
      rule:
        rule_id: 8GUo74
        version_id: ZRTnZY
        url: https://semgrep.dev/playground/r/ZRTnZY/gitlab.find_sec_bugs.XSS_REQUEST_PARAMETER_TO_SEND_ERROR-1
        origin: custom
- id: gitlab.gosec.G111-1
  patterns:
  - pattern-either:
    - pattern: |
        import $NET "net/http"
        ...
        $NET.Dir("/")
    - pattern: |
        import "net/http"
        ...
        http.Dir("/")
  message: |
    Potential directory traversal
  metadata:
    cwe: 'CWE-23'
    shortDescription: 'Relative Path Traversal'
    primary_identifier: gosec.G111-1
    secondary_identifiers:
    - name: Gosec Rule ID G111
      type: gosec_rule_id
      value: G111
    license: MIT
    source: https://semgrep.dev/r/gitlab.gosec.G111-1
    shortlink: https://sg.run/KKZd
    semgrep.dev:
      rule:
        rule_id: gxU8oA
        version_id: nWTjR4
        url: https://semgrep.dev/playground/r/nWTjR4/gitlab.gosec.G111-1
        origin: custom
  severity: WARNING
  languages:
  - go
- id: gitlab.gosec.G114-1
  patterns:
  - pattern-inside: |
      import "net/http"
      ...
  - pattern-either:
    - pattern: http.ListenAndServe(...)
    - pattern: http.ListenAndServeTLS(...)
    - pattern: http.Serve(...)
    - pattern: http.ServeTLS(...)
  message: |
    The use of net/http serve functions without support for setting timeouts are susceptible to the
    Slowloris class of attacks.
  metadata:
    cwe: 'CWE-400'
    shortDescription: 'Uncontrolled Resource Consumption'
    primary_identifier: gosec.G114-1
    secondary_identifiers:
    - name: Gosec Rule ID G114
      type: gosec_rule_id
      value: G114
    license: MIT
    source: https://semgrep.dev/r/gitlab.gosec.G114-1
    shortlink: https://sg.run/qbgx
    semgrep.dev:
      rule:
        rule_id: QrU3jz
        version_id: ExTOwW
        url: https://semgrep.dev/playground/r/ExTOwW/gitlab.gosec.G114-1
        origin: custom
  severity: WARNING
  languages:
  - go
- id: gitlab.gosec.G112-1
  patterns:
  - pattern-inside: |
      import "net/http"
      ...
  - pattern-either:
    - patterns:
      - pattern-not-inside: |
          &http.Server{
            ...,
            ReadHeaderTimeout: ...,
            ...,
          }
      - pattern-not-inside: |
          &http.Server{
            ...,
            ReadTimeout: ...,
            ...,
          }
      - pattern-not-inside: |
          $S = &http.Server{
            ...,
          }
          $S.ReadHeaderTimeout = ...
          ...
      - pattern-not-inside: |
          $S = &http.Server{
            ...,
          }
          $S.ReadTimeout = ...
          ...
      - pattern: |
          &http.Server{
            ...,
          }
  message: |
    Potential Slowloris Attack because ReadHeaderTimeout is not configured in the http.Server
  metadata:
    cwe: 'CWE-400'
    shortDescription: 'Uncontrolled Resource Consumption'
    primary_identifier: gosec.G112-1
    secondary_identifiers:
    - name: Gosec Rule ID G112
      type: gosec_rule_id
      value: G112
    license: MIT
    source: https://semgrep.dev/r/gitlab.gosec.G112-1
    shortlink: https://sg.run/lX1j
    semgrep.dev:
      rule:
        rule_id: 3qUKzB
        version_id: 7ZTdy3
        url: https://semgrep.dev/playground/r/7ZTdy3/gitlab.gosec.G112-1
        origin: custom
  severity: WARNING
  languages:
  - go
- id: gitlab.gosec.G113-1
  patterns:
  - pattern-inside: |
      import "math/big"
      ...
  - pattern-inside: |
      $R = big.Rat{...}
      ...
  - pattern: |
      $R.SetString(...)
  message: |
    Potential Integer overflow made by strconv.Atoi result conversion to int16/32
  metadata:
    cwe: 'CWE-190'
    shortDescription: 'Integer Overflow or Wraparound'
    primary_identifier: gosec.G113-1
    secondary_identifiers:
    - name: Gosec Rule ID G113
      type: gosec_rule_id
      value: G113
    license: MIT
    source: https://semgrep.dev/r/gitlab.gosec.G113-1
    shortlink: https://sg.run/YP5X
    semgrep.dev:
      rule:
        rule_id: 4bUNw2
        version_id: LjTO33
        url: https://semgrep.dev/playground/r/LjTO33/gitlab.gosec.G113-1
        origin: custom
  severity: ERROR
  languages:
  - go