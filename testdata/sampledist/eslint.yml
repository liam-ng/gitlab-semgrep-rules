# yamllint disable
# rule-set version: 1.1.3
# yamllint enable
---
rules:
- id: "eslint.detect-no-csrf-before-method-override-1"
  metadata:
    cwe: "CWE-352: Cross-Site Request Forgery (CSRF)"
    source-rule-url: "https://github.com/nodesecurity/eslint-plugin-security/blob/master/rules/detect-no-csrf-before-method-override.js"
    references:
    - "https://github.com/nodesecurity/eslint-plugin-security/blob/master/docs/bypass-connect-csrf-protection-by-abusing.md"
    primary_identifier: "eslint.detect-no-csrf-before-method-override"
    secondary_identifiers:
    - value: "detect-no-csrf-before-method-override"
      type: "eslint_rule_id"
      name: "ESLint rule ID/detect-no-csrf-before-method-override"
  message: |
    Detected use of express.csrf() middleware before express.methodOverride(). This can
    allow GET requests (which are not checked by csrf) to turn into POST requests later.
  pattern: |
    express.csrf();
    ...
    express.methodOverride();
  severity: "WARNING"
  languages:
  - "javascript"
  - "typescript"
- id: "eslint.detect-non-literal-require-1"
  metadata:
    cwe: "CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code
      ('Eval Injection')"
    owasp: "A1: Injection"
    source-rule-url: "https://github.com/nodesecurity/eslint-plugin-security/blob/master/rules/detect-non-literal-require.js"
    primary_identifier: "eslint.detect-non-literal-require"
    secondary_identifiers:
    - name: "ESLint rule ID/detect-non-literal-require"
      type: "eslint_rule_id"
      value: "detect-non-literal-require"
  message: |
    Detected the use of require(variable). Calling require with a non-literal argument might
    allow an attacker to load an run arbitrary code, or access arbitrary files.
  patterns:
  - pattern: "require($OBJ)"
  - pattern-not: "require('...')"
  severity: "WARNING"
  languages:
  - "javascript"
  - "typescript"
