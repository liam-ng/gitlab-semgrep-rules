# yamllint disable
# rule-set version: v1.3.10
# yamllint enable
---
rules:
- id: "flawfinder.RpcImpersonateClient-1.ImpersonateLoggedOnUser-1.CoImpersonateClient-1.ImpersonateNamedPipeClient-1.ImpersonateDdeClientWindow-1.ImpersonateSecurityContext-1.SetThreadToken-1"
  languages:
  - "c"
  message: |
    These functions may be used to either drop or change account privileges. If the calls
    fail, the process will continue to run with the privileges assigned to it on start. Depending
    on
    the logic of the application, this may allow attackers to abuse the system due to privileges
    never
    being changed to a different access level.

    Always ensure return values of this function are checked to determine if the application should
    continue to operate.
  metadata:
    shortDescription: "Ensure return values are checked when attempting to drop privileges"
    cwe: "CWE-250"
    owasp: "A5:2017-Broken Access Control"
    primary_identifier: "flawfinder.RpcImpersonateClient-1.ImpersonateLoggedOnUser-1.CoImpersonateClient-1.ImpersonateNamedPipeClient-1.ImpersonateDdeClientWindow-1.ImpersonateSecurityContext-1.SetThreadToken-1"
    secondary_identifiers:
    - name: "Flawfinder - RpcImpersonateClient"
      type: "flawfinder_func_name"
      value: "RpcImpersonateClient"
    - name: "Flawfinder - ImpersonateLoggedOnUser"
      type: "flawfinder_func_name"
      value: "ImpersonateLoggedOnUser"
    - name: "Flawfinder - CoImpersonateClient"
      type: "flawfinder_func_name"
      value: "CoImpersonateClient"
    - name: "Flawfinder - ImpersonateNamedPipeClient"
      type: "flawfinder_func_name"
      value: "ImpersonateNamedPipeClient"
    - name: "Flawfinder - ImpersonateDdeClientWindow"
      type: "flawfinder_func_name"
      value: "ImpersonateDdeClientWindow"
    - name: "Flawfinder - ImpersonateSecurityContext"
      type: "flawfinder_func_name"
      value: "ImpersonateSecurityContext"
    - name: "Flawfinder - SetThreadToken"
      type: "flawfinder_func_name"
      value: "SetThreadToken"
  pattern-either:
  - pattern: "RpcImpersonateClient(...)"
  - pattern: "ImpersonateLoggedOnUser(...)"
  - pattern: "CoImpersonateClient(...)"
  - pattern: "ImpersonateNamedPipeClient(...)"
  - pattern: "ImpersonateDdeClientWindow(...)"
  - pattern: "ImpersonateSecurityContext(...)"
  - pattern: "SetThreadToken(...)"
  severity: "ERROR"
- id: "flawfinder.umask-1"
  languages:
  - "c"
  message: |
    The umask function call sets the process's file mode creation mask. umask values determine
    what permissions a file should be created with and who can read or write to these files.
    Ensure that umask is given most restrictive possible setting depending on the context,
    usually 066 or 077, for more information please see:
    https://en.wikipedia.org/wiki/Umask#Mask_effect.
  metadata:
    shortDescription: "Ensure restrictive umask values"
    cwe: "CWE-732"
    owasp: "A6:2017-Security Misconfiguration"
    primary_identifier: "flawfinder.umask"
    secondary_identifiers:
    - name: "Flawfinder - umask"
      type: "flawfinder_func_name"
      value: "umask"
  pattern: "umask(...)"
  severity: "INFO"
- id: "flawfinder.MultiByteToWideChar-1"
  languages:
  - "c"
  message: |
    The input buffer is the number of bytes in the string, but the size
    of the output buffer is the number of characters. To avoid overflows, the
    application must determine the correct buffer size which depends on the data type
    the buffer receives.

    For more information see:
    https://learn.microsoft.com/en-us/windows/win32/intl/security-considerations--international-features
  metadata:
    shortDescription: "Easily misused function may lead to buffer overflows"
    cwe: "CWE-120"
    owasp: "A1:2017-Injection"
    primary_identifier: "flawfinder.MultiByteToWideChar"
    secondary_identifiers:
    - name: "Flawfinder - MultiByteToWideChar"
      type: "flawfinder_func_name"
      value: "MultiByteToWideChar"
  pattern: "MultiByteToWideChar(...)"
  severity: "INFO"
- id: "flawfinder.StrCat-1.StrCatA-1.StrcatW-1.lstrcatA-1.lstrcatW-1.strCatBuff-1.StrCatBuffA-1.StrCatBuffW-1.StrCatChainW-1._tccat-1._mbccat-1._ftcscat-1.StrCatN-1.StrCatNA-1.StrCatNW-1.StrNCat-1.StrNCatA-1.StrNCatW-1.lstrncat-1.lstrcatnA-1.lstrcatnW-1"
  languages:
  - "c"
  message: |
    The `StrCat` family of functions do not guarantee the final string to be null terminated.
    Consider using one of the following alternatives: `StringCbCat`, `StringCbCatEx`,
    `StringCbCatN`, `StringCbCatNEx`, `StringCchCat`, `StringCchCatEx`, `StringCchCatN`, or
    `StringCchCatNEx`.

    For more information please see: https://learn.microsoft.com/en-us/windows/win32/api/strsafe/
  metadata:
    shortDescription: "Insecure string processing function"
    cwe: "CWE-120"
    owasp: "A1:2017-Injection"
    primary_identifier: "flawfinder.StrCat-1.StrCatA-1.StrcatW-1.lstrcatA-1.lstrcatW-1.strCatBuff-1.StrCatBuffA-1.StrCatBuffW-1.StrCatChainW-1._tccat-1._mbccat-1._ftcscat-1.StrCatN-1.StrCatNA-1.StrCatNW-1.StrNCat-1.StrNCatA-1.StrNCatW-1.lstrncat-1.lstrcatnA-1.lstrcatnW-1"
    secondary_identifiers:
    - name: "Flawfinder - StrCat"
      type: "flawfinder_func_name"
      value: "StrCat"
    - name: "Flawfinder - StrCatA"
      type: "flawfinder_func_name"
      value: "StrCatA"
    - name: "Flawfinder - StrcatW"
      type: "flawfinder_func_name"
      value: "StrcatW"
    - name: "Flawfinder - lstrcatA"
      type: "flawfinder_func_name"
      value: "lstrcatA"
    - name: "Flawfinder - lstrcatW"
      type: "flawfinder_func_name"
      value: "lstrcatW"
    - name: "Flawfinder - strCatBuff"
      type: "flawfinder_func_name"
      value: "strCatBuff"
    - name: "Flawfinder - StrCatBuffA"
      type: "flawfinder_func_name"
      value: "StrCatBuffA"
    - name: "Flawfinder - StrCatBuffW"
      type: "flawfinder_func_name"
      value: "StrCatBuffW"
    - name: "Flawfinder - StrCatChainW"
      type: "flawfinder_func_name"
      value: "StrCatChainW"
    - name: "Flawfinder - _tccat"
      type: "flawfinder_func_name"
      value: "_tccat"
    - name: "Flawfinder - _mbccat"
      type: "flawfinder_func_name"
      value: "_mbccat"
    - name: "Flawfinder - _ftcscat"
      type: "flawfinder_func_name"
      value: "_ftcscat"
    - name: "Flawfinder - StrCatN"
      type: "flawfinder_func_name"
      value: "StrCatN"
    - name: "Flawfinder - StrCatNA"
      type: "flawfinder_func_name"
      value: "StrCatNA"
    - name: "Flawfinder - StrCatNW"
      type: "flawfinder_func_name"
      value: "StrCatNW"
    - name: "Flawfinder - StrNCat"
      type: "flawfinder_func_name"
      value: "StrNCat"
    - name: "Flawfinder - StrNCatA"
      type: "flawfinder_func_name"
      value: "StrNCatA"
    - name: "Flawfinder - StrNCatW"
      type: "flawfinder_func_name"
      value: "StrNCatW"
    - name: "Flawfinder - lstrncat"
      type: "flawfinder_func_name"
      value: "lstrncat"
    - name: "Flawfinder - lstrcatnA"
      type: "flawfinder_func_name"
      value: "lstrcatnA"
    - name: "Flawfinder - lstrcatnW"
      type: "flawfinder_func_name"
      value: "lstrcatnW"
  pattern-either:
  - pattern: "StrCat(...)"
  - pattern: "StrCatA(...)"
  - pattern: "StrcatW(...)"
  - pattern: "lstrcatA(...)"
  - pattern: "lstrcatW(...)"
  - pattern: "strCatBuff(...)"
  - pattern: "StrCatBuffA(...)"
  - pattern: "StrCatBuffW(...)"
  - pattern: "StrCatChainW(...)"
  - pattern: "_tccat(...)"
  - pattern: "_mbccat(...)"
  - pattern: "_ftcscat(...)"
  - pattern: "StrCatN(...)"
  - pattern: "StrCatNA(...)"
  - pattern: "StrCatNW(...)"
  - pattern: "StrNCat(...)"
  - pattern: "StrNCatA(...)"
  - pattern: "StrNCatW(...)"
  - pattern: "lstrncat(...)"
  - pattern: "lstrcatnA(...)"
  - pattern: "lstrcatnW(...)"
  severity: "ERROR"
- id: "flawfinder.char-1.TCHAR-1.wchar_t-1"
  languages:
  - "c"
  message: |
    Perform bounds checking, use functions that limit length, or ensure that the size is larger
    than the maximum possible length.
  metadata:
    cwe: "CWE-120: Statically-sized arrays can be improperly restricted, leading to
      potential overflows or other issues (CWE-119!/CWE-120)"
    owasp: "A1:2017-Injection"
    primary_identifier: "flawfinder.char-1.TCHAR-1.wchar_t-1"
    secondary_identifiers:
    - name: "Flawfinder - char"
      type: "flawfinder_func_name"
      value: "char"
    - name: "Flawfinder - TCHAR"
      type: "flawfinder_func_name"
      value: "TCHAR"
    - name: "Flawfinder - wchar_t"
      type: "flawfinder_func_name"
      value: "wchar_t"
  pattern-either:
  - patterns:
    - pattern-regex: "(wchar_t) *[a-zA-Z0-9_]+\\[.*\\]"
    - pattern-not-regex: "(wchar_t) *[a-zA-Z0-9_]+\\[\\](\\s|)\\= *([a-zA-Z]|)(\\s|)(\"|{)(.*)"
  - patterns:
    - pattern-regex: "(char) *[a-zA-Z0-9_]+\\[.*\\]"
    - pattern-not-regex: "(char) *[a-zA-Z0-9_]+\\[\\](\\s|)\\= *([a-zA-Z]|)(\\s|)(\"|{)(.*)"
  - patterns:
    - pattern-regex: "(TCHAR) *[a-zA-Z0-9_]+\\[.*\\]"
    - pattern-not-regex: "(TCHAR) *[a-zA-Z0-9_]+\\[\\](\\s|)\\= *([a-zA-Z]|)(\\s|)(\"|{)(.*)"
  - patterns:
    - pattern-regex: "static *(const)? *(wchar_t|char|TCHAR) *[a-zA-Z0-9_]+ *\\[.*\\]\\*(={.*})?"
  - patterns:
    - pattern-regex: "(.*|)(\\s|)\\=(\\s|)\\((char.*) (malloc)\\(.*\\[[0-9]+\\].*\\)"
  severity: "INFO"
- id: "flawfinder.equal-1.mismatch-1.is_permutation-1"
  languages:
  - "c"
  message: |
    This function is often discouraged by most C++ coding standards in favor of its safer
    alternatives provided since C++14. Consider using a form of this function:
    (std::equal, std::mismatch or std::is_permutation) that checks the second iterator
    before potentially reading past its bounds.

    For more information please see: https://en.cppreference.com/w/cpp/algorithm
  metadata:
    shortDescription: "Function does not check the second iterator for over-read conditions"
    cwe: "CWE-126"
    primary_identifier: "flawfinder.equal-1.mismatch-1.is_permutation-1"
    secondary_identifiers:
    - name: "Flawfinder - equal"
      type: "flawfinder_func_name"
      value: "equal"
    - name: "Flawfinder - mismatch"
      type: "flawfinder_func_name"
      value: "mismatch"
    - name: "Flawfinder - is_permutation"
      type: "flawfinder_func_name"
      value: "is_permutation"
  pattern-either:
  - pattern: "equal(...)"
  - pattern: "mismatch(...)"
  - pattern: "is_permutation(...)"
  severity: "INFO"
- id: "flawfinder.fscanf-1.sscanf-1.vsscanf-1.vfscanf-1._ftscanf-1.fwscanf-1.vfwscanf-1.vswscanf-1"
  languages:
  - "c"
  message: |
    Format specifiers can take optional field widths, which should be
    used to limit how many characters are copied into the target buffer.

    Example:
    ```
      const char str[20] = "AAAAAAAAAAAAAAAAAAA";
      char buf[11] = {0};
      sscanf(str, "%10s", &buf); // buf = AAAAAAAAAA\0
    ```
  metadata:
    shortDescription: "sscanf() functions may allow format string based overflows"
    cwe: "CWE-120"
    owasp: "A1:2017-Injection"
    primary_identifier: "flawfinder.fscanf-1.sscanf-1.vsscanf-1.vfscanf-1._ftscanf-1.fwscanf-1.vfwscanf-1.vswscanf-1"
    secondary_identifiers:
    - name: "Flawfinder - fscanf"
      type: "flawfinder_func_name"
      value: "fscanf"
    - name: "Flawfinder - sscanf"
      type: "flawfinder_func_name"
      value: "sscanf"
    - name: "Flawfinder - vsscanf"
      type: "flawfinder_func_name"
      value: "vsscanf"
    - name: "Flawfinder - vfscanf"
      type: "flawfinder_func_name"
      value: "vfscanf"
    - name: "Flawfinder - _ftscanf"
      type: "flawfinder_func_name"
      value: "_ftscanf"
    - name: "Flawfinder - fwscanf"
      type: "flawfinder_func_name"
      value: "fwscanf"
    - name: "Flawfinder - vfwscanf"
      type: "flawfinder_func_name"
      value: "vfwscanf"
    - name: "Flawfinder - vswscanf"
      type: "flawfinder_func_name"
      value: "vswscanf"
  pattern-either:
  - pattern: "fscanf(...)"
  - pattern: "sscanf(...)"
  - pattern: "vsscanf(...)"
  - pattern: "vfscanf(...)"
  - pattern: "_ftscanf(...)"
  - pattern: "fwscanf(...)"
  - pattern: "vfwscanf(...)"
  - pattern: "vswscanf(...)"
  severity: "ERROR"
- id: "flawfinder.g_get_home_dir-1"
  languages:
  - "c"
  message: |
    This function is synonymous with `getenv("HOME")` and should be treated
    as untrusted input as it could be modified by an attacker. Possible risks
    include:

    - The value being too large and causing buffer overflows
    - Files under the attacker's control being used maliciously
    - Files outside of an attacker's control becoming accessible, depending on
    access privileges.
  metadata:
    shortDescription: "Possible use of untrusted environment variable"
    cwe: "CWE-20"
    owasp: "A1:2017-Injection"
    primary_identifier: "flawfinder.g_get_home_dir"
    secondary_identifiers:
    - name: "Flawfinder - g_get_home_dir"
      type: "flawfinder_func_name"
      value: "g_get_home_dir"
  pattern: "g_get_home_dir(...)"
  severity: "WARNING"
- id: "flawfinder.g_get_tmp_dir-1"
  languages:
  - "c"
  message: |
    This function is synonymous with `getenv("TMP")` and should be treated
    as untrusted input as it could be modified by an attacker. Possible risks
    include:

    - The value being too large and causing buffer overflows
    - Files under the attacker's control being used maliciously
    - Files outside of an attacker's control becoming accessible, depending on
    access privileges.
  metadata:
    shortDescription: "Possible use of untrusted environment variable"
    cwe: "CWE-20"
    owasp: "A1:2017-Injection"
    primary_identifier: "flawfinder.g_get_tmp_dir"
    secondary_identifiers:
    - name: "Flawfinder - g_get_tmp_dir"
      type: "flawfinder_func_name"
      value: "g_get_tmp_dir"
  pattern: "g_get_tmp_dir(...)"
  severity: "WARNING"
- id: "flawfinder.getchar-1.fgetc-1.getc-1.read-1._gettc-1"
  languages:
  - "c"
  message: |
    CWE-20: Check buffer boundaries if used in a loop including recursive loops
  metadata:
    cwe: "CWE-20: Check buffer boundaries if used in a loop including recursive loops
      (CWE-120, CWE-20)"
    owasp: "A1:2017-Injection"
    primary_identifier: "flawfinder.getchar-1.fgetc-1.getc-1.read-1._gettc-1"
    secondary_identifiers:
    - name: "Flawfinder - getchar"
      type: "flawfinder_func_name"
      value: "getchar"
    - name: "Flawfinder - fgetc"
      type: "flawfinder_func_name"
      value: "fgetc"
    - name: "Flawfinder - getc"
      type: "flawfinder_func_name"
      value: "getc"
    - name: "Flawfinder - read"
      type: "flawfinder_func_name"
      value: "read"
    - name: "Flawfinder - _gettc"
      type: "flawfinder_func_name"
      value: "_gettc"
  pattern-either:
  - pattern: "getchar(...)"
  - pattern: "fgetc(...)"
  - pattern: "getc(...)"
  - pattern: "read(...)"
  - pattern: "_gettc(...)"
  severity: "INFO"
- id: "flawfinder.getenv-1.curl_getenv-1"
  languages:
  - "c"
  message: |
    This function's return value should be treated as untrusted input as it could be
    modified by an attacker. Possible risks include:

    - The value being too large and causing buffer overflows
    - Files under the attacker's control being used maliciously
    - Files outside of an attacker's control becoming accessible, depending on
    access privileges.
  metadata:
    shortDescription: "Possible use of untrusted environment variable"
    cwe: "CWE-20"
    owasp: "A1:2017-Injection"
    primary_identifier: "flawfinder.getenv-1.curl_getenv-1"
    secondary_identifiers:
    - name: "Flawfinder - getenv"
      type: "flawfinder_func_name"
      value: "getenv"
    - name: "Flawfinder - curl_getenv"
      type: "flawfinder_func_name"
      value: "curl_getenv"
  pattern-either:
  - pattern: "getenv(...)"
  - pattern: "curl_getenv(...)"
  severity: "WARNING"
- id: "flawfinder.getopt-1.getopt_long-1"
  languages:
  - "c"
  message: |
    Check implementation on installation, or limit the size of all string inputs.
  metadata:
    cwe: "CWE-120: Some older implementations do not protect against internal buffer
      overflows (CWE-120, CWE-20)"
    owasp: "A1:2017-Injection"
    primary_identifier: "flawfinder.getopt-1.getopt_long-1"
    secondary_identifiers:
    - name: "Flawfinder - getopt"
      type: "flawfinder_func_name"
      value: "getopt"
    - name: "Flawfinder - getopt_long"
      type: "flawfinder_func_name"
      value: "getopt_long"
  pattern-either:
  - pattern: "getopt(...)"
  - pattern: "getopt_long(...)"
  severity: "WARNING"
- id: "flawfinder.getpw-1"
  languages:
  - "c"
  message: |
    The getpw() function is dangerous as it may overflow the provided
    buffer when reading from the `/etc/passwd` file.  While the passwd file
    is not generally writeable, there are no protections offered by this function
    to protect from reading past the bounds of the destination buffer. This function
    is obsoleted by `getpwuid`.

    For more information please see: https://linux.die.net/man/3/getpwuid
  metadata:
    shortDescription: "Use of deprecated function (getpwd)"
    cwe: "CWE-120"
    owasp: "A1:2017-Injection"
    primary_identifier: "flawfinder.getpw"
    secondary_identifiers:
    - name: "Flawfinder - getpw"
      type: "flawfinder_func_name"
      value: "getpw"
  pattern: "getpw(...)"
  severity: "ERROR"
- id: "flawfinder.gets-1._getts-1"
  languages:
  - "c"
  message: |
    The gets() function reads a line from stdin into the provided buffer
    until either a terminating newline or EOF. This terminating newline or
    EOF is replaced with a null byte `'\0'`. No check for buffer overruns are
    performed so it is recommended to use `fgets()` instead. Do note
    that some platforms will continue reading data after a `'\0'` is encountered.

    Usage of `fgets()` is not recommended for reading binary based files or inputs,
    instead the `read` or `fread` functions should be used.

    For more information please see: https://linux.die.net/man/3/fgets
  metadata:
    shortDescription: "Use of deprecated function (gets)"
    cwe: "CWE-120"
    owasp: "A1:2017-Injection"
    primary_identifier: "flawfinder.gets-1._getts-1"
    secondary_identifiers:
    - name: "Flawfinder - gets"
      type: "flawfinder_func_name"
      value: "gets"
    - name: "Flawfinder - _getts"
      type: "flawfinder_func_name"
      value: "_getts"
  pattern-either:
  - pattern: "gets(...)"
  - pattern: "_getts(...)"
  severity: "ERROR"
- id: "flawfinder.getwd-1"
  languages:
  - "c"
  message: |
    `getwd` does not contain a parameter to limit how many characters can be copied into the
    destination buffer. For portability and security reasons `getwd` has been deprecated in
    favor of `getcwd`.

    For more information please see: https://linux.die.net/man/3/getcwd
  metadata:
    shortDescription: "Insufficient protection against buffer overflow (getwd)"
    cwe: "CWE-120"
    owasp: "A1:2017-Injection"
    primary_identifier: "flawfinder.getwd"
    secondary_identifiers:
    - name: "Flawfinder - getwd"
      type: "flawfinder_func_name"
      value: "getwd"
  pattern: "getwd(...)"
  severity: "WARNING"
- id: "flawfinder.lstrcat-1.wcscat-1._tcscat-1._mbscat-1"
  languages:
  - "c"
  message: |
    The `strcat` family of functions are unable to limit how many bytes are copied
    to the destination buffer. It is recommended to use more secure alternatives such as
    `snprintf`.

    If developing for C Runtime Library (CRT), more secure versions of these functions should be
    used, see:
    https://learn.microsoft.com/en-us/cpp/c-runtime-library/reference/strcat-s-wcscat-s-mbscat-s?view=msvc-170
  metadata:
    shortDescription: "Insecure functions unable to limit / check buffer sizes"
    cwe: "CWE-120"
    owasp: "A1:2017-Injection"
    primary_identifier: "flawfinder.lstrcat-1.wcscat-1._tcscat-1._mbscat-1"
    secondary_identifiers:
    - name: "Flawfinder - lstrcat"
      type: "flawfinder_func_name"
      value: "lstrcat"
    - name: "Flawfinder - wcscat"
      type: "flawfinder_func_name"
      value: "wcscat"
    - name: "Flawfinder - _tcscat"
      type: "flawfinder_func_name"
      value: "_tcscat"
    - name: "Flawfinder - _mbscat"
      type: "flawfinder_func_name"
      value: "_mbscat"
  pattern-either:
  - pattern: "lstrcat(...)"
  - pattern: "wcscat(...)"
  - pattern: "_tcscat(...)"
  - pattern: "_mbscat(...)"
  severity: "ERROR"
- id: "flawfinder.lstrcatn-1.wcsncat-1._tcsncat-1._mbsnbcat-1"
  languages:
  - "c"
  message: |
    Consider using more secure alternatives such as `snprintf`, instead of the
    `wcsncat` family of functions.

    If developing for C Runtime Library (CRT), more secure versions of these functions should be
    used, see:
    https://learn.microsoft.com/en-us/cpp/c-runtime-library/reference/strncat-strncat-l-wcsncat-wcsncat-l-mbsncat-mbsncat-l?view=msvc-170
  metadata:
    shortDescription: "Easily misused string processing functions"
    cwe: "CWE-120"
    owasp: "A1:2017-Injection"
    primary_identifier: "flawfinder.lstrcatn-1.wcsncat-1._tcsncat-1._mbsnbcat-1"
    secondary_identifiers:
    - name: "Flawfinder - lstrcatn"
      type: "flawfinder_func_name"
      value: "lstrcatn"
    - name: "Flawfinder - wcsncat"
      type: "flawfinder_func_name"
      value: "wcsncat"
    - name: "Flawfinder - _tcsncat"
      type: "flawfinder_func_name"
      value: "_tcsncat"
    - name: "Flawfinder - _mbsnbcat"
      type: "flawfinder_func_name"
      value: "_mbsnbcat"
  pattern-either:
  - pattern: "lstrcatn(...)"
  - pattern: "wcsncat(...)"
  - pattern: "_tcsncat(...)"
  - pattern: "_mbsnbcat(...)"
  severity: "INFO"
- id: "flawfinder.lstrcpy-1.wcscpy-1._tcscpy-1._mbscpy-1"
  languages:
  - "c"
  message: |
    The `lstrcpy` family of functions do not provide the ability to limit or check buffer
    sizes before copying to a destination buffer. This can lead to buffer overflows. Consider
    using more secure alternatives such as `strncpy_s`.

    If developing for C Runtime Library (CRT), more secure versions of these functions should be
    used, see:
    https://learn.microsoft.com/en-us/cpp/c-runtime-library/reference/strncpy-s-strncpy-s-l-wcsncpy-s-wcsncpy-s-l-mbsncpy-s-mbsncpy-s-l?view=msvc-170
  metadata:
    shortDescription: "Insecure functions unable to limit / check buffer sizes"
    cwe: "CWE-120"
    owasp: "A1:2017-Injection"
    primary_identifier: "flawfinder.lstrcpy-1.wcscpy-1._tcscpy-1._mbscpy-1"
    secondary_identifiers:
    - name: "Flawfinder - lstrcpy"
      type: "flawfinder_func_name"
      value: "lstrcpy"
    - name: "Flawfinder - wcscpy"
      type: "flawfinder_func_name"
      value: "wcscpy"
    - name: "Flawfinder - _tcscpy"
      type: "flawfinder_func_name"
      value: "_tcscpy"
    - name: "Flawfinder - _mbscpy"
      type: "flawfinder_func_name"
      value: "_mbscpy"
  pattern-either:
  - pattern: "lstrcpy(...)"
  - pattern: "wcscpy(...)"
  - pattern: "_tcscpy(...)"
  - pattern: "_mbscpy(...)"
  severity: "ERROR"
- id: "flawfinder.lstrcpyn-1.wcsncpy-1._tcsncpy-1._mbsnbcpy-1"
  languages:
  - "c"
  message: |
    The `lstrcpyn` family of functions do not always check for invalid pointers or check if there
    is sufficient space prior to copying. The count argument limits the number of characters copied
    but does validate if the count will fit within the size of the destination buffer, leading to
    potential overflows.

    If developing for C Runtime Library (CRT), more secure versions of these functions should be
    used, see:
    https://learn.microsoft.com/en-us/cpp/c-runtime-library/reference/strncpy-s-strncpy-s-l-wcsncpy-s-wcsncpy-s-l-mbsncpy-s-mbsncpy-s-l?view=msvc-170
  metadata:
    shortDescription: "Insecure functions do not always null terminate or check invalid
      pointers"
    cwe: "CWE-120"
    owasp: "A1:2017-Injection"
    primary_identifier: "flawfinder.lstrcpyn-1.wcsncpy-1._tcsncpy-1._mbsnbcpy-1"
    secondary_identifiers:
    - name: "Flawfinder - lstrcpyn"
      type: "flawfinder_func_name"
      value: "lstrcpyn"
    - name: "Flawfinder - wcsncpy"
      type: "flawfinder_func_name"
      value: "wcsncpy"
    - name: "Flawfinder - _tcsncpy"
      type: "flawfinder_func_name"
      value: "_tcsncpy"
    - name: "Flawfinder - _mbsnbcpy"
      type: "flawfinder_func_name"
      value: "_mbsnbcpy"
  pattern-either:
  - pattern: "lstrcpyn(...)"
  - pattern: "wcsncpy(...)"
  - pattern: "_tcsncpy(...)"
  - pattern: "_mbsnbcpy(...)"
  severity: "INFO"
- id: "flawfinder.memcpy-1.CopyMemory-1.bcopy-1"
  languages:
  - "c"
  message: |
    The `memcpy` family of functions require the developer to validate that the destination buffer
    is the same size or larger than the source buffer. Buffer overflows could be introduced if care
    is not taken to validate buffer sizes.

    If developing for C Runtime Library (CRT), more secure versions of these functions should be
    used, see:
    https://learn.microsoft.com/en-us/cpp/c-runtime-library/reference/memcpy-s-wmemcpy-s?view=msvc-170
  metadata:
    shortDescription: "Function does not check for buffer overflows when copying"
    cwe: "CWE-120"
    owasp: "A1:2017-Injection"
    primary_identifier: "flawfinder.memcpy-1.CopyMemory-1.bcopy-1"
    secondary_identifiers:
    - name: "Flawfinder - memcpy"
      type: "flawfinder_func_name"
      value: "memcpy"
    - name: "Flawfinder - CopyMemory"
      type: "flawfinder_func_name"
      value: "CopyMemory"
    - name: "Flawfinder - bcopy"
      type: "flawfinder_func_name"
      value: "bcopy"
  pattern-either:
  - pattern: "memcpy(...)"
  - pattern: "CopyMemory(...)"
  - pattern: "bcopy(...)"
  severity: "INFO"
- id: "flawfinder.realpath-1"
  languages:
  - "c"
  message: |
    The `realpath` function should not be called with a destination buffer as it could
    lead to overflowing if the path is greater than PATH_LEN. It is instead recommended
    to call `realpath` with the destination buffer set to NULL and use the return value
    as the resolved path. Be sure to free the returned pointer as realpath will allocate
    the buffer internally using `malloc`.

    For more information see: https://linux.die.net/man/3/realpath

    Example:

    ```
    char const *symlink_path = "/tmp/symlink";
    char *resolved_path = NULL;

    resolved_path = realpath(symlink_path, NULL);
    if (errno == 0) {
      // ... use resolved_path...
      free(resolved_path);
    }
    ```
  metadata:
    shortDescription: "Function does not ensure destination buffer length is sufficient
      before copying"
    cwe: "CWE-120"
    owasp: "A1:2017-Injection"
    primary_identifier: "flawfinder.realpath"
    secondary_identifiers:
    - name: "Flawfinder - realpath"
      type: "flawfinder_func_name"
      value: "realpath"
  pattern: "realpath(...)"
  severity: "WARNING"
- id: "flawfinder.scanf-1.vscanf-1.wscanf-1._tscanf-1.vwscanf-1"
  languages:
  - "c"
  message: |
    Format specifiers can take optional field widths, which should be
    used to limit how many characters are copied into the target buffer.

    For more information please see: https://linux.die.net/man/3/scanf

    Example:
    ```
      char buf[11] = {0};
      scanf("%10s", &buf); // buf = AAAAAAAAAA\0
    ```

    If developing for C Runtime Library (CRT), more secure versions of these functions should be
    used, see:
    https://learn.microsoft.com/en-us/cpp/c-runtime-library/reference/scanf-s-scanf-s-l-wscanf-s-wscanf-s-l?view=msvc-170
  metadata:
    shortDescription: "scanf() functions may allow format string based overflows"
    cwe: "CWE-120"
    owasp: "A1:2017-Injection"
    primary_identifier: "flawfinder.scanf-1.vscanf-1.wscanf-1._tscanf-1.vwscanf-1"
    secondary_identifiers:
    - name: "Flawfinder - scanf"
      type: "flawfinder_func_name"
      value: "scanf"
    - name: "Flawfinder - vscanf"
      type: "flawfinder_func_name"
      value: "vscanf"
    - name: "Flawfinder - wscanf"
      type: "flawfinder_func_name"
      value: "wscanf"
    - name: "Flawfinder - _tscanf"
      type: "flawfinder_func_name"
      value: "_tscanf"
    - name: "Flawfinder - vwscanf"
      type: "flawfinder_func_name"
      value: "vwscanf"
  pattern-either:
  - patterns:
    - pattern: "scanf($FMT, ...)"
    - pattern-not: "scanf(\"...\", ...)"
  - patterns:
    - pattern: "vscanf($FMT, ...)"
    - pattern-not: "vscanf(\"...\", ...)"
  - patterns:
    - pattern: "wscanf($FMT, ...)"
    - pattern-not: "wscanf(\"...\", ...)"
  - patterns:
    - pattern: "_tscanf($FMT, ...)"
    - pattern-not: "_tscanf(\"...\", ...)"
  - patterns:
    - pattern: "vwscanf(FMT, ...)"
    - pattern-not: "vwscanf(\"...\", ...)"
  severity: "ERROR"
- id: "flawfinder.sprintf-1.vsprintf-1.swprintf-1.vswprintf-1._stprintf-1._vstprintf-1"
  languages:
  - "c"
  message: |
    Use sprintf_s, snprintf, or vsnprintf instead. The `sprintf` family of functions do not allow
    callers to set limits on how many bytes the destination buffer can hold. Consider using more
    secure alternatives such as `snprintf`.

    For more information please see: https://linux.die.net/man/3/snprintf

    If developing for C Runtime Library (CRT), more secure versions of these functions should be
    used, see:
    https://learn.microsoft.com/en-us/cpp/c-runtime-library/reference/sprintf-s-sprintf-s-l-swprintf-s-swprintf-s-l?view=msvc-170
  metadata:
    shortDescription: "Insecure function unable to limit / check buffer sizes"
    cwe: "CWE-120"
    owasp: "A1:2017-Injection"
    primary_identifier: "flawfinder.sprintf-1.vsprintf-1.swprintf-1.vswprintf-1._stprintf-1._vstprintf-1"
    secondary_identifiers:
    - name: "Flawfinder - sprintf"
      type: "flawfinder_func_name"
      value: "sprintf"
    - name: "Flawfinder - vsprintf"
      type: "flawfinder_func_name"
      value: "vsprintf"
    - name: "Flawfinder - swprintf"
      type: "flawfinder_func_name"
      value: "swprintf"
    - name: "Flawfinder - vswprintf"
      type: "flawfinder_func_name"
      value: "vswprintf"
    - name: "Flawfinder - _stprintf"
      type: "flawfinder_func_name"
      value: "_stprintf"
    - name: "Flawfinder - _vstprintf"
      type: "flawfinder_func_name"
      value: "_vstprintf"
  pattern-either:
  - pattern: "sprintf(...)"
  - pattern: "vsprintf(...)"
  - pattern: "swprintf(...)"
  - pattern: "vswprintf(...)"
  - pattern: "_stprintf(...)"
  - pattern: "_vstprintf(...)"
  severity: "ERROR"
- id: "flawfinder.strcat-1"
  languages:
  - "c"
  message: |
    The `strcat` family of functions are unable to limit how many bytes are copied
    to the destination buffer. It is recommended to use more secure alternatives such as
    `snprintf`.

    For more information please see: https://linux.die.net/man/3/snprintf

    If developing for C Runtime Library (CRT), more secure versions of these functions should be
    used, see:
    https://learn.microsoft.com/en-us/cpp/c-runtime-library/reference/strcat-s-wcscat-s-mbscat-s?view=msvc-170
  metadata:
    shortDescription: "Insecure string processing function"
    cwe: "CWE-120"
    owasp: "A1:2017-Injection"
    primary_identifier: "flawfinder.strcat"
    secondary_identifiers:
    - name: "Flawfinder - strcat"
      type: "flawfinder_func_name"
      value: "strcat"
  pattern: "strcat(...)"
  severity: "ERROR"
- id: "flawfinder.strccpy-1.strcadd-1"
  languages:
  - "c"
  message: |
    The `strccpy` and `strcadd` functions do not allow the caller to check that the destination
    size
    of the buffer will fit the input buffer prior to copying.

    For more information please see:
    https://docs.oracle.com/cd/E18752_01/html/816-5172/streadd-3gen.html
  metadata:
    shortDescription: "Insecure string processing functions"
    cwe: "CWE-120"
    owasp: "A1:2017-Injection"
    primary_identifier: "flawfinder.strccpy-1.strcadd-1"
    secondary_identifiers:
    - name: "Flawfinder - strccpy"
      type: "flawfinder_func_name"
      value: "strccpy"
    - name: "Flawfinder - strcadd"
      type: "flawfinder_func_name"
      value: "strcadd"
  pattern-either:
  - pattern: "strccpy(...)"
  - pattern: "strcadd(...)"
  severity: "INFO"
- id: "flawfinder.strcpy-1"
  languages:
  - "c"
  message: |
    The `strcpy` family of functions do not provide the ability to limit or check buffer
    sizes before copying to a destination buffer. This can lead to buffer overflows. Consider
    using more secure alternatives such as `strncpy` and provide the correct limit to the
    destination buffer and ensure the string is null terminated.

    For more information please see: https://linux.die.net/man/3/strncpy

    If developing for C Runtime Library (CRT), more secure versions of these functions should be
    used, see:
    https://learn.microsoft.com/en-us/cpp/c-runtime-library/reference/strncpy-s-strncpy-s-l-wcsncpy-s-wcsncpy-s-l-mbsncpy-s-mbsncpy-s-l?view=msvc-170
  metadata:
    shortDescription: "Insecure string processing function (strcpy)"
    cwe: "CWE-120"
    owasp: "A1:2017-Injection"
    primary_identifier: "flawfinder.strcpy"
    secondary_identifiers:
    - name: "Flawfinder - strcpy"
      type: "flawfinder_func_name"
      value: "strcpy"
  pattern: "strcpy(...)"
  severity: "ERROR"
- id: "flawfinder.strcpyA-1.strcpyW-1.StrCpy-1.StrCpyA-1.lstrcpyA-1.lstrcpyW-1._tccpy-1._mbccpy-1._ftcscpy-1._mbsncpy-1.StrCpyN-1.StrCpyNA-1.StrCpyNW-1.StrNCpy-1.strcpynA-1.StrNCpyA-1.StrNCpyW-1.lstrcpynA-1.lstrcpynW-1"
  languages:
  - "c"
  message: |
    The `StrCpy` family of functions do not guarantee the final string to be null terminated.
    Consider
    using one of the following alternatives `StringCbCopy`, `StringCbCopyEx`, `StringCbCopyN`,
    `StringCbCopyNEx`, `StringCchCopy`, `StringCchCopyEx`, `StringCchCopyN`, or `StringCchCopyNEx`.

    If developing for C Runtime Library (CRT), more secure versions of these functions should be
    used, see:
    https://learn.microsoft.com/en-us/cpp/c-runtime-library/reference/strncpy-s-strncpy-s-l-wcsncpy-s-wcsncpy-s-l-mbsncpy-s-mbsncpy-s-l?view=msvc-170
  metadata:
    shortDescription: "Insecure string processing function"
    cwe: "CWE-120"
    owasp: "A1:2017-Injection"
    primary_identifier: "flawfinder.strcpyA-1.strcpyW-1.StrCpy-1.StrCpyA-1.lstrcpyA-1.lstrcpyW-1._tccpy-1._mbccpy-1._ftcscpy-1._mbsncpy-1.StrCpyN-1.StrCpyNA-1.StrCpyNW-1.StrNCpy-1.strcpynA-1.StrNCpyA-1.StrNCpyW-1.lstrcpynA-1.lstrcpynW-1"
    secondary_identifiers:
    - name: "Flawfinder - strcpyA"
      type: "flawfinder_func_name"
      value: "strcpyA"
    - name: "Flawfinder - strcpyW"
      type: "flawfinder_func_name"
      value: "strcpyW"
    - name: "Flawfinder - StrCpy"
      type: "flawfinder_func_name"
      value: "StrCpy"
    - name: "Flawfinder - StrCpyA"
      type: "flawfinder_func_name"
      value: "StrCpyA"
    - name: "Flawfinder - lstrcpyA"
      type: "flawfinder_func_name"
      value: "lstrcpyA"
    - name: "Flawfinder - lstrcpyW"
      type: "flawfinder_func_name"
      value: "lstrcpyW"
    - name: "Flawfinder - _tccpy"
      type: "flawfinder_func_name"
      value: "_tccpy"
    - name: "Flawfinder - _mbccpy"
      type: "flawfinder_func_name"
      value: "_mbccpy"
    - name: "Flawfinder - _ftcscpy"
      type: "flawfinder_func_name"
      value: "_ftcscpy"
    - name: "Flawfinder - _mbsncpy"
      type: "flawfinder_func_name"
      value: "_mbsncpy"
    - name: "Flawfinder - StrCpyN"
      type: "flawfinder_func_name"
      value: "StrCpyN"
    - name: "Flawfinder - StrCpyNA"
      type: "flawfinder_func_name"
      value: "StrCpyNA"
    - name: "Flawfinder - StrCpyNW"
      type: "flawfinder_func_name"
      value: "StrCpyNW"
    - name: "Flawfinder - StrNCpy"
      type: "flawfinder_func_name"
      value: "StrNCpy"
    - name: "Flawfinder - strcpynA"
      type: "flawfinder_func_name"
      value: "strcpynA"
    - name: "Flawfinder - StrNCpyA"
      type: "flawfinder_func_name"
      value: "StrNCpyA"
    - name: "Flawfinder - StrNCpyW"
      type: "flawfinder_func_name"
      value: "StrNCpyW"
    - name: "Flawfinder - lstrcpynA"
      type: "flawfinder_func_name"
      value: "lstrcpynA"
    - name: "Flawfinder - lstrcpynW"
      type: "flawfinder_func_name"
      value: "lstrcpynW"
  pattern-either:
  - pattern: "strcpyA(...)"
  - pattern: "strcpyW(...)"
  - pattern: "StrCpy(...)"
  - pattern: "StrCpyA(...)"
  - pattern: "lstrcpyA(...)"
  - pattern: "lstrcpyW(...)"
  - pattern: "_tccpy(...)"
  - pattern: "_mbccpy(...)"
  - pattern: "_ftcscpy(...)"
  - pattern: "_mbsncpy(...)"
  - pattern: "StrCpyN(...)"
  - pattern: "StrCpyNA(...)"
  - pattern: "StrCpyNW(...)"
  - pattern: "StrNCpy(...)"
  - pattern: "strcpynA(...)"
  - pattern: "StrNCpyA(...)"
  - pattern: "StrNCpyW(...)"
  - pattern: "lstrcpynA(...)"
  - pattern: "lstrcpynW(...)"
  severity: "ERROR"
- id: "flawfinder.streadd-1.strecpy-1"
  languages:
  - "c"
  message: |
    The `strecpy` and `streadd` functions require that the destination buffer size be at least
    four
    times the size of the source due to each character potentially becoming a `\` and 3 digits.

    For more information please see:
    https://docs.oracle.com/cd/E18752_01/html/816-5172/streadd-3gen.html
  metadata:
    shortDescription: "Insecure string processing functions"
    cwe: "CWE-120"
    owasp: "A1:2017-Injection"
    primary_identifier: "flawfinder.streadd-1.strecpy-1"
    secondary_identifiers:
    - name: "Flawfinder - streadd"
      type: "flawfinder_func_name"
      value: "streadd"
    - name: "Flawfinder - strecpy"
      type: "flawfinder_func_name"
      value: "strecpy"
  pattern-either:
  - pattern: "streadd(...)"
  - pattern: "strecpy(...)"
  severity: "ERROR"
- id: "flawfinder.strlen-1.wcslen-1._tcslen-1._mbslen-1"
  languages:
  - "c"
  message: |
    The `strlen` family of functions does not handle strings that are not null
    terminated. This can lead to buffer over reads and cause the application to
    crash by accessing unintended memory locations. It is recommended that `strnlen`
    be used instead as a `maxlen` value can be provided.

    For more information please see: https://linux.die.net/man/3/strnlen

    If developing for C Runtime Library (CRT), more secure versions of these functions should be
    used, see:
    https://learn.microsoft.com/en-us/cpp/c-runtime-library/reference/strnlen-strnlen-s?view=msvc-170
  metadata:
    shortDescription: "Function does not handle null terminated strings properly"
    cwe: "CWE-126"
    owasp: "A1:2017-Injection"
    primary_identifier: "flawfinder.strlen-1.wcslen-1._tcslen-1._mbslen-1"
    secondary_identifiers:
    - name: "Flawfinder - strlen"
      type: "flawfinder_func_name"
      value: "strlen"
    - name: "Flawfinder - wcslen"
      type: "flawfinder_func_name"
      value: "wcslen"
    - name: "Flawfinder - _tcslen"
      type: "flawfinder_func_name"
      value: "_tcslen"
    - name: "Flawfinder - _mbslen"
      type: "flawfinder_func_name"
      value: "_mbslen"
  pattern-either:
  - pattern: "strlen(...)"
  - pattern: "wcslen(...)"
  - pattern: "_tcslen(...)"
  - pattern: "_mbslen(...)"
  severity: "INFO"
- id: "flawfinder.strncat-1"
  languages:
  - "c"
  message: |
    The `strncat` family of functions are easy to use incorrectly when calculating destination
    buffer
    sizes. It is recommended to use more secure alternatives such as `snprintf`.

    For more information please see: https://linux.die.net/man/3/snprintf

    If developing for C Runtime Library (CRT), more secure versions of these functions should be
    used, see:
    https://learn.microsoft.com/en-us/cpp/c-runtime-library/reference/strncat-s-strncat-s-l-wcsncat-s-wcsncat-s-l-mbsncat-s-mbsncat-s-l?view=msvc-170
  metadata:
    shortDescription: "Function does not handle null terminated strings or invalid
      pointers properly"
    cwe: "CWE-120"
    owasp: "A1:2017-Injection"
    primary_identifier: "flawfinder.strncat"
    secondary_identifiers:
    - name: "Flawfinder - strncat"
      type: "flawfinder_func_name"
      value: "strncat"
  pattern: "strncat(...)"
  severity: "INFO"
- id: "flawfinder.strncpy-1"
  languages:
  - "c"
  message: |
    The `strncpy` family of functions do not properly handle strings that are not null terminated.
    It is recommended to use more secure alternatives such as `snprintf`.

    For more information please see: https://linux.die.net/man/3/snprintf

    If developing for C Runtime Library (CRT), more secure versions of these functions should be
    used, see:
    https://learn.microsoft.com/en-us/cpp/c-runtime-library/reference/strncpy-s-strncpy-s-l-wcsncpy-s-wcsncpy-s-l-mbsncpy-s-mbsncpy-s-l?view=msvc-170
  metadata:
    shortDescription: "Function does not handle null terminated strings or invalid
      pointers properly"
    cwe: "CWE-120"
    owasp: "A6:2017-Security Misconfiguration"
    primary_identifier: "flawfinder.strncpy"
    secondary_identifiers:
    - name: "Flawfinder - strncpy"
      type: "flawfinder_func_name"
      value: "strncpy"
  pattern: "strncpy(...)"
  severity: "INFO"
- id: "flawfinder.strtrns-1"
  languages:
  - "c"
  message: |
    This function is easy to misuse by not accounting for the space necessary when transforming
    strings. Ensure that the destination buffer is large enough to fit the transformed output.

    For more information please see:
    https://docs.oracle.com/cd/E36784_01/html/E36877/strtrns-3gen.html
  metadata:
    shortDescription: "Insecure string processing function"
    cwe: "CWE-120"
    owasp: "A1:2017-Injection"
    primary_identifier: "flawfinder.strtrns"
    secondary_identifiers:
    - name: "Flawfinder - strtrns"
      type: "flawfinder_func_name"
      value: "strtrns"
  pattern: "strtrns(...)"
  severity: "WARNING"
- id: "flawfinder.EVP_des_ecb-1.EVP_des_cbc-1.EVP_des_cfb-1.EVP_des_ofb-1.EVP_desx_cbc-1"
  languages:
  - "c"
  message: |
    The DES algorithm has not been recommended for over 15 years and was withdrawn from NIST (FIPS
    46-3) in 2005.

    Consider using libsodium's `crypto_secretbox_easy` authenticated encryption functions instead.

    For more information please see:
     https://libsodium.gitbook.io/doc/secret-key_cryptography/secretbox.

    If you must be FIPS compliant, consider using OpenSSLs AES or 3DES ciphers.
  metadata:
    shortDescription: "Insecure encryption algorithm (DES)"
    cwe: "CWE-327"
    owasp: "A3:2017-Sensitive Data Exposure"
    primary_identifier: "flawfinder.EVP_des_ecb-1.EVP_des_cbc-1.EVP_des_cfb-1.EVP_des_ofb-1.EVP_desx_cbc-1"
    secondary_identifiers:
    - name: "Flawfinder - EVP_des_ecb"
      type: "flawfinder_func_name"
      value: "EVP_des_ecb"
    - name: "Flawfinder - EVP_des_cbc"
      type: "flawfinder_func_name"
      value: "EVP_des_cbc"
    - name: "Flawfinder - EVP_des_cfb"
      type: "flawfinder_func_name"
      value: "EVP_des_cfb"
    - name: "Flawfinder - EVP_des_ofb"
      type: "flawfinder_func_name"
      value: "EVP_des_ofb"
    - name: "Flawfinder - EVP_desx_cbc"
      type: "flawfinder_func_name"
      value: "EVP_desx_cbc"
  pattern-either:
  - pattern: "EVP_des_ecb(...)"
  - pattern: "EVP_des_cbc(...)"
  - pattern: "EVP_des_cfb(...)"
  - pattern: "EVP_des_ofb(...)"
  - pattern: "EVP_desx_cbc(...)"
  severity: "ERROR"
- id: "flawfinder.EVP_rc4_40-1.EVP_rc2_40_cbc-1.EVP_rc2_64_cbc-1"
  languages:
  - "c"
  message: |
    The RC4 algorithm is vulnerable to many attacks and should no longer be used for encrypting
    data streams.

    Consider using libsodium's `crypto_secretstream_xchacha20poly1305` stream cipher encryption
    functions instead. For more information please see:
    https://libsodium.gitbook.io/doc/secret-key_cryptography/secretstream

    If you must be FIPS compliant, consider using OpenSSLs AES or 3DES ciphers.
  metadata:
    shortDescription: "Insecure stream cipher (RC4)"
    cwe: "CWE-327"
    owasp: "A3:2017-Sensitive Data Exposure"
    primary_identifier: "flawfinder.EVP_rc4_40-1.EVP_rc2_40_cbc-1.EVP_rc2_64_cbc-1"
    secondary_identifiers:
    - name: "Flawfinder - EVP_rc4_40"
      type: "flawfinder_func_name"
      value: "EVP_rc4_40"
    - name: "Flawfinder - EVP_rc2_40_cbc"
      type: "flawfinder_func_name"
      value: "EVP_rc2_40_cbc"
    - name: "Flawfinder - EVP_rc2_64_cbc"
      type: "flawfinder_func_name"
      value: "EVP_rc2_64_cbc"
  pattern-either:
  - pattern: "EVP_rc4_40(...)"
  - pattern: "EVP_rc2_40_cbc(...)"
  - pattern: "EVP_rc2_64_cbc(...)"
  severity: "ERROR"
- id: "flawfinder.crypt-1.crypt_r-1"
  languages:
  - "c"
  message: |
    The crypt functions are not recommended due to the significantly small
    key space. Modern hardware can crack crypt produced passwords relatively quickly.

    Consider using the Argon2id password hashing algorithm provided by libsodium.
    For more information please see: https://libsodium.gitbook.io/doc/password_hashing.
  metadata:
    shortDescription: "Insecure hashing algorithm"
    cwe: "CWE-327"
    owasp: "A3:2017-Sensitive Data Exposure"
    primary_identifier: "flawfinder.crypt-1.crypt_r-1"
    secondary_identifiers:
    - name: "Flawfinder - crypt"
      type: "flawfinder_func_name"
      value: "crypt"
    - name: "Flawfinder - crypt_r"
      type: "flawfinder_func_name"
      value: "crypt_r"
  pattern-either:
  - pattern: "crypt(...)"
  - pattern: "crypt_r(...)"
  severity: "ERROR"
- id: "flawfinder.fprintf-1.vfprintf-1._ftprintf-1._vftprintf-1.fwprintf-1.fvwprintf-1"
  languages:
  - "c"
  message: |
    Format string vulnerabilities allow an attacker to read or in some cases,
    potentially write data to
    and from locations in the processes' memory. To prevent against format
    string attacks, do not allow
    users or un-validated input to provide the format specification.
    Consider using a constant for the format specification, or only allow specific
    characters to be provided to the format argument for the `fprintf` family of functions.

    For more information please see: https://linux.die.net/man/3/fprintf

    For more information on format string attacks please see OWASP's attack
    guide: https://owasp.org/www-community/attacks/Format_string_attack
  metadata:
    shortDescription: "Potential format string vulnerability"
    cwe: "CWE-134"
    owasp: "A1:2017-Injection"
    primary_identifier: "flawfinder.fprintf-1.vfprintf-1._ftprintf-1._vftprintf-1.fwprintf-1.fvwprintf-1"
    secondary_identifiers:
    - name: "Flawfinder - fprintf"
      type: "flawfinder_func_name"
      value: "fprintf"
    - name: "Flawfinder - vfprintf"
      type: "flawfinder_func_name"
      value: "vfprintf"
    - name: "Flawfinder - _ftprintf"
      type: "flawfinder_func_name"
      value: "_ftprintf"
    - name: "Flawfinder - _vftprintf"
      type: "flawfinder_func_name"
      value: "_vftprintf"
    - name: "Flawfinder - fwprintf"
      type: "flawfinder_func_name"
      value: "fwprintf"
    - name: "Flawfinder - fvwprintf"
      type: "flawfinder_func_name"
      value: "fvwprintf"
  pattern-either:
  - patterns:
    - pattern: "fprintf($FD, $FMT, ...)"
    - pattern-not: "fprintf($FD, \"...\", ...)"
  - patterns:
    - pattern: "vfprintf($FMT, $ARGS, ...)"
    - pattern-not: "vfprintf(\"...\", $ARGS, ...)"
  - patterns:
    - pattern: "_ftprintf($FD, $FMT, ...)"
    - pattern-not: "_ftprintf($FD, \"...\", ...)"
  - patterns:
    - pattern: "fwprintf($FD, $FMT, ...)"
    - pattern-not: "fwprintf($FD, \"...\", ...)"
  - patterns:
    - pattern: "fvwprintf($FD, $FMT, ...)"
    - pattern-not: "fvwprintf($FD, \"...\", ...)"
  severity: "ERROR"
- id: "flawfinder.printf-1.vprintf-1.vwprintf-1.vfwprintf-1._vtprintf-1.wprintf-1"
  languages:
  - "c"
  message: |
    Format string vulnerabilities allow an attacker to read or in some cases, potentially write
    data to
    and from locations in the processes' memory. To prevent against format string attacks, do not
    allow
    users or un-validated input to provide the format specification.
    Consider using a constant for the format specification, or only allow specific
    characters to be provided to the format argument for the `printf` family of functions.

    For more information please see: https://linux.die.net/man/3/fprintf

    For more information on format string attacks please see OWASP's attack guide:
    https://owasp.org/www-community/attacks/Format_string_attack
  metadata:
    shortDescription: "Potential format string vulnerability"
    cwe: "CWE-134"
    owasp: "A1:2017-Injection"
    primary_identifier: "flawfinder.printf-1.vprintf-1.vwprintf-1.vfwprintf-1._vtprintf-1.wprintf-1"
    secondary_identifiers:
    - name: "Flawfinder - printf"
      type: "flawfinder_func_name"
      value: "printf"
    - name: "Flawfinder - vprintf"
      type: "flawfinder_func_name"
      value: "vprintf"
    - name: "Flawfinder - vwprintf"
      type: "flawfinder_func_name"
      value: "vwprintf"
    - name: "Flawfinder - vfwprintf"
      type: "flawfinder_func_name"
      value: "vfwprintf"
    - name: "Flawfinder - _vtprintf"
      type: "flawfinder_func_name"
      value: "_vtprintf"
    - name: "Flawfinder - wprintf"
      type: "flawfinder_func_name"
      value: "wprintf"
  pattern-either:
  - patterns:
    - pattern: "printf(...)"
    - pattern-not: "printf(\"...\",...)"
  - patterns:
    - pattern: "vprintf($FMT, ...)"
    - pattern-not: "vprintf(\"...\", ...)"
  - patterns:
    - pattern: "vwprintf($FMT, ...)"
    - pattern-not: "vwprintf(\"...\", ...)"
  - patterns:
    - pattern: "vfwprintf($FILE, $FMT, ...)"
    - pattern-not: "vfwprintf($FILE, \"...\", ...)"
  - patterns:
    - pattern: "_vtprintf($FILE, $FMT, ...)"
    - pattern-not: "_vtprintf($FILE, \"...\", ...)"
  - patterns:
    - pattern: "wprintf($FMT, ...)"
    - pattern-not: "wprintf(\"...\", ...)"
  severity: "ERROR"
- id: "flawfinder.snprintf-1.vsnprintf-1._snprintf-1._sntprintf-1._vsntprintf-1"
  languages:
  - "c"
  message: |
    Format string vulnerabilities allow an attacker to read or in some cases, potentially write
    data to
    and from locations in the processes' memory. To prevent against format string attacks, do not
    allow
    users or un-validated input to provide the format specification.
    Consider using a constant for the format specification, or strip all format
    specifiers from the input prior to calling the `snprintf` family of functions.

    Note that some variations of this function do not always null terminate the strings.

    For more information on using snprintf please see: https://linux.die.net/man/3/snprintf

    For more information on format string attacks please see OWASP's attack guide:
    https://owasp.org/www-community/attacks/Format_string_attack
  metadata:
    shortDescription: "Potential format string vulnerability"
    cwe: "CWE-134"
    owasp: "A1:2017-Injection"
    primary_identifier: "flawfinder.snprintf-1.vsnprintf-1._snprintf-1._sntprintf-1._vsntprintf-1"
    secondary_identifiers:
    - name: "Flawfinder - snprintf"
      type: "flawfinder_func_name"
      value: "snprintf"
    - name: "Flawfinder - vsnprintf"
      type: "flawfinder_func_name"
      value: "vsnprintf"
    - name: "Flawfinder - _snprintf"
      type: "flawfinder_func_name"
      value: "_snprintf"
    - name: "Flawfinder - _sntprintf"
      type: "flawfinder_func_name"
      value: "_sntprintf"
    - name: "Flawfinder - _vsntprintf"
      type: "flawfinder_func_name"
      value: "_vsntprintf"
  pattern-either:
  - patterns:
    - pattern: "snprintf($BUF,$SIZ,$FMT,...)"
    - pattern-not: "snprintf($BUF,$SIZ,\"...\",...)"
  - patterns:
    - pattern: "vsnprintf($BUF,$SIZ,$FMT)"
    - pattern-not: "vsnprintf($BUF,$SIZ,\"...\",...)"
  - patterns:
    - pattern: "_snprintf($BUF,$SIZ,$FMT,...)"
    - pattern-not: "_snprintf($BUF,$SIZ,$FMT,\"...\",...)"
  - patterns:
    - pattern: "_sntprintf($VAR,$FMT,...)"
    - pattern-not: "sntprintf($VAR,\"...\",...)"
  - patterns:
    - pattern: "_vsntprintf($VAR,$FMT,...)"
    - pattern-not: "_vsntprintf($VAR,\"...\",...)"
  severity: "ERROR"
- id: "flawfinder.syslog-1"
  languages:
  - "c"
  message: |
    Format string vulnerabilities allow an attacker to read or in some cases, potentially write
    data to
    and from locations in the processes' memory. To prevent against format string attacks, do not
    allow
    users or un-validated input to provide the format specification.
    Consider using a constant for the format specification, or strip all format
    specifiers from the input prior to calling the `syslog` function.

    For more information please see: https://capec.mitre.org/data/definitions/67.html
  metadata:
    shortDescription: "Potential format string vulnerability in syslog call"
    cwe: "CWE-134"
    owasp: "A1:2017-Injection"
    primary_identifier: "flawfinder.syslog"
    secondary_identifiers:
    - name: "Flawfinder - syslog"
      type: "flawfinder_func_name"
      value: "syslog"
  pattern-either:
  - patterns:
    - pattern: "syslog($FUNC,...)"
    - pattern-not: "syslog($FUNC,\"...\",...)"
  severity: "ERROR"
- id: "flawfinder.memalign-1"
  languages:
  - "c"
  message: |
    The `memalign` function may not check that the alignment argument is correct. Calling
    free (on non Linux-based systems) may fail and in certain circumstances this failure
    may be exploitable. This function has been deprecated in favor of `posix_memalign`.

    For more information please see: https://linux.die.net/man/3/memalign
  metadata:
    shortDescription: "Use of deprecated function (memalign)"
    cwe: "CWE-676"
    owasp: "A1:2017-Injection"
    primary_identifier: "flawfinder.memalign"
    secondary_identifiers:
    - name: "Flawfinder - memalign"
      type: "flawfinder_func_name"
      value: "memalign"
  pattern-either:
  - pattern: "memalign(...)"
  - pattern-regex: "(void)\\s\\*(\\s|)(memalign)\\;"
  severity: "INFO"
- id: "flawfinder.atoi-1.atol-1._wtoi-1._wtoi64-1"
  languages:
  - "c"
  message: |
    The `atoi` family of functions can potentially overflow or underflow integer values. Consider
    using `stroul` instead.

    For more information please see:
    https://wiki.sei.cmu.edu/confluence/display/c/ERR34-C.+Detect+errors+when+converting+a+string+to+a+number
  metadata:
    shortDescription: "Possible integer overflow or underflow"
    cwe: "CWE-190"
    owasp: "A1:2017-Injection"
    primary_identifier: "flawfinder.atoi-1.atol-1._wtoi-1._wtoi64-1"
    secondary_identifiers:
    - name: "Flawfinder - atoi"
      type: "flawfinder_func_name"
      value: "atoi"
    - name: "Flawfinder - atol"
      type: "flawfinder_func_name"
      value: "atol"
    - name: "Flawfinder - _wtoi"
      type: "flawfinder_func_name"
      value: "_wtoi"
    - name: "Flawfinder - _wtoi64"
      type: "flawfinder_func_name"
      value: "_wtoi64"
  pattern-either:
  - pattern: "atoi(...)"
  - pattern: "atol(...)"
  - pattern: "_wtoi(...)"
  - pattern: "_wtoi64(...)"
  severity: "INFO"
- id: "flawfinder.AddAccessAllowedAce-1"
  languages:
  - "c"
  message: |
    Make sure that you set inheritance by hand if you wish it to inherit.
  metadata:
    cwe: "CWE-732: This doesn't set the inheritance bits in the access control entry
      (ACE) header (CWE-732)"
    owasp: "A5:2017-Broken Access Control"
    primary_identifier: "flawfinder.AddAccessAllowedAce"
    secondary_identifiers:
    - name: "Flawfinder - AddAccessAllowedAce"
      type: "flawfinder_func_name"
      value: "AddAccessAllowedAce"
  pattern: "AddAccessAllowedAce(...)"
  severity: "WARNING"
- id: "flawfinder.InitializeCriticalSection-1"
  languages:
  - "c"
  message: |
    Use InitializeCriticalSectionAndSpinCount instead.
  metadata:
    cwe: "CWE-754: Exceptions can be thrown in low-memory situations"
    primary_identifier: "flawfinder.InitializeCriticalSection"
    secondary_identifiers:
    - name: "Flawfinder - InitializeCriticalSection"
      type: "flawfinder_func_name"
      value: "InitializeCriticalSection"
  pattern: "InitializeCriticalSection(...)"
  severity: "WARNING"
- id: "flawfinder.LoadLibrary-1"
  languages:
  - "c"
  message: |
    The `LoadLibrary` function is used to load DLLs dynamically. Depending on the filepath
    parameter,
    the OS version, and the modes set for the process prior to calling LoadLibrary, DLL hijacking
    may
    be possible. Attackers can exploit this by placing DLL files with the same name in directories
    that
    are searched before the legitimate DLL is.

    To assist in preventing against this class of vulnerability consider:
    - Specifying a fully qualified path when using LoadLibraryEx.
    - Use the `LOAD_LIBRARY_SEARCH` flags with LoadLibraryEx or with SetDefaultDllDirectories.
    - If you use SetDefaultDllDirectories, be sure to use the AddDllDirectory or SetDllDirectory
      functions to modify the list of directories.
    - Only use `SearchPath` if the `SetSearchPathMode` function is called with
      `BASE_SEARCH_PATH_ENABLE_SAFE_SEARCHMODE`. (Note: this only moves the current directory to
      the end of the SearchPath search list.)

    For more information see the security remarks section of the MSDN documentation:
    https://learn.microsoft.com/en-us/windows/win32/api/libloaderapi/nf-libloaderapi-loadlibrarya#security-remarks

    For general information securely loading dynamic link libraries, see the MSDN documentation:
    https://learn.microsoft.com/en-us/windows/win32/dlls/dynamic-link-library-security
  metadata:
    shortDescription: "Potential for DLL hijacking (LoadLibrary)"
    cwe: "CWE-20"
    owasp: "A1:2017-Injection"
    primary_identifier: "flawfinder.LoadLibrary"
    secondary_identifiers:
    - name: "Flawfinder - LoadLibrary"
      type: "flawfinder_func_name"
      value: "LoadLibrary"
  pattern: "LoadLibrary(...)"
  severity: "WARNING"
- id: "flawfinder.LoadLibraryEx-1"
  languages:
  - "c"
  message: |
    The `LoadLibraryEx` function is used to load DLLs dynamically. Depending on the filepath
    parameter,
    the OS version, and the modes set for the process prior to calling LoadLibrary, DLL hijacking
    may
    be possible. Attackers can exploit this by placing DLL files with the same name in directories
    that
    are searched before the legitimate DLL is.

    To assist in preventing against this class of vulnerability consider:
    - Specifying a fully qualified path when using LoadLibraryEx.
    - Use the `LOAD_LIBRARY_SEARCH` flags with LoadLibraryEx or with SetDefaultDllDirectories.
    - If you use SetDefaultDllDirectories, be sure to use the AddDllDirectory or SetDllDirectory
      functions to modify the list of directories.
    - Only use `SearchPath` if the `SetSearchPathMode` function is called with
      `BASE_SEARCH_PATH_ENABLE_SAFE_SEARCHMODE`. (Note: this only moves the current directory to
      the end of the SearchPath search list.)

    For more information see the security remarks section of the MSDN documentation:
    https://learn.microsoft.com/en-us/windows/win32/api/libloaderapi/nf-libloaderapi-loadlibrarya#security-remarks

    For general information securely loading dynamic link libraries, see the MSDN documentation:
    https://learn.microsoft.com/en-us/windows/win32/dlls/dynamic-link-library-security
  metadata:
    shortDescription: "Potential for DLL hijacking (LoadLibraryEx)"
    cwe: "CWE-20"
    owasp: "A1:2017-Injection"
    primary_identifier: "flawfinder.LoadLibraryEx"
    secondary_identifiers:
    - name: "Flawfinder - LoadLibraryEx"
      type: "flawfinder_func_name"
      value: "LoadLibraryEx"
  pattern: "LoadLibraryEx(...)"
  severity: "WARNING"
- id: "flawfinder.SetSecurityDescriptorDacl-1"
  languages:
  - "c"
  message: |
    When `SetSecurityDescriptorDacl` is called with a null `pDacl` parameter and the
    `bDaclPresent` flag is `TRUE`, all access to the object is allowed. An attacker
    could set the object to Deny all, which would include even the Administrator user(s).

    Either call `SetSecurityDescriptorDacl` with bDaclPresent as `FALSE`, or supply a valid
    non-null `pDacl` parameter value.

    For more information please see:
    https://learn.microsoft.com/en-us/windows/win32/api/securitybaseapi/nf-securitybaseapi-setsecuritydescriptordacl#remarks
  metadata:
    shortDescription: "Null ACL when calling SetSecurityDescriptorDacl may allow all
      access to objects"
    cwe: "CWE-732"
    owasp: "A5:2017-Broken Access Control"
    primary_identifier: "flawfinder.SetSecurityDescriptorDacl"
    secondary_identifiers:
    - name: "Flawfinder - SetSecurityDescriptorDacl"
      type: "flawfinder_func_name"
      value: "SetSecurityDescriptorDacl"
  pattern: "SetSecurityDescriptorDacl(...)"
  severity: "ERROR"
- id: "flawfinder.chroot-1"
  languages:
  - "c"
  message: |
    Make sure the program immediately chdir("/"), closes file descriptors, and drops root
    privileges, and that all necessary files (and no more!) are in the new root.
  metadata:
    cwe: "CWE-22: chroot can be very helpful, but is hard to use correctly (CWE-250,
      CWE-22)"
    owasp: "A5:2017-Broken Access Control"
    primary_identifier: "flawfinder.chroot"
    secondary_identifiers:
    - name: "Flawfinder - chroot"
      type: "flawfinder_func_name"
      value: "chroot"
  pattern: "chroot(...)"
  severity: "WARNING"
- id: "flawfinder.cuserid-1"
  languages:
  - "c"
  message: |
    `cuserid()` is poorly defined (e.g., some systems use the effective
    UID, like Linux, while others like System V use the real UID). Therefore, you can't trust
    what it does. The cuserid function was included in the 1988 version of POSIX, but removed
    from the 1990 version.  Also, if passed a non-null parameter, there's a risk of a buffer
    overflow if the passed-in buffer is not at least `L_cuserid` characters long.

    Use `getpwuid(geteuid())` and extract the desired information instead.

    For more information please see: https://linux.die.net/man/3/getpwuid
  metadata:
    shortDescription: "Usage of deprecated function (cuserid)"
    cwe: "CWE-120"
    primary_identifier: "flawfinder.cuserid"
    secondary_identifiers:
    - name: "Flawfinder - cuserid"
      type: "flawfinder_func_name"
      value: "cuserid"
  pattern: "cuserid(...)"
  severity: "ERROR"
- id: "flawfinder.fopen-1.open-1"
  languages:
  - "c"
  message: |
    Usage of the `open` family of functions may hint at a potential Time Of Check Time Of Use
    (TOCTOU)
    vulnerability. An attacker may be able to modify the file being specified by the `open`
    function prior to the `open` function being called.

    Prior to calling `open`, use `lstat` to open the file and confirm the attributes
    are correct. Then use `open` to get a file descriptor to this file. Call `fstat` on the
    `open` file descriptor to confirm that `st_dev` and `st_ino` are equal between the two.
    If they are, it is safe to read and operate on the file's contents.

    For more information please see:
    https://wiki.sei.cmu.edu/confluence/display/c/FIO45-C.+Avoid+TOCTOU+race+conditions+while+accessing+files
  metadata:
    shortDescription: "Potential time of check time of use vulnerability (open/fopen)"
    cwe: "CWE-362"
    owasp: "A5:2017-Broken Access Control"
    primary_identifier: "flawfinder.fopen-1.open-1"
    secondary_identifiers:
    - name: "Flawfinder - fopen"
      type: "flawfinder_func_name"
      value: "fopen"
    - name: "Flawfinder - open"
      type: "flawfinder_func_name"
      value: "open"
  pattern-either:
  - pattern: "fopen(...)"
  - pattern: "open(...)"
  severity: "INFO"
- id: "flawfinder.getlogin-1"
  languages:
  - "c"
  message: |
    The `getlogin` function suffers from many bugs or unknown behaviors depending on the
    system. Often, it gives only the first 8 characters of the login name. The user
    currently logged in on the controlling TTY of our program does not necessarily mean
    it is the user who started the process.

    Use getpwuid(geteuid()) and extract the desired information instead.

    For more information please see: https://linux.die.net/man/3/getpwuid
  metadata:
    shortDescription: "Usage of deprecated function (getlogin)"
    cwe: "CWE-807"
    primary_identifier: "flawfinder.getlogin"
    secondary_identifiers:
    - name: "Flawfinder - getlogin"
      type: "flawfinder_func_name"
      value: "getlogin"
  pattern: "getlogin(...)"
  severity: "ERROR"
- id: "flawfinder.getpass-1"
  languages:
  - "c"
  message: |
    This function is obsolete and not portable. It was in SUSv2 but removed by POSIX.2. What
    it does exactly varies considerably between systems, particularly in where its prompt is
    displayed and where it gets its data. Some systems will write to stderr instead of stdout.
    Some will read from stdin if it can not be read from /dev/tty. In some systems the
    buffer is static and limited to 127 characters, meaning the full password may not be returned
    properly.

    If you want to read input without terminal echoing enabled, see the description of the ECHO
    flag
    in the termios manual pager. If you ever read passwords from a terminal, be sure to zero the
    password as soon as possible, to avoid leaving the cleartext password visible in the
    process' address space.
  metadata:
    shortDescription: "Usage of deprecated function (getpass)"
    cwe: "CWE-20"
    primary_identifier: "flawfinder.getpass"
    secondary_identifiers:
    - name: "Flawfinder - getpass"
      type: "flawfinder_func_name"
      value: "getpass"
  pattern: "getpass(...)"
  severity: "ERROR"
- id: "flawfinder.gsignal-1.ssignal-1"
  languages:
  - "c"
  message: |
    The `gsignal` and `ssignal` functions are obsolete and no longer recommended. Consider
    using the `raise` or `sigaction` functions instead for process signalling.

    For more information please see: https://linux.die.net/man/3/sigaction
  metadata:
    shortDescription: "Deprecated function calls (ssignal/gsignal)"
    cwe: "CWE-676"
    primary_identifier: "flawfinder.gsignal-1.ssignal-1"
    secondary_identifiers:
    - name: "Flawfinder - gsignal"
      type: "flawfinder_func_name"
      value: "gsignal"
    - name: "Flawfinder - ssignal"
      type: "flawfinder_func_name"
      value: "ssignal"
  pattern-either:
  - pattern: "gsignal(...)"
  - pattern: "ssignal(...)"
  severity: "INFO"
- id: "flawfinder.ulimit-1"
  languages:
  - "c"
  message: |
    The ulimit function is obsolete and no longer recommended. Use `getrlimit(2)`,
    `setrlimit`, or `sysconf` instead.

    For more information please see: https://linux.die.net/man/3/setrlimit
  metadata:
    shortDescription: "Usage of deprecated function (ulimit)"
    cwe: "CWE-676"
    primary_identifier: "flawfinder.ulimit"
    secondary_identifiers:
    - name: "Flawfinder - ulimit"
      type: "flawfinder_func_name"
      value: "ulimit"
  pattern: "ulimit(...)"
  severity: "INFO"
- id: "flawfinder.usleep-1"
  languages:
  - "c"
  message: |
    The `usleep` function has been deprecated, use `nanosleep` or `setitimer` instead.

    For more information please see: https://linux.die.net/man/3/setitimer
  metadata:
    shortDescription: "Usage of deprecated function (usleep)"
    cwe: "CWE-676"
    primary_identifier: "flawfinder.usleep"
    secondary_identifiers:
    - name: "Flawfinder - usleep"
      type: "flawfinder_func_name"
      value: "usleep"
  pattern: "usleep(...)"
  severity: "INFO"
- id: "flawfinder.access-1"
  languages:
  - "c"
  message: |
    Usage of the `access` function call hints at a potential Time Of Check Time Of Use (TOCTOU)
    vulnerability. Using the `access` function to check if a file exists and is readable before
    opening it, an attacker can create a race condition between the `access` call and
    opening the file. The attacker could replace the file with a different one or modify its
    content between the time the `access` function is called and the file is opened, thus
    bypassing the permission check.

    Call `setuid` to drop privileges on the process prior to opening any files. Instead of using
    `access`, use `lstat` prior to opening the file and confirm the attributes are correct. Then
    use `open` to get a file descriptor to this file. Call `fstat` on the `open` file descriptor
    to confirm that `st_dev` and `st_ino` are equal between the two. If they are, it is safe to
    read and operate on the file's contents.

    For more information please see:
    https://wiki.sei.cmu.edu/confluence/display/c/FIO45-C.+Avoid+TOCTOU+race+conditions+while+accessing+files
  metadata:
    shortDescription: "Potential time of check time of use vulnerability (access)"
    cwe: "CWE-362"
    owasp: "A5:2017-Broken Access Control"
    primary_identifier: "flawfinder.access"
    secondary_identifiers:
    - name: "Flawfinder - access"
      type: "flawfinder_func_name"
      value: "access"
  pattern: "access(...)"
  severity: "ERROR"
- id: "flawfinder.chgrp-1"
  languages:
  - "c"
  message: |
    Use fchgrp( ) instead.
  metadata:
    cwe: "CWE-362: This accepts filename arguments; if an attacker can move those
      files, a race condition results. (CWE-362)"
    owasp: "A5:2017-Broken Access Control"
    primary_identifier: "flawfinder.chgrp"
    secondary_identifiers:
    - name: "Flawfinder - chgrp"
      type: "flawfinder_func_name"
      value: "chgrp"
  pattern: "chgrp(...)"
  severity: "ERROR"
- id: "flawfinder.chmod-1"
  languages:
  - "c"
  message: |
    Usage of the `chmod` function call hints at a potential Time Of Check Time Of Use (TOCTOU)
    vulnerability. An attacker may be able to modify the file being specified by the `chmod`
    function prior to the `chmod` function being called. Since `chmod` will resolve symbolic links,
    an attacker may be able to exploit this fact to have files outside of their control modified.

    It is recommended that the `fchmod` function be used instead since this function takes
    a file descriptor instead of a file. Ensure the opened file descriptor is pointing to
    the correct file or directory prior to executing `fchmod` or any other file based operations.

    For more information please see:
    https://wiki.sei.cmu.edu/confluence/display/c/FIO01-C.+Be+careful+using+functions+that+use+file+names+for+identification
  metadata:
    shortDescription: "Potential time of check time of use vulnerability (chmod)"
    cwe: "CWE-362"
    owasp: "A5:2017-Broken Access Control"
    primary_identifier: "flawfinder.chmod"
    secondary_identifiers:
    - name: "Flawfinder - chmod"
      type: "flawfinder_func_name"
      value: "chmod"
  pattern: "chmod(...)"
  severity: "ERROR"
- id: "flawfinder.chown-1"
  languages:
  - "c"
  message: |
    Usage of the `chown` function call hints at a potential Time Of Check Time Of Use (TOCTOU)
    vulnerability. An attacker may be able to modify the file being specified by the `chmod`
    function prior to the `chown` function being called. Since `chown` will resolve symbolic links,
    an attacker may be able to exploit this fact to have files outside of their control modified.

    It is recommended that the `fchown` or the `lchown` functions be used instead. The `fchown`
    function takes a file descriptor instead of a file. The `lchown` function does not follow
    symbolic links. Ensure the opened file descriptor is pointing to the correct file or
    directory prior to executing `fchown` or any other file based operations.

    For more information please see:
    https://wiki.sei.cmu.edu/confluence/display/c/FIO01-C.+Be+careful+using+functions+that+use+file+names+for+identification
  metadata:
    shortDescription: "Potential time of check time of use vulnerability (chown)"
    cwe: "CWE-362"
    owasp: "A5:2017-Broken Access Control"
    primary_identifier: "flawfinder.chown"
    secondary_identifiers:
    - name: "Flawfinder - chown"
      type: "flawfinder_func_name"
      value: "chown"
  pattern: "chown(...)"
  severity: "ERROR"
- id: "flawfinder.readlink-1"
  languages:
  - "c"
  message: |
    Usage of the `readlink` function call hints at a potential Time Of Check Time Of Use (TOCTOU)
    vulnerability. An attacker may be able to modify the file being specified by the `readlink`
    function prior to the `readlink` function being called. Additionally, care must be taken
    that the buffer provided is large enough to hold the contents of the file.

    Instead of using `readlink`, use `lstat` prior to opening the file and confirm the attributes
    are correct. Then use `open` to get a file descriptor to this file. Call `fstat` on the
    `open` file descriptor to confirm that `st_dev` and `st_ino` are equal between the two.
    If they are, it is safe to read and operate on the file's contents.

    For more information please see:
    https://wiki.sei.cmu.edu/confluence/display/c/FIO45-C.+Avoid+TOCTOU+race+conditions+while+accessing+files
  metadata:
    shortDescription: "Potential time of check time of use vulnerability (readlink)"
    cwe: "CWE-20"
    owasp: "A5:2017-Broken Access Control"
    primary_identifier: "flawfinder.readlink"
    secondary_identifiers:
    - name: "Flawfinder - readlink"
      type: "flawfinder_func_name"
      value: "readlink"
  pattern: "readlink(...)"
  severity: "ERROR"
- id: "flawfinder.vfork-1"
  languages:
  - "c"
  message: |
    The `vfork` function is suffers from portability issues and is not recommended. In
    some Linux systems `vfork` is vulnerable to a race condition while the child process
    is running as the user's UID but hasn't executed `execve`. The user may be able to send
    signals to this process, which in `vfork` would not be sent to the parent process. As
    a result a user may be able to cause a denial of service against the privileged process.

    Use `fork` instead and be aware of other potential Time Of Check Time Of Use (TOCTOU)
    vulnerabilities.

    For more information please see:
    https://wiki.sei.cmu.edu/confluence/display/c/POS38-C.+Beware+of+race+conditions+when+using+fork+and+file+descriptors
  metadata:
    shortDescription: "Potential time of check time of use vulnerability (vfork)"
    cwe: "CWE-362"
    primary_identifier: "flawfinder.vfork"
    secondary_identifiers:
    - name: "Flawfinder - vfork"
      type: "flawfinder_func_name"
      value: "vfork"
  pattern: "vfork(...)"
  severity: "INFO"
- id: "flawfinder.drand48-1.erand48-1.jrand48-1.lcong48-1.lrand48-1.mrand48-1.nrand48-1.random-1.seed48-1.setstate-1.srand-1.strfry-1.srandom-1.g_rand_boolean-1.g_rand_int-1.g_rand_int_range-1.g_rand_double-1.g_rand_double_range-1.g_random_boolean-1.g_random_int-1.g_random_int_range-1.g_random_double-1.g_random_double_range-1"
  languages:
  - "c"
  message: |
    The detected function is not sufficient at generating security-related random numbers,
    such as those used in key and nonce creation. Consider using the libsodium library's
    `randombytes_random` function instead. More information on libsodium's random number
    generators can be found here: https://libsodium.gitbook.io/doc/generating_random_data.

    If FIPS validation is required, consider using OpenSSLs `RAND_bytes` family of functions after
    enabling the `FIPS_mode_set`.

    For more information on OpenSSL random numbers please see:
    https://wiki.openssl.org/index.php/Random_Numbers
  metadata:
    shortDescription: "Usage of insufficient random number generators"
    cwe: "CWE-327"
    owasp: "A3:2017-Sensitive Data Exposure"
    primary_identifier: "flawfinder.drand48-1.erand48-1.jrand48-1.lcong48-1.lrand48-1.mrand48-1.nrand48-1.random-1.seed48-1.setstate-1.srand-1.strfry-1.srandom-1.g_rand_boolean-1.g_rand_int-1.g_rand_int_range-1.g_rand_double-1.g_rand_double_range-1.g_random_boolean-1.g_random_int-1.g_random_int_range-1.g_random_double-1.g_random_double_range-1"
    secondary_identifiers:
    - name: "Flawfinder - drand48"
      type: "flawfinder_func_name"
      value: "drand48"
    - name: "Flawfinder - erand48"
      type: "flawfinder_func_name"
      value: "erand48"
    - name: "Flawfinder - jrand48"
      type: "flawfinder_func_name"
      value: "jrand48"
    - name: "Flawfinder - lcong48"
      type: "flawfinder_func_name"
      value: "lcong48"
    - name: "Flawfinder - lrand48"
      type: "flawfinder_func_name"
      value: "lrand48"
    - name: "Flawfinder - mrand48"
      type: "flawfinder_func_name"
      value: "mrand48"
    - name: "Flawfinder - nrand48"
      type: "flawfinder_func_name"
      value: "nrand48"
    - name: "Flawfinder - random"
      type: "flawfinder_func_name"
      value: "random"
    - name: "Flawfinder - seed48"
      type: "flawfinder_func_name"
      value: "seed48"
    - name: "Flawfinder - setstate"
      type: "flawfinder_func_name"
      value: "setstate"
    - name: "Flawfinder - srand"
      type: "flawfinder_func_name"
      value: "srand"
    - name: "Flawfinder - strfry"
      type: "flawfinder_func_name"
      value: "strfry"
    - name: "Flawfinder - srandom"
      type: "flawfinder_func_name"
      value: "srandom"
    - name: "Flawfinder - g_rand_boolean"
      type: "flawfinder_func_name"
      value: "g_rand_boolean"
    - name: "Flawfinder - g_rand_int"
      type: "flawfinder_func_name"
      value: "g_rand_int"
    - name: "Flawfinder - g_rand_int_range"
      type: "flawfinder_func_name"
      value: "g_rand_int_range"
    - name: "Flawfinder - g_rand_double"
      type: "flawfinder_func_name"
      value: "g_rand_double"
    - name: "Flawfinder - g_rand_double_range"
      type: "flawfinder_func_name"
      value: "g_rand_double_range"
    - name: "Flawfinder - g_random_boolean"
      type: "flawfinder_func_name"
      value: "g_random_boolean"
    - name: "Flawfinder - g_random_int"
      type: "flawfinder_func_name"
      value: "g_random_int"
    - name: "Flawfinder - g_random_int_range"
      type: "flawfinder_func_name"
      value: "g_random_int_range"
    - name: "Flawfinder - g_random_double"
      type: "flawfinder_func_name"
      value: "g_random_double"
    - name: "Flawfinder - g_random_double_range"
      type: "flawfinder_func_name"
      value: "g_random_double_range"
  pattern-either:
  - pattern: "drand48(...)"
  - pattern: "erand48(...)"
  - pattern: "jrand48(...)"
  - pattern: "lcong48(...)"
  - pattern: "lrand48(...)"
  - pattern: "mrand48(...)"
  - pattern: "nrand48(...)"
  - pattern: "random(...)"
  - pattern: "seed48(...)"
  - pattern: "setstate(...)"
  - pattern: "srand(...)"
  - pattern: "strfry(...)"
  - pattern: "srandom(...)"
  - pattern: "g_rand_boolean(...)"
  - pattern: "g_rand_int(...)"
  - pattern: "g_rand_int_range(...)"
  - pattern: "g_rand_double(...)"
  - pattern: "g_rand_double_range(...)"
  - pattern: "g_random_boolean(...)"
  - pattern: "g_random_int(...)"
  - pattern: "g_random_int_range(...)"
  - pattern: "g_random_double(...)"
  - pattern: "g_random_double_range(...)"
  - pattern-regex: "(long|short|double|int|float|void)\\s(\\*|)(\\s|)(seed48|lcong48)(\\(.*\\))\\;"
  severity: "WARNING"
- id: "flawfinder.CreateProcess-1"
  languages:
  - "c"
  message: |
    Due to how `CreateProcess` parses spaces, an attacker may be able to exploit this function
    by creating a binary with the same name that is loaded first, depending on the search path
    order.

    Ensure that quotation marks around the executable path are used, such as:
    ```
    CreateProcessA(NULL, "\"C:\\Program Files\\MyApp.exe\"", ...)
    ```
    For more information, please see MSDNs documentation at:
    https://learn.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-createprocessa#security-remarks
  metadata:
    shortDescription: "Possible executable path hijacking (CreateProcess)"
    cwe: "CWE-78"
    owasp: "A1:2017-Injection"
    primary_identifier: "flawfinder.CreateProcess"
    secondary_identifiers:
    - name: "Flawfinder - CreateProcess"
      type: "flawfinder_func_name"
      value: "CreateProcess"
  pattern: "CreateProcess(...)"
  severity: "WARNING"
- id: "flawfinder.CreateProcessAsUser-1.CreateProcessWithLogon-1"
  languages:
  - "c"
  message: |
    Due to how `CreateProcess` parses spaces, an attacker may be able to exploit this function
    by creating a binary with the same name that is loaded first, depending on the search path
    order.

    Ensure that quotation marks around the executable path are used, such as:
    ```
    CreateProcessAsUser(hToken, NULL, "\"C:\\Program Files\\MyApp.exe\"", ...)
    ```
    For more information, please see MSDNs documentation at:
    https://learn.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-createprocessasusera#security-remarks
  metadata:
    shortDescription: "Possible executable path hijacking (CreateProcessAsUser/CreateProcessWithLogon)"
    cwe: "CWE-78"
    owasp: "A1:2017-Injection"
    primary_identifier: "flawfinder.CreateProcessAsUser-1.CreateProcessWithLogon-1"
    secondary_identifiers:
    - name: "Flawfinder - CreateProcessAsUser"
      type: "flawfinder_func_name"
      value: "CreateProcessAsUser"
    - name: "Flawfinder - CreateProcessWithLogon"
      type: "flawfinder_func_name"
      value: "CreateProcessWithLogon"
  pattern-either:
  - pattern: "CreateProcessAsUser(...)"
  - pattern: "CreateProcessWithLogon(...)"
  severity: "WARNING"
- id: "flawfinder.execl-1.execlp-1.execle-1.execv-1.execvp-1.popen-1.WinExec-1.ShellExecute-1"
  languages:
  - "c"
  message: |
    It is generally not recommended to call out to the operating system to execute commands.
    When the application is executing file system based commands, user input should never be used
    in
    constructing commands or command arguments. If possible, determine if a library can be used
    instead to provide the same functionality. Otherwise, consider hard coding both the command
    and arguments to be used, or at the very least restricting which arguments can be passed
    to the command execution function.

    Please see the compliant solutions in the following page:
    https://wiki.sei.cmu.edu/confluence/pages/viewpage.action?pageId=87152177
  metadata:
    shortDescription: "Potential for OS command injection"
    cwe: "CWE-78"
    owasp: "A1:2017-Injection"
    primary_identifier: "flawfinder.execl-1.execlp-1.execle-1.execv-1.execvp-1.popen-1.WinExec-1.ShellExecute-1"
    secondary_identifiers:
    - name: "Flawfinder - execl"
      type: "flawfinder_func_name"
      value: "execl"
    - name: "Flawfinder - execlp"
      type: "flawfinder_func_name"
      value: "execlp"
    - name: "Flawfinder - execle"
      type: "flawfinder_func_name"
      value: "execle"
    - name: "Flawfinder - execv"
      type: "flawfinder_func_name"
      value: "execv"
    - name: "Flawfinder - execvp"
      type: "flawfinder_func_name"
      value: "execvp"
    - name: "Flawfinder - popen"
      type: "flawfinder_func_name"
      value: "popen"
    - name: "Flawfinder - WinExec"
      type: "flawfinder_func_name"
      value: "WinExec"
    - name: "Flawfinder - ShellExecute"
      type: "flawfinder_func_name"
      value: "ShellExecute"
  pattern-either:
  - pattern: "execl(...)"
  - pattern: "execlp(...)"
  - pattern: "execle(...)"
  - pattern: "execv(...)"
  - pattern: "execvp(...)"
  - pattern: "popen(...)"
  - pattern: "WinExec(...)"
  - pattern: "ShellExecute(...)"
  severity: "ERROR"
- id: "flawfinder.system-1"
  languages:
  - "c"
  message: |
    It is generally not recommended to call out to the operating system to execute commands.
    When the application is executing file system based commands, user input should never be used
    in
    constructing commands or command arguments. If possible, determine if a library can be used
    instead to provide the same functionality. Otherwise, consider hard coding both the command
    and arguments to be used, or at the very least restricting which arguments can be passed
    to the command execution function.

    For more information please see:
    https://wiki.sei.cmu.edu/confluence/pages/viewpage.action?pageId=87152177
  metadata:
    shortDescription: "Potential for OS command injection"
    cwe: "CWE-78"
    owasp: "A1:2017-Injection"
    primary_identifier: "flawfinder.system"
    secondary_identifiers:
    - name: "Flawfinder - system"
      type: "flawfinder_func_name"
      value: "system"
  pattern: "system(...)"
  severity: "ERROR"
- id: "flawfinder.GetTempFileName-1"
  languages:
  - "c"
  message: |
    The `GetTempFileName` function works by generating a randomly named file, creating the file
    (if it does not exist) and then closing it. An application wishing to use this temporary file
    will need to reopen this file to begin working with it. This leads to a potential
    Time Of Check Time Of Use (TOCTOU) vulnerability, as an attacker could replace or modify
    the contents of the file prior to it being used by the application.

    Consider generating a random filename and opening the file directly in a single `CreateFile`
    or `OpenFile` call.
  metadata:
    shortDescription: "Potential time of check time of use vulnerability (GetTempFileName)"
    cwe: "CWE-377"
    owasp: "A5:2017-Broken Access Control"
    primary_identifier: "flawfinder.GetTempFileName"
    secondary_identifiers:
    - name: "Flawfinder - GetTempFileName"
      type: "flawfinder_func_name"
      value: "GetTempFileName"
  pattern: "GetTempFileName(...)"
  severity: "WARNING"
- id: "flawfinder.mkstemp-1"
  languages:
  - "c"
  message: |
    Some older Unix-like systems, `mkstemp` would create temp files with 0666 permissions,
    meaning the file created would be read/write access for all users.

    Ensure the process has called the `umask` function with restricted permissions prior
    to calling `mkstemp` and validate the permissions prior to using the file descriptor.

    For more information on temporary files please see:
    https://wiki.sei.cmu.edu/confluence/pages/viewpage.action?pageId=87152425
  metadata:
    shortDescription: "Potential file permissions issue (mkstemp)"
    cwe: "CWE-377"
    owasp: "A5:2017-Broken Access Control"
    primary_identifier: "flawfinder.mkstemp"
    secondary_identifiers:
    - name: "Flawfinder - mkstemp"
      type: "flawfinder_func_name"
      value: "mkstemp"
  pattern: "mkstemp(...)"
  severity: "INFO"
- id: "flawfinder.mktemp-1"
  languages:
  - "c"
  message: |
    The `mktemp` function should no longer be used due to multiple flaws. Some implementations
    created random files by using known information like the process ID and a single letter. This
    allows for possible race conditions where an attacker could guess or manipulate these files
    prior to them being used.

    Consider using the `mkstemp` function instead, but be aware it also contains possible
    risks. Ensure the process has called the `umask` function with restricted permissions prior
    to calling `mkstemp` and validate the permissions prior to using the file descriptor.

    For more information on temporary files please see:
    https://wiki.sei.cmu.edu/confluence/pages/viewpage.action?pageId=87152425
  metadata:
    shortDescription: "Use of deprecated function (mktemp)"
    cwe: "CWE-377"
    owasp: "A5:2017-Broken Access Control"
    primary_identifier: "flawfinder.mktemp"
    secondary_identifiers:
    - name: "Flawfinder - mktemp"
      type: "flawfinder_func_name"
      value: "mktemp"
  pattern: "mktemp(...)"
  severity: "ERROR"
- id: "flawfinder.tmpfile-1"
  languages:
  - "c"
  message: |
    There exists a possible race condition in between the time that `tmpfile` returns
    a pathname, and the time that the program opens it, another program might create
    that pathname using `open`, or create it as a symbolic link.

    Consider using the `mkstemp` function instead, but be aware it also contains possible
    risks. Ensure the process has called the `umask` function with restricted permissions prior
    to calling `mkstemp` and validate the permissions prior to using the file descriptor.

    For more information on temporary files please see:
    https://wiki.sei.cmu.edu/confluence/pages/viewpage.action?pageId=87152425
  metadata:
    shortDescription: "Potential time of check time of use vulnerability (tmpfile)"
    cwe: "CWE-377"
    owasp: "A5:2017-Broken Access Control"
    primary_identifier: "flawfinder.tmpfile"
    secondary_identifiers:
    - name: "Flawfinder - tmpfile"
      type: "flawfinder_func_name"
      value: "tmpfile"
  pattern: "tmpfile(...)"
  severity: "INFO"
- id: "flawfinder.tmpnam-1.tempnam-1"
  languages:
  - "c"
  message: |
    There exists a possible race condition in between the time that `tempnam` or `tmpnam`
    returns a pathname, and the time that the program opens it, another program might create
    that pathname using `open`, or create it as a symbolic link.

    Consider using the `mkstemp` function instead, but be aware it also contains possible
    risks. Ensure the process has called the `umask` function with restricted permissions prior
    to calling `mkstemp` and validate the permissions prior to using the file descriptor.

    For more information on temporary files please see:
    https://wiki.sei.cmu.edu/confluence/pages/viewpage.action?pageId=87152425
  metadata:
    shortDescription: "Potential time of check time of use vulnerability (tmpnam/tempnam)"
    cwe: "CWE-377"
    owasp: "A5:2017-Broken Access Control"
    primary_identifier: "flawfinder.tmpnam-1.tempnam-1"
    secondary_identifiers:
    - name: "Flawfinder - tmpnam"
      type: "flawfinder_func_name"
      value: "tmpnam"
    - name: "Flawfinder - tempnam"
      type: "flawfinder_func_name"
      value: "tempnam"
  pattern-either:
  - pattern: "tmpnam(...)"
  - pattern: "tempnam(...)"
  severity: "WARNING"
