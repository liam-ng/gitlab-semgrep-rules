{
  "version": "14.0.0",
  "vulnerabilities": [
    {
      "id": "4310c956bd32eee6ad51e670bfceef2c100131c199d672a957cc836f0c996c7d",
      "category": "sast",
      "message": "Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')",
      "description": "Detected eval(variable), which could allow a malicious actor to run arbitrary code.\n",
      "cve": "",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "src/jsx/main.jsx",
        "start_line": 10,
        "end_line": 10
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-eval-with-expression",
          "value": "eslint.detect-eval-with-expression"
        },
        {
          "type": "cwe",
          "name": "CWE-95",
          "value": "95",
          "url": "https://cwe.mitre.org/data/definitions/95.html"
        },
        {
          "type": "owasp",
          "name": "Injection",
          "value": "A1"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID security/detect-eval-with-expression",
          "value": "security/detect-eval-with-expression"
        }
      ]
    },
    {
      "id": "19ac04ca380ac73c983fbceca07de71a62ec5966e065b64fadaf27bfe12274f9",
      "category": "sast",
      "message": "Incorrect Regular Expression",
      "description": "RegExp() called with a variable, this might allow an attacker to DOS your application with a long-running regular expression.\n",
      "cve": "",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "src/jsx/main.jsx",
        "start_line": 14,
        "end_line": 14
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID security/detect-non-literal-regexp",
          "value": "security/detect-non-literal-regexp"
        }
      ]
    },
    {
      "id": "ecbfbc8da9b60f9325f20e7fbdfe3bf4ecd56b0d5e053f39546b8f47a78aac8a",
      "category": "sast",
      "message": "Improper Control of Generation of Code ('Code Injection')",
      "description": "Bracket object notation with user input is present, this might allow an attacker to access all properties of the object and even it's prototype, leading to possible code execution.",
      "cve": "",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "src/jsx/main.jsx",
        "start_line": 25,
        "end_line": 25
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-object-injection",
          "value": "eslint.detect-object-injection"
        },
        {
          "type": "cwe",
          "name": "CWE-94",
          "value": "94",
          "url": "https://cwe.mitre.org/data/definitions/94.html"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID security/detect-object-injection",
          "value": "security/detect-object-injection"
        }
      ]
    }
  ],
  "remediations": [],
  "scan": {
    "scanner": {
      "id": "semgrep",
      "name": "Semgrep",
      "url": "https://github.com/returntocorp/semgrep",
      "vendor": {
        "name": "GitLab"
      },
      "version": "0.39.1"
    },
    "type": "sast",
    "start_time": "2021-05-06T21:49:57",
    "end_time": "2021-05-06T21:50:01",
    "status": "success"
  }
}
