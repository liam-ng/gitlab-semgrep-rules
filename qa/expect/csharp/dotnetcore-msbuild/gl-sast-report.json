{
  "version": "15.0.4",
  "vulnerabilities": [
    {
      "id": ":SKIP:",
      "category": "sast",
      "message": "Weak password requirements",
      "description": "The application's `PasswordValidator.RequiredLength` property allows passwords\nto be less than 8 characters. Consider requiring a length of at least 8 or more\ncharacters to reduce the chance of passwords being brute forced.\n\nExample of setting the RequiredLength to 8 in ASP.NET Core Identity:\n```\nbuilder.Services.Configure<IdentityOptions>(options =>\n{\n    // Default Password settings.\n    options.Password.RequireDigit = true;\n    options.Password.RequireLowercase = true;\n    options.Password.RequireNonAlphanumeric = true;\n    options.Password.RequireUppercase = true;\n    options.Password.RequiredLength = 8;\n    options.Password.RequiredUniqueChars = 1;\n});\n```\n\nFor more information on configuring ASP.NET Core Identity see:\nhttps://learn.microsoft.com/en-us/aspnet/core/security/authentication/identity-configuration\n",
      "cve": "semgrep_id:security_code_scan.SCS0032-1.SCS0033-1.SCS0034-1:19:22",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "ServiceA/ServiceA.cs",
        "start_line": 19,
        "end_line": 22
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "security_code_scan.SCS0032-1.SCS0033-1.SCS0034-1",
          "value": "security_code_scan.SCS0032-1.SCS0033-1.SCS0034-1"
        },
        {
          "type": "cwe",
          "name": "CWE-521",
          "value": "521",
          "url": "https://cwe.mitre.org/data/definitions/521.html"
        },
        {
          "type": "security_code_scan_rule_id",
          "name": "SCS0032",
          "value": "SCS0032"
        },
        {
          "type": "security_code_scan_rule_id",
          "name": "SCS0033",
          "value": "SCS0033"
        },
        {
          "type": "security_code_scan_rule_id",
          "name": "SCS0034",
          "value": "SCS0034"
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "ServiceA/ServiceA.cs",
            "line_start": 19,
            "line_end": 19,
            "signatures": [
              {
                "algorithm": "scope_offset",
                "value": "ServiceA/ServiceA.cs|ServiceA[0]|ServiceA[0]|Main[0]:8"
              }
            ]
          }
        ]
      }
    },
    {
      "id": ":SKIP:",
      "category": "sast",
      "message": "Improper neutralization of special elements used in an OS command ('OS Command Injection')",
      "description": "OS command injection is a critical vulnerability that can lead to a full system\ncompromise as it may allow an adversary to pass in arbitrary commands or arguments\nto be executed.\n\nUser input should never be used in constructing commands or command arguments\nto functions which execute OS commands. This includes filenames supplied by\nuser uploads or downloads.\n\nEnsure your application does not:\n\n- Use user-supplied information in the process name to execute.\n- Use user-supplied information in an OS command execution function which does\nnot escape shell meta-characters.\n- Use user-supplied information in arguments to OS commands.\n\nThe application should have a hardcoded set of arguments that are to be passed\nto OS commands. If filenames are being passed to these functions, it is\nrecommended that a hash of the filename be used instead, or some other unique\nidentifier. It is strongly recommended that a native library that implements\nthe same functionality be used instead of using OS system commands, due to the\nrisk of unknown attacks against third party commands.\n\nWhen specifying the OS command, ensure the application uses the full path\ninformation, otherwise the OS may attempt to look up which process to execute\nand could be vulnerable to untrusted search path vulnerabilities (CWE-426).\n\nExample of safely executing an OS command:\n```\npublic void ExecuteCommand(string userFileData) {\n    // generate a random filename, do not using user input\n    string fileName = \"C:\\\\Temp\\\\\" + Guid.NewGuid();\n    File.WriteAllText(fileName, userFileData);\n\n    using (Process process = new Process())\n    {\n        // hardcode the full process path\n        ProcessStartInfo processInfo = new ProcessStartInfo(\"C:\\\\App\\\\FileReader.exe\");\n        // only pass in trust arguments, and never direct user input.\n        processInfo.Arguments = fileName;\n        processInfo.UseShellExecute = false;\n        process.StartInfo = processInfo;\n        process.Start();\n    }\n}\n```\n\nFor more information on OS command injection, see OWASP's guide:\nhttps://cheatsheetseries.owasp.org/cheatsheets/OS_Command_Injection_Defense_Cheat_Sheet.html\n",
      "cve": "semgrep_id:security_code_scan.SCS0001-1:17:17",
      "severity": "Critical",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "ServiceA/Vuln.cs",
        "start_line": 17
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "security_code_scan.SCS0001-1",
          "value": "security_code_scan.SCS0001-1"
        },
        {
          "type": "cwe",
          "name": "CWE-78",
          "value": "78",
          "url": "https://cwe.mitre.org/data/definitions/78.html"
        },
        {
          "type": "security_code_scan_rule_id",
          "name": "SCS0001",
          "value": "SCS0001"
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "ServiceA/Vuln.cs",
            "line_start": 17,
            "line_end": 17,
            "signatures": [
              {
                "algorithm": "scope_offset",
                "value": "ServiceA/Vuln.cs|ServiceA[0]|Vulnerability[0]|process[0]:5"
              }
            ]
          }
        ]
      }
    },
    {
      "id": ":SKIP:",
      "category": "sast",
      "message": "Improper neutralization of special elements used in an OS command ('OS Command Injection')",
      "description": "OS command injection is a critical vulnerability that can lead to a full system\ncompromise as it may allow an adversary to pass in arbitrary commands or arguments\nto be executed.\n\nUser input should never be used in constructing commands or command arguments\nto functions which execute OS commands. This includes filenames supplied by\nuser uploads or downloads.\n\nEnsure your application does not:\n\n- Use user-supplied information in the process name to execute.\n- Use user-supplied information in an OS command execution function which does\nnot escape shell meta-characters.\n- Use user-supplied information in arguments to OS commands.\n\nThe application should have a hardcoded set of arguments that are to be passed\nto OS commands. If filenames are being passed to these functions, it is\nrecommended that a hash of the filename be used instead, or some other unique\nidentifier. It is strongly recommended that a native library that implements\nthe same functionality be used instead of using OS system commands, due to the\nrisk of unknown attacks against third party commands.\n\nWhen specifying the OS command, ensure the application uses the full path\ninformation, otherwise the OS may attempt to look up which process to execute\nand could be vulnerable to untrusted search path vulnerabilities (CWE-426).\n\nExample of safely executing an OS command:\n```\npublic void ExecuteCommand(string userFileData) {\n    // generate a random filename, do not using user input\n    string fileName = \"C:\\\\Temp\\\\\" + Guid.NewGuid();\n    File.WriteAllText(fileName, userFileData);\n\n    using (Process process = new Process())\n    {\n        // hardcode the full process path\n        ProcessStartInfo processInfo = new ProcessStartInfo(\"C:\\\\App\\\\FileReader.exe\");\n        // only pass in trust arguments, and never direct user input.\n        processInfo.Arguments = fileName;\n        processInfo.UseShellExecute = false;\n        process.StartInfo = processInfo;\n        process.Start();\n    }\n}\n```\n\nFor more information on OS command injection, see OWASP's guide:\nhttps://cheatsheetseries.owasp.org/cheatsheets/OS_Command_Injection_Defense_Cheat_Sheet.html\n",
      "cve": "semgrep_id:security_code_scan.SCS0001-1:18:18",
      "severity": "Critical",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "ServiceA/Vuln.cs",
        "start_line": 18
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "security_code_scan.SCS0001-1",
          "value": "security_code_scan.SCS0001-1"
        },
        {
          "type": "cwe",
          "name": "CWE-78",
          "value": "78",
          "url": "https://cwe.mitre.org/data/definitions/78.html"
        },
        {
          "type": "security_code_scan_rule_id",
          "name": "SCS0001",
          "value": "SCS0001"
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "ServiceA/Vuln.cs",
            "line_start": 18,
            "line_end": 18,
            "signatures": [
              {
                "algorithm": "scope_offset",
                "value": "ServiceA/Vuln.cs|ServiceA[0]|Vulnerability[0]|process[0]:6"
              }
            ]
          }
        ]
      }
    },
    {
      "id": ":SKIP:",
      "category": "sast",
      "message": "Use of cryptographically weak Pseudo-Random Number Generator (PRNG)",
      "description": "Depending on the context, generating weak random numbers may expose cryptographic functions\nwhich rely on these numbers to be exploitable. When generating numbers for sensitive values\nsuch as tokens, nonces, and cryptographic keys, it is recommended that the\n`RandomNumberGenerator` class be used.\n\nExample `RandomNumberGenerator` usage:\n```\nInt32 randInt = RandomNumberGenerator.GetInt32(32000);\nbyte[] randomBytes = new byte[64];\nRandomNumberGenerator.Fill(randomBytes);\nConsole.WriteLine(\"Random Int32: {0}\", randInt);\nConsole.WriteLine(\"Random Bytes: {0}\", BitConverter.ToString(randomBytes).Replace(\"-\", \"\"));\n```\n\nFor more information see:\nhttps://learn.microsoft.com/en-us/dotnet/api/system.security.cryptography.randomnumbergenerator\n",
      "cve": "semgrep_id:security_code_scan.SCS0005-1:15:15",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "ServiceB/Random.cs",
        "start_line": 15
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "security_code_scan.SCS0005-1",
          "value": "security_code_scan.SCS0005-1"
        },
        {
          "type": "cwe",
          "name": "CWE-338",
          "value": "338",
          "url": "https://cwe.mitre.org/data/definitions/338.html"
        },
        {
          "type": "security_code_scan_rule_id",
          "name": "SCS0005",
          "value": "SCS0005"
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "ServiceB/Random.cs",
            "line_start": 15,
            "line_end": 15,
            "signatures": [
              {
                "algorithm": "scope_offset",
                "value": "ServiceB/Random.cs|ServiceB[0]|GetRandom[0]|RandomNumber[0]:4"
              }
            ]
          }
        ]
      }
    }
  ],
  "dependency_files": [],
  "scan": {
    "analyzer": {
      "id": "semgrep",
      "name": "Semgrep",
      "url": "https://gitlab.com/gitlab-org/security-products/analyzers/semgrep",
      "vendor": {
        "name": "GitLab"
      },
      "version": ":SKIP:"
    },
    "scanner": {
      "id": "semgrep",
      "name": "Semgrep",
      "url": "https://github.com/returntocorp/semgrep",
      "vendor": {
        "name": "GitLab"
      },
      "version": ":SKIP:"
    },
    "type": "sast",
    "start_time": ":SKIP:",
    "end_time": ":SKIP:",
    "status": "success"
  }
}
