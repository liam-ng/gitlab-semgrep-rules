{
  "version": "15.0.4",
  "vulnerabilities": [
    {
      "id": ":SKIP:",
      "category": "sast",
      "name": "Improper limitation of a pathname to a restricted directory ('Path Traversal')",
      "title": "Improper limitation of a pathname to a restricted directory ('Path Traversal')",
      "description": "The application dynamically constructs file or path information. If the path\ninformation comes from user input, it could be abused to read sensitive files,\naccess other users data, or aid in exploitation to gain further system access.\n\nUser input should never be used in constructing paths or files for interacting\nwith the filesystem. This includes filenames supplied by user uploads or downloads.\nIf possible consider hashing user input or replacing it with unique values and\nuse `System.IO.Path.GetFullPath` to resolve and validate the path information\nprior to processing any file functionality.\n\nExample using `Path.GetFullPath` and not allowing direct user input:\n```\n// store user input alongside an ID we control\nstruct userData\n{\n    public string userFilename;\n    public Guid id;\n}\n\nclass Program\n{\n    public static void Main()\n    {\n        userData data = new userData();\n        // user input, saved only as a reference\n        data.userFilename = \"..\\\\test.txt\";\n\n        // random id as the filename\n        data.id = Guid.NewGuid();\n\n        // restrict all file processing to this directory only\n        string basePath = \"C:\\\\Restricted\\\\\";\n\n        // resolve the full path, but only use our random generated id\n        string fullPath = Path.GetFullPath(basePath + data.id);\n\n        // verify the path is contained within our basePath\n        if (!fullPath.StartsWith(basePath)) {\n            Console.WriteLine(\"Invalid path specified!\");\n            return;\n        }\n        // process / work with file\n    }\n}\n```\n\nFor more information on path traversal issues see OWASP:\nhttps://owasp.org/www-community/attacks/Path_Traversal\n",
      "cve": "semgrep_id:security_code_scan.SCS0018-1:52:52",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "Project2/WebApp/Controllers/HomeController.cs",
        "start_line": 52
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "security_code_scan.SCS0018-1",
          "value": "security_code_scan.SCS0018-1"
        },
        {
          "type": "cwe",
          "name": "CWE-22",
          "value": "22",
          "url": "https://cwe.mitre.org/data/definitions/22.html"
        },
        {
          "type": "security_code_scan_rule_id",
          "name": "SCS0018",
          "value": "SCS0018"
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "Project2/WebApp/Controllers/HomeController.cs",
            "line_start": 52,
            "line_end": 52,
            "signatures": [
              {
                "algorithm": "scope_offset_compressed",
                "value": "Project2/WebApp/Controllers/HomeController.cs|HomeController[0]|IActionResult[5]:1"
              },
              {
                "algorithm": "scope_offset",
                "value": "Project2/WebApp/Controllers/HomeController.cs|HomeController[0]|IActionResult[5]:2"
              }
            ]
          }
        ]
      }
    },
    {
      "id": ":SKIP:",
      "category": "sast",
      "name": "Incorrect regular expression",
      "title": "Incorrect regular expression",
      "description": "The `RegExp` constructor was called with a non-literal variable. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger\nbe responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular\nexpression should be\nhardcoded. If this is not possible, consider using an alternative regular expression engine\nsuch as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative that does not\nsupport backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:345:345",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "Project2/WebApp/wwwroot/lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.js",
        "start_line": 345
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ]
    },
    {
      "id": ":SKIP:",
      "category": "sast",
      "name": "Use of cryptographically weak Pseudo-Random Number Generator (PRNG)",
      "title": "Use of cryptographically weak Pseudo-Random Number Generator (PRNG)",
      "description": "Depending on the context, generating weak random numbers may expose cryptographic functions\nwhich rely on these numbers to be exploitable. When generating numbers for sensitive values\nsuch as tokens, nonces, and cryptographic keys, it is recommended that the\n`RandomNumberGenerator` class be used.\n\nExample `RandomNumberGenerator` usage:\n```\nInt32 randInt = RandomNumberGenerator.GetInt32(32000);\nbyte[] randomBytes = new byte[64];\nRandomNumberGenerator.Fill(randomBytes);\nConsole.WriteLine(\"Random Int32: {0}\", randInt);\nConsole.WriteLine(\"Random Bytes: {0}\", BitConverter.ToString(randomBytes).Replace(\"-\", \"\"));\n```\n\nFor more information see:\nhttps://learn.microsoft.com/en-us/dotnet/api/system.security.cryptography.randomnumbergenerator\n",
      "cve": "semgrep_id:security_code_scan.SCS0005-1:11:11",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "Project2/WebLib/GetRandom.cs",
        "start_line": 11
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "security_code_scan.SCS0005-1",
          "value": "security_code_scan.SCS0005-1"
        },
        {
          "type": "cwe",
          "name": "CWE-338",
          "value": "338",
          "url": "https://cwe.mitre.org/data/definitions/338.html"
        },
        {
          "type": "security_code_scan_rule_id",
          "name": "SCS0005",
          "value": "SCS0005"
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "Project2/WebLib/GetRandom.cs",
            "line_start": 11,
            "line_end": 11,
            "signatures": [
              {
                "algorithm": "scope_offset_compressed",
                "value": "Project2/WebLib/GetRandom.cs|WebLib[0]|GetRandom[0]|RandomNumber[0]:3"
              },
              {
                "algorithm": "scope_offset",
                "value": "Project2/WebLib/GetRandom.cs|WebLib[0]|GetRandom[0]|RandomNumber[0]:4"
              }
            ]
          }
        ]
      }
    },
    {
      "id": ":SKIP:",
      "category": "sast",
      "name": "Improper limitation of a pathname to a restricted directory ('Path Traversal')",
      "title": "Improper limitation of a pathname to a restricted directory ('Path Traversal')",
      "description": "The application dynamically constructs file or path information. If the path\ninformation comes from user input, it could be abused to read sensitive files,\naccess other users data, or aid in exploitation to gain further system access.\n\nUser input should never be used in constructing paths or files for interacting\nwith the filesystem. This includes filenames supplied by user uploads or downloads.\nIf possible consider hashing user input or replacing it with unique values and\nuse `System.IO.Path.GetFullPath` to resolve and validate the path information\nprior to processing any file functionality.\n\nExample using `Path.GetFullPath` and not allowing direct user input:\n```\n// store user input alongside an ID we control\nstruct userData\n{\n    public string userFilename;\n    public Guid id;\n}\n\nclass Program\n{\n    public static void Main()\n    {\n        userData data = new userData();\n        // user input, saved only as a reference\n        data.userFilename = \"..\\\\test.txt\";\n\n        // random id as the filename\n        data.id = Guid.NewGuid();\n\n        // restrict all file processing to this directory only\n        string basePath = \"C:\\\\Restricted\\\\\";\n\n        // resolve the full path, but only use our random generated id\n        string fullPath = Path.GetFullPath(basePath + data.id);\n\n        // verify the path is contained within our basePath\n        if (!fullPath.StartsWith(basePath)) {\n            Console.WriteLine(\"Invalid path specified!\");\n            return;\n        }\n        // process / work with file\n    }\n}\n```\n\nFor more information on path traversal issues see OWASP:\nhttps://owasp.org/www-community/attacks/Path_Traversal\n",
      "cve": "semgrep_id:security_code_scan.SCS0018-1:52:52",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "WebApp/Controllers/HomeController.cs",
        "start_line": 52
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "security_code_scan.SCS0018-1",
          "value": "security_code_scan.SCS0018-1"
        },
        {
          "type": "cwe",
          "name": "CWE-22",
          "value": "22",
          "url": "https://cwe.mitre.org/data/definitions/22.html"
        },
        {
          "type": "security_code_scan_rule_id",
          "name": "SCS0018",
          "value": "SCS0018"
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "WebApp/Controllers/HomeController.cs",
            "line_start": 52,
            "line_end": 52,
            "signatures": [
              {
                "algorithm": "scope_offset_compressed",
                "value": "WebApp/Controllers/HomeController.cs|HomeController[0]|IActionResult[5]:1"
              },
              {
                "algorithm": "scope_offset",
                "value": "WebApp/Controllers/HomeController.cs|HomeController[0]|IActionResult[5]:2"
              }
            ]
          }
        ]
      }
    },
    {
      "id": ":SKIP:",
      "category": "sast",
      "name": "Incorrect regular expression",
      "title": "Incorrect regular expression",
      "description": "The `RegExp` constructor was called with a non-literal variable. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger\nbe responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular\nexpression should be\nhardcoded. If this is not possible, consider using an alternative regular expression engine\nsuch as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative that does not\nsupport backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",
      "cve": "semgrep_id:eslint.detect-non-literal-regexp:345:345",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "WebApp/wwwroot/lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.js",
        "start_line": 345
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "eslint.detect-non-literal-regexp",
          "value": "eslint.detect-non-literal-regexp",
          "url": "https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp"
        },
        {
          "type": "cwe",
          "name": "CWE-185",
          "value": "185",
          "url": "https://cwe.mitre.org/data/definitions/185.html"
        },
        {
          "type": "eslint_rule_id",
          "name": "ESLint rule ID/detect-non-literal-regexp",
          "value": "detect-non-literal-regexp"
        }
      ]
    },
    {
      "id": ":SKIP:",
      "category": "sast",
      "name": "Use of cryptographically weak Pseudo-Random Number Generator (PRNG)",
      "title": "Use of cryptographically weak Pseudo-Random Number Generator (PRNG)",
      "description": "Depending on the context, generating weak random numbers may expose cryptographic functions\nwhich rely on these numbers to be exploitable. When generating numbers for sensitive values\nsuch as tokens, nonces, and cryptographic keys, it is recommended that the\n`RandomNumberGenerator` class be used.\n\nExample `RandomNumberGenerator` usage:\n```\nInt32 randInt = RandomNumberGenerator.GetInt32(32000);\nbyte[] randomBytes = new byte[64];\nRandomNumberGenerator.Fill(randomBytes);\nConsole.WriteLine(\"Random Int32: {0}\", randInt);\nConsole.WriteLine(\"Random Bytes: {0}\", BitConverter.ToString(randomBytes).Replace(\"-\", \"\"));\n```\n\nFor more information see:\nhttps://learn.microsoft.com/en-us/dotnet/api/system.security.cryptography.randomnumbergenerator\n",
      "cve": "semgrep_id:security_code_scan.SCS0005-1:11:11",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "WebLib/GetRandom.cs",
        "start_line": 11
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "security_code_scan.SCS0005-1",
          "value": "security_code_scan.SCS0005-1"
        },
        {
          "type": "cwe",
          "name": "CWE-338",
          "value": "338",
          "url": "https://cwe.mitre.org/data/definitions/338.html"
        },
        {
          "type": "security_code_scan_rule_id",
          "name": "SCS0005",
          "value": "SCS0005"
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "WebLib/GetRandom.cs",
            "line_start": 11,
            "line_end": 11,
            "signatures": [
              {
                "algorithm": "scope_offset_compressed",
                "value": "WebLib/GetRandom.cs|WebLib[0]|GetRandom[0]|RandomNumber[0]:3"
              },
              {
                "algorithm": "scope_offset",
                "value": "WebLib/GetRandom.cs|WebLib[0]|GetRandom[0]|RandomNumber[0]:4"
              }
            ]
          }
        ]
      }
    }
  ],
  "dependency_files": [],
  "scan": {
    "analyzer": {
      "id": "semgrep",
      "name": "Semgrep",
      "url": "https://gitlab.com/gitlab-org/security-products/analyzers/semgrep",
      "vendor": {
        "name": "GitLab"
      },
      "version": ":SKIP:"
    },
    "scanner": {
      "id": "semgrep",
      "name": "Semgrep",
      "url": "https://github.com/returntocorp/semgrep",
      "vendor": {
        "name": "GitLab"
      },
      "version": ":SKIP:"
    },
    "type": "sast",
    "start_time": ":SKIP:",
    "end_time": ":SKIP:",
    "status": "success"
  }
}
