{
  "version": "15.0.4",
  "vulnerabilities": [
    {
      "id": ":SKIP:",
      "category": "sast",
      "message": "Improper limitation of a pathname to a restricted directory ('Path Traversal')",
      "description": "The application dynamically constructs file or path information. If the path\ninformation comes from user input, it could be abused to read sensitive files,\naccess other users data or aid in exploitation to gain further system access.\n\nUser input should never be used in constructing paths or files for interacting\nwith the filesystem. This includes filenames supplied by user uploads or downloads.\nIf possible, consider hashing user input or replacing it with unique values.\nAdditionally, use `filepath.Base` to only use the filename and not path information.\nAlways validate the full path prior to opening or writing to any file.\n\nExample using `filepath.Base`, generating a unique filename without using\nuser input to construct filepath information:\n```\ntype userData struct {\n    id           string\n    userFilename string\n}\n\nfunc newUserData(userFilename string) userData {\n    return userData{\n        id:           randomFileID(), // random id as the filename\n        userFilename: userFilename,\n    }\n}\n\n// randomFileID generates a random id, to be used as a filename\nfunc randomFileID() string {\n    id := make([]byte, 16)\n    if _, err := io.ReadFull(rand.Reader, id); err != nil {\n        log.Fatal(err)\n    }\n    return hex.EncodeToString(id)\n}\n\nfunc main() {\n\n    // user input, saved only as a reference\n    data := newUserData(\"../../possibly/malicious\")\n\n    // restrict all file access to this path\n    const basePath = \"/tmp/\"\n\n    // resolve the full path, but only use our random generated id\n    resolvedPath, err := filepath.Join(basePath, filepath.Base(data.id))\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    // verify the path is prefixed with our basePath\n    if !strings.HasPrefix(resolvedPath, basePath) {\n        log.Fatal(\"path does not start with basePath\")\n    }\n    // process / work with file\n}\n```\n\nFor more information on path traversal issues see OWASP:\nhttps://owasp.org/www-community/attacks/Path_Traversal\n",
      "cve": "semgrep_id:gosec.G304-1:11:11",
      "severity": "Medium",
      "scanner": {
        "id": "semgrep",
        "name": "Semgrep"
      },
      "location": {
        "file": "main.go",
        "start_line": 11
      },
      "identifiers": [
        {
          "type": "semgrep_id",
          "name": "gosec.G304-1",
          "value": "gosec.G304-1"
        },
        {
          "type": "cwe",
          "name": "CWE-22",
          "value": "22",
          "url": "https://cwe.mitre.org/data/definitions/22.html"
        },
        {
          "type": "gosec_rule_id",
          "name": "Gosec Rule ID G304",
          "value": "G304"
        }
      ],
      "tracking": {
        "type": "source",
        "items": [
          {
            "file": "main.go",
            "line_start": 11,
            "line_end": 11,
            "signatures": [
              {
                "algorithm": "scope_offset",
                "value": "main.go|main[0]:2"
              }
            ]
          }
        ]
      }
    }
  ],
  "dependency_files": [],
  "scan": {
    "analyzer": {
      "id": "semgrep",
      "name": "Semgrep",
      "url": "https://gitlab.com/gitlab-org/security-products/analyzers/semgrep",
      "vendor": {
        "name": "GitLab"
      },
      "version": ":SKIP:"
    },
    "scanner": {
      "id": "semgrep",
      "name": "Semgrep",
      "url": "https://github.com/returntocorp/semgrep",
      "vendor": {
        "name": "GitLab"
      },
      "version": "1.23.0"
    },
    "type": "sast",
    "start_time": ":SKIP:",
    "end_time": ":SKIP:",
    "status": "success"
  }
}
